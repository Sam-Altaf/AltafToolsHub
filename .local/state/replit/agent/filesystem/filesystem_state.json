{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AltafToolsHub - Privacy-First File Processing Tools\n\n## Overview\n\nAltafToolsHub is a comprehensive web application offering privacy-first file processing and utility tools. All file processing happens 100% client-side, ensuring complete privacy as files never leave the user's browser. The platform features PDF tools (compression with intelligent target sizes, password unlocking, JPG to PDF conversion) and utility tools (QR code generator, password generator, word counter). Built with React 18 and Express, it provides a modern, responsive interface with dark/light mode support, professional animations, and SEO optimization for 2025.\n\n## Recent Updates (December 2024)\n\n### Major Features Added\n- **PDF Compressor Complete Fix (January 2025)**: Rebuilt with PDF.js canvas-based compression, real progress bar, exact target size achievement through binary search, and local worker for true offline/privacy\n- **Password Toggle**: Show/hide password functionality for PDF unlocker with eye icon\n- **Complete UI/UX Redesign**: Modern gradient theme with glass morphism effects, uniform card layouts, and professional animations\n- **Custom Logo**: Hexagonal hub design with integrated tool icons representing the multi-tool nature of the platform\n- **Dark/Light Mode**: Complete theme system with system preference detection and persistence\n- **Responsive Navigation**: Mobile-optimized hamburger menu and desktop navigation with dropdowns\n- **Privacy Compliance**: Cookie consent popup, comprehensive privacy policy, and terms of service pages\n- **New Tools Added**: QR Code Generator, Password Generator, and Word Counter - all with 100% client-side processing\n- **SEO Optimization**: Complete 2025 SEO implementation with structured data, meta tags, sitemap, and performance optimizations\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom design system based on shadcn/ui components\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Radix UI primitives with custom styling for accessibility and consistency\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **API Design**: RESTful API structure with /api prefix routing\n- **Development**: Hot module reloading with Vite integration in development mode\n- **Storage Interface**: Modular storage abstraction with in-memory implementation\n\n### Design System\n- **Color Scheme**: Modern gradient-based theme (Purple #8B5CF6 to Blue #3B82F6 to Cyan #06B6D4), Teal accents (#14B8A6)\n- **Visual Effects**: Glass morphism effects with backdrop blur for modern aesthetic\n- **Typography**: Inter font family from Google Fonts with improved hierarchy\n- **Components**: shadcn/ui component library with custom gradient theming and animations\n- **Responsive Design**: Mobile-first approach with breakpoints at 640px, 768px, 1024px, 1280px\n- **Theme System**: Dark/light mode with system preference detection and localStorage persistence\n- **Logo**: Custom hexagonal hub design with integrated tool icons and gradient colors\n\n### Database Integration\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon Database serverless driver\n- **Schema Management**: Centralized schema definitions in shared directory\n- **Migrations**: Drizzle Kit for database migration management\n\n### File Processing Strategy\n- **Privacy Focus**: Client-side processing to ensure files never leave user's browser\n- **File Handling**: Browser-based file manipulation without server uploads\n- **Security**: No server-side file storage or processing for maximum privacy\n- **PDF Compression**: Canvas-based compression using PDF.js with exact target size options (10KB-5MB) through binary search algorithm, converts to optimized images for maximum compression\n- **Password Features**: PDF unlocking with password show/hide toggle\n- **Image Conversion**: Multiple JPG to PDF conversion with reordering support\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@vitejs/plugin-react**: React plugin for Vite build system\n- **wouter**: Lightweight routing library for React applications\n- **@tanstack/react-query**: Server state management and caching\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework for styling\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **lucide-react**: Icon library for consistent iconography\n\n### Database and Backend\n- **drizzle-orm**: Type-safe ORM for database operations\n- **@neondatabase/serverless**: Serverless PostgreSQL driver\n- **drizzle-kit**: Database migration and schema management tools\n- **express**: Web application framework for Node.js\n\n### Development Tools\n- **typescript**: Static type checking for JavaScript\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Form and Validation\n- **react-hook-form**: Performant forms with easy validation\n- **@hookform/resolvers**: Validation resolver for react-hook-form\n- **zod**: TypeScript-first schema validation library\n\n### Utility Libraries\n- **date-fns**: Modern JavaScript date utility library\n- **clsx**: Utility for constructing className strings conditionally\n- **nanoid**: URL-safe unique string ID generator\n- **framer-motion**: Professional animation library for React\n- **qrcode**: Client-side QR code generation\n- **pdf-lib**: PDF manipulation library for client-side processing\n- **pdfjs-dist**: PDF.js library for rendering and processing PDFs","size_bytes":5983},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\"\n  }, () => {\n  log(`Server running at http://0.0.0.0:${port}`);\n  });\n})();\n","size_bytes":2059},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/theme-context\";\nimport ScrollToTop from \"@/components/scroll-to-top\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport CompressPDF from \"@/pages/compress-pdf\";\nimport UnlockPDF from \"@/pages/unlock-pdf\";\nimport JpgToPDF from \"@/pages/jpg-to-pdf\";\nimport QRGenerator from \"@/pages/qr-generator\";\nimport PasswordGenerator from \"@/pages/password-generator\";\nimport WordCounter from \"@/pages/word-counter\";\nimport TextEnhancer from \"@/pages/text-enhancer\";\nimport ExtractText from \"@/pages/extract-text\";\nimport FileCalculator from \"@/pages/file-calculator\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsConditions from \"@/pages/terms-conditions\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport CookieConsent from \"@/components/cookie-consent\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <ScrollToTop />\n      <Header />\n      <div className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/compress-pdf\" component={CompressPDF} />\n          <Route path=\"/unlock-pdf\" component={UnlockPDF} />\n          <Route path=\"/jpg-to-pdf\" component={JpgToPDF} />\n          <Route path=\"/qr-generator\" component={QRGenerator} />\n          <Route path=\"/password-generator\" component={PasswordGenerator} />\n          <Route path=\"/word-counter\" component={WordCounter} />\n          <Route path=\"/text-enhancer\" component={TextEnhancer} />\n          <Route path=\"/extract-text\" component={ExtractText} />\n          <Route path=\"/file-calculator\" component={FileCalculator} />\n          <Route path=\"/privacy\" component={PrivacyPolicy} />\n          <Route path=\"/terms\" component={TermsConditions} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <CookieConsent />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2494},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Modern Light Theme */\n  --background: hsl(0, 0%, 98%);\n  --foreground: hsl(224, 71%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 71%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 71%, 4%);\n  --primary: hsl(263, 70%, 65%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(174, 72%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(220, 14%, 96%);\n  --muted-foreground: hsl(220, 9%, 46%);\n  --accent: hsl(217, 91%, 60%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(263, 70%, 65%);\n  --chart-1: hsl(203, 88%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(224, 71%, 4%);\n  --sidebar-primary: hsl(263, 70%, 65%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 91%, 95%);\n  --sidebar-accent-foreground: hsl(224, 71%, 4%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(263, 70%, 65%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --radius-sm: 0.5rem;\n  --radius-lg: 1rem;\n}\n\n.dark {\n  /* Modern Dark Theme */\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 47%, 11%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 47%, 11%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(263, 70%, 65%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(174, 72%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 91%, 60%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 63%, 51%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(263, 70%, 65%);\n  --chart-1: hsl(203, 88%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(222, 47%, 11%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(263, 70%, 65%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 91%, 15%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 33%, 17%);\n  --sidebar-ring: hsl(263, 70%, 65%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    min-height: 100vh;\n  }\n  \n  /* Typography hierarchy */\n  h1 {\n    @apply text-4xl sm:text-5xl lg:text-6xl font-bold tracking-tight;\n  }\n  \n  h2 {\n    @apply text-2xl sm:text-3xl lg:text-4xl font-semibold tracking-tight;\n  }\n  \n  h3 {\n    @apply text-xl sm:text-2xl lg:text-3xl font-semibold;\n  }\n  \n  h4 {\n    @apply text-lg sm:text-xl lg:text-2xl font-medium;\n  }\n  \n  p {\n    @apply text-base leading-relaxed;\n  }\n}\n\n/* Glass morphism effects */\n.glass {\n  @apply bg-white/80 backdrop-blur-xl border border-gray-200/50;\n}\n\n.glass-dark {\n  @apply bg-gray-900/80 backdrop-blur-xl border border-gray-800/50;\n}\n\n.dark .glass {\n  @apply bg-gray-900/80 backdrop-blur-xl border border-gray-800/50;\n}\n\n/* Gradient utilities */\n.gradient-primary {\n  background: linear-gradient(135deg, #8B5CF6 0%, #3B82F6 100%);\n}\n\n.gradient-primary-hover {\n  background: linear-gradient(135deg, #7C3AED 0%, #2563EB 100%);\n}\n\n.gradient-secondary {\n  background: linear-gradient(135deg, #14B8A6 0%, #0D9488 100%);\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, #8B5CF6 0%, #3B82F6 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Button gradient */\n.btn-gradient {\n  background: linear-gradient(135deg, #8B5CF6 0%, #3B82F6 100%);\n  transition: all 0.3s ease;\n}\n\n.btn-gradient:hover {\n  background: linear-gradient(135deg, #7C3AED 0%, #2563EB 100%);\n  transform: translateY(-1px);\n  box-shadow: 0 10px 20px -10px rgba(139, 92, 246, 0.5);\n}\n\n.gradient-text-secondary {\n  background: linear-gradient(135deg, #14B8A6 0%, #0D9488 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Hero gradient with animation */\n.hero-gradient {\n  background: linear-gradient(135deg, #8B5CF6 0%, #3B82F6 25%, #14B8A6 75%, #0D9488 100%);\n  background-size: 300% 300%;\n  animation: gradient-shift 20s ease infinite;\n}\n\n@keyframes gradient-shift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Glass morphism effects */\n.glass {\n  background: rgba(255, 255, 255, 0.7);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.glass-dark {\n  background: rgba(30, 41, 59, 0.7);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.dark .glass {\n  background: rgba(30, 41, 59, 0.7);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Card styles with glass effect */\n.tool-card {\n  @apply relative overflow-hidden rounded-xl;\n  background: rgba(255, 255, 255, 0.8);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(139, 92, 246, 0.1);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  min-height: 280px;\n}\n\n.tool-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, rgba(59, 130, 246, 0.05) 100%);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.tool-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 20px 40px -5px rgba(139, 92, 246, 0.2), 0 10px 20px -5px rgba(59, 130, 246, 0.1);\n  border-color: rgba(139, 92, 246, 0.3);\n}\n\n.tool-card:hover::before {\n  opacity: 1;\n}\n\n.dark .tool-card {\n  background: rgba(30, 41, 59, 0.8);\n  border: 1px solid rgba(139, 92, 246, 0.2);\n}\n\n.dark .tool-card:hover {\n  border-color: rgba(139, 92, 246, 0.5);\n  box-shadow: 0 20px 40px -5px rgba(139, 92, 246, 0.3), 0 10px 20px -5px rgba(59, 130, 246, 0.2);\n}\n\n/* Feature card styling */\n.feature-card {\n  @apply p-6 rounded-xl transition-all duration-300;\n  background: linear-gradient(135deg, rgba(139, 92, 246, 0.05) 0%, rgba(59, 130, 246, 0.02) 100%);\n}\n\n.feature-card:hover {\n  transform: translateY(-4px);\n  background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, rgba(59, 130, 246, 0.05) 100%);\n}\n\n/* Drag and drop area */\n.drag-area {\n  @apply rounded-xl transition-all duration-300;\n  background: linear-gradient(135deg, rgba(139, 92, 246, 0.03) 0%, rgba(59, 130, 246, 0.03) 100%);\n  border: 2px dashed rgba(139, 92, 246, 0.3);\n}\n\n.drag-area:hover {\n  background: linear-gradient(135deg, rgba(139, 92, 246, 0.08) 0%, rgba(59, 130, 246, 0.08) 100%);\n  border-color: rgba(139, 92, 246, 0.5);\n}\n\n.drag-area.dragover {\n  background: linear-gradient(135deg, rgba(139, 92, 246, 0.15) 0%, rgba(59, 130, 246, 0.15) 100%);\n  border-color: #8B5CF6;\n  transform: scale(1.02);\n  box-shadow: 0 10px 30px -5px rgba(139, 92, 246, 0.2);\n}\n\n/* Button styles */\n.btn-gradient {\n  @apply relative overflow-hidden text-white font-medium px-6 py-3 rounded-lg transition-all duration-300;\n  background: linear-gradient(135deg, #8B5CF6 0%, #3B82F6 100%);\n  box-shadow: 0 4px 15px -3px rgba(139, 92, 246, 0.3);\n}\n\n.btn-gradient::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s ease;\n}\n\n.btn-gradient:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px -5px rgba(139, 92, 246, 0.4);\n}\n\n.btn-gradient:hover::before {\n  left: 100%;\n}\n\n.btn-gradient:active {\n  transform: translateY(0);\n}\n\n.btn-secondary {\n  @apply px-6 py-3 rounded-lg font-medium transition-all duration-300;\n  background: linear-gradient(135deg, #14B8A6 0%, #0D9488 100%);\n  color: white;\n}\n\n.btn-secondary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px -5px rgba(20, 184, 166, 0.4);\n}\n\n/* Progress bar */\n.upload-progress {\n  @apply h-2 rounded-full overflow-hidden bg-gray-200;\n  position: relative;\n}\n\n.upload-progress::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: var(--progress, 0%);\n  background: linear-gradient(90deg, #8B5CF6 0%, #3B82F6 100%);\n  transition: width 0.3s ease;\n}\n\n/* Badge styles */\n.badge-coming-soon {\n  @apply inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold;\n  background: linear-gradient(135deg, #14B8A6 0%, #0D9488 100%);\n  color: white;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.badge-new {\n  @apply inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold;\n  background: linear-gradient(135deg, #F59E0B 0%, #EF4444 100%);\n  color: white;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n/* Pattern background */\n.pattern-bg {\n  position: relative;\n  background-color: var(--background);\n}\n\n.pattern-bg::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0.03;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%238B5CF6' fill-opacity='1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n  pointer-events: none;\n}\n\n/* Loading skeleton animation */\n@keyframes skeleton-loading {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n.skeleton {\n  background: linear-gradient(\n    90deg,\n    rgba(139, 92, 246, 0.1) 25%,\n    rgba(139, 92, 246, 0.2) 50%,\n    rgba(139, 92, 246, 0.1) 75%\n  );\n  background-size: 200% 100%;\n  animation: skeleton-loading 1.5s infinite;\n}\n\n/* Focus styles */\n*:focus-visible {\n  @apply outline-none ring-2 ring-primary ring-offset-2 ring-offset-background;\n}\n\n/* Mobile-first responsive utilities */\n@media (max-width: 640px) {\n  .container {\n    @apply px-4;\n  }\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, #8B5CF6 0%, #3B82F6 100%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, #7C3AED 0%, #2563EB 100%);\n}","size_bytes":11085},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/logo.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\ninterface LogoProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  variant?: \"full\" | \"icon\";\n  animated?: boolean;\n}\n\nexport function Logo({ \n  className, \n  size = \"md\", \n  variant = \"full\",\n  animated = false \n}: LogoProps) {\n  const sizes = {\n    sm: { icon: 32, text: 20, width: 140 },\n    md: { icon: 40, text: 24, width: 180 },\n    lg: { icon: 48, text: 28, width: 220 },\n    xl: { icon: 64, text: 36, width: 280 }\n  };\n\n  const currentSize = sizes[size];\n  const iconSize = currentSize.icon;\n  const totalWidth = variant === \"icon\" ? iconSize : currentSize.width;\n  const totalHeight = iconSize;\n\n  const LogoWrapper = animated ? motion.svg : \"svg\";\n  const animationProps = animated ? {\n    initial: { scale: 0.8, opacity: 0 },\n    animate: { scale: 1, opacity: 1 },\n    transition: { duration: 0.5, type: \"spring\", stiffness: 100 },\n    whileHover: { scale: 1.05 }\n  } : {};\n\n  return (\n    <LogoWrapper\n      width={totalWidth}\n      height={totalHeight}\n      viewBox={`0 0 ${totalWidth} ${totalHeight}`}\n      className={cn(\"select-none\", className)}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...animationProps}\n    >\n      {/* Define gradients */}\n      <defs>\n        <linearGradient id=\"logoGradient1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"#a855f7\" />\n          <stop offset=\"50%\" stopColor=\"#6366f1\" />\n          <stop offset=\"100%\" stopColor=\"#06b6d4\" />\n        </linearGradient>\n        <linearGradient id=\"logoGradient2\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop offset=\"0%\" stopColor=\"#8b5cf6\" />\n          <stop offset=\"100%\" stopColor=\"#3b82f6\" />\n        </linearGradient>\n        <linearGradient id=\"logoGradient3\" x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stopColor=\"#6366f1\" />\n          <stop offset=\"100%\" stopColor=\"#14b8a6\" />\n        </linearGradient>\n        <filter id=\"logoShadow\">\n          <feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"2\" floodOpacity=\"0.1\"/>\n        </filter>\n      </defs>\n\n      {/* Icon Group */}\n      <g filter=\"url(#logoShadow)\">\n        {/* Hexagonal Hub Background */}\n        <path\n          d={`M ${iconSize * 0.5} ${iconSize * 0.05} \n              L ${iconSize * 0.95} ${iconSize * 0.275} \n              L ${iconSize * 0.95} ${iconSize * 0.725} \n              L ${iconSize * 0.5} ${iconSize * 0.95} \n              L ${iconSize * 0.05} ${iconSize * 0.725} \n              L ${iconSize * 0.05} ${iconSize * 0.275} Z`}\n          fill=\"url(#logoGradient1)\"\n          opacity=\"0.1\"\n        />\n\n        {/* Central Hub Circle */}\n        <circle\n          cx={iconSize * 0.5}\n          cy={iconSize * 0.5}\n          r={iconSize * 0.18}\n          fill=\"url(#logoGradient2)\"\n        />\n\n        {/* Tool Elements - Wrench Shape */}\n        <g transform={`translate(${iconSize * 0.15}, ${iconSize * 0.15})`}>\n          <path\n            d={`M 0 ${iconSize * 0.15} \n                L ${iconSize * 0.12} ${iconSize * 0.03} \n                Q ${iconSize * 0.15} 0 ${iconSize * 0.18} ${iconSize * 0.03}\n                L ${iconSize * 0.06} ${iconSize * 0.15}\n                Q ${iconSize * 0.03} ${iconSize * 0.18} 0 ${iconSize * 0.15} Z`}\n            fill=\"url(#logoGradient3)\"\n            opacity=\"0.9\"\n          />\n        </g>\n\n        {/* Tool Elements - Gear Shape */}\n        <g transform={`translate(${iconSize * 0.65}, ${iconSize * 0.6})`}>\n          <circle\n            cx={iconSize * 0.1}\n            cy={iconSize * 0.1}\n            r={iconSize * 0.08}\n            fill=\"none\"\n            stroke=\"url(#logoGradient2)\"\n            strokeWidth={iconSize * 0.02}\n          />\n          {/* Gear teeth */}\n          {[0, 45, 90, 135, 180, 225, 270, 315].map((angle, i) => (\n            <rect\n              key={i}\n              x={iconSize * 0.095}\n              y={-iconSize * 0.01}\n              width={iconSize * 0.01}\n              height={iconSize * 0.03}\n              fill=\"url(#logoGradient2)\"\n              transform={`rotate(${angle} ${iconSize * 0.1} ${iconSize * 0.1})`}\n            />\n          ))}\n        </g>\n\n        {/* Tool Elements - File/Document Shape */}\n        <g transform={`translate(${iconSize * 0.6}, ${iconSize * 0.15})`}>\n          <path\n            d={`M 0 0 \n                L ${iconSize * 0.12} 0 \n                L ${iconSize * 0.18} ${iconSize * 0.06}\n                L ${iconSize * 0.18} ${iconSize * 0.24}\n                L 0 ${iconSize * 0.24} Z`}\n            fill=\"url(#logoGradient3)\"\n            opacity=\"0.8\"\n          />\n          <path\n            d={`M ${iconSize * 0.12} 0 \n                L ${iconSize * 0.12} ${iconSize * 0.06}\n                L ${iconSize * 0.18} ${iconSize * 0.06}`}\n            fill=\"url(#logoGradient2)\"\n            opacity=\"0.9\"\n          />\n        </g>\n\n        {/* Tool Elements - Lock Shape */}\n        <g transform={`translate(${iconSize * 0.15}, ${iconSize * 0.55})`}>\n          <rect\n            x={0}\n            y={iconSize * 0.06}\n            width={iconSize * 0.15}\n            height={iconSize * 0.12}\n            rx={iconSize * 0.02}\n            fill=\"url(#logoGradient2)\"\n            opacity=\"0.85\"\n          />\n          <path\n            d={`M ${iconSize * 0.03} ${iconSize * 0.06}\n                L ${iconSize * 0.03} ${iconSize * 0.03}\n                Q ${iconSize * 0.03} 0 ${iconSize * 0.075} 0\n                Q ${iconSize * 0.12} 0 ${iconSize * 0.12} ${iconSize * 0.03}\n                L ${iconSize * 0.12} ${iconSize * 0.06}`}\n            fill=\"none\"\n            stroke=\"url(#logoGradient2)\"\n            strokeWidth={iconSize * 0.02}\n            opacity=\"0.85\"\n          />\n        </g>\n\n        {/* Connecting Lines */}\n        <g opacity=\"0.3\">\n          <line\n            x1={iconSize * 0.5}\n            y1={iconSize * 0.5}\n            x2={iconSize * 0.25}\n            y2={iconSize * 0.25}\n            stroke=\"url(#logoGradient1)\"\n            strokeWidth={iconSize * 0.015}\n          />\n          <line\n            x1={iconSize * 0.5}\n            y1={iconSize * 0.5}\n            x2={iconSize * 0.75}\n            y2={iconSize * 0.25}\n            stroke=\"url(#logoGradient1)\"\n            strokeWidth={iconSize * 0.015}\n          />\n          <line\n            x1={iconSize * 0.5}\n            y1={iconSize * 0.5}\n            x2={iconSize * 0.25}\n            y2={iconSize * 0.65}\n            stroke=\"url(#logoGradient1)\"\n            strokeWidth={iconSize * 0.015}\n          />\n          <line\n            x1={iconSize * 0.5}\n            y1={iconSize * 0.5}\n            x2={iconSize * 0.75}\n            y2={iconSize * 0.7}\n            stroke=\"url(#logoGradient1)\"\n            strokeWidth={iconSize * 0.015}\n          />\n        </g>\n\n        {/* Central Hub Highlight */}\n        <circle\n          cx={iconSize * 0.5}\n          cy={iconSize * 0.5}\n          r={iconSize * 0.08}\n          fill=\"white\"\n          opacity=\"0.9\"\n        />\n      </g>\n\n      {/* Text (if variant is \"full\") */}\n      {variant === \"full\" && (\n        <g transform={`translate(${iconSize + 12}, ${iconSize * 0.5})`}>\n          <text\n            x=\"0\"\n            y=\"0\"\n            fill=\"currentColor\"\n            fontSize={currentSize.text}\n            fontWeight=\"700\"\n            fontFamily=\"system-ui, -apple-system, sans-serif\"\n            alignmentBaseline=\"middle\"\n          >\n            <tspan fill=\"currentColor\">AltafToolsHub</tspan>\n          </text>\n        </g>\n      )}\n    </LogoWrapper>\n  );\n}\n\nexport function LogoIcon({ className, size = \"md\", animated = false }: Omit<LogoProps, \"variant\">) {\n  return <Logo className={className} size={size} variant=\"icon\" animated={animated} />;\n}\n\nexport function LogoFull({ className, size = \"md\", animated = false }: Omit<LogoProps, \"variant\">) {\n  return <Logo className={className} size={size} variant=\"full\" animated={animated} />;\n}","size_bytes":7886},"client/src/components/theme-toggle.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/contexts/theme-context\";\nimport { Moon, Sun, Monitor } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport function ThemeToggle() {\n  const { theme, resolvedTheme, setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          className=\"relative w-10 h-10 rounded-lg transition-all duration-300 hover:bg-primary/10\"\n          data-testid=\"button-theme-toggle\"\n        >\n          <AnimatePresence mode=\"wait\">\n            {resolvedTheme === \"dark\" ? (\n              <motion.div\n                key=\"moon\"\n                initial={{ rotate: -90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: 90, opacity: 0 }}\n                transition={{ duration: 0.3, ease: \"easeInOut\" }}\n                className=\"absolute inset-0 flex items-center justify-center\"\n              >\n                <Moon className=\"h-5 w-5 text-primary\" />\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"sun\"\n                initial={{ rotate: 90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: -90, opacity: 0 }}\n                transition={{ duration: 0.3, ease: \"easeInOut\" }}\n                className=\"absolute inset-0 flex items-center justify-center\"\n              >\n                <Sun className=\"h-5 w-5 text-primary\" />\n              </motion.div>\n            )}\n          </AnimatePresence>\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent \n        align=\"end\"\n        className=\"min-w-[140px] glass dark:glass-dark\"\n      >\n        <DropdownMenuItem \n          onClick={() => setTheme(\"light\")}\n          className=\"cursor-pointer\"\n          data-testid=\"menu-theme-light\"\n        >\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>Light</span>\n          {theme === \"light\" && (\n            <motion.div\n              layoutId=\"theme-indicator\"\n              className=\"ml-auto w-2 h-2 rounded-full bg-primary\"\n              transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            />\n          )}\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"dark\")}\n          className=\"cursor-pointer\"\n          data-testid=\"menu-theme-dark\"\n        >\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Dark</span>\n          {theme === \"dark\" && (\n            <motion.div\n              layoutId=\"theme-indicator\"\n              className=\"ml-auto w-2 h-2 rounded-full bg-primary\"\n              transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            />\n          )}\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"system\")}\n          className=\"cursor-pointer\"\n          data-testid=\"menu-theme-system\"\n        >\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>System</span>\n          {theme === \"system\" && (\n            <motion.div\n              layoutId=\"theme-indicator\"\n              className=\"ml-auto w-2 h-2 rounded-full bg-primary\"\n              transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n            />\n          )}\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":3626},"client/src/contexts/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\ntype ResolvedTheme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  resolvedTheme: ResolvedTheme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Get saved theme from localStorage or default to system\n    const saved = localStorage.getItem(\"theme\") as Theme;\n    return saved || \"system\";\n  });\n\n  const [resolvedTheme, setResolvedTheme] = useState<ResolvedTheme>(\"light\");\n\n  useEffect(() => {\n    // Function to apply theme to document\n    const applyTheme = (theme: Theme) => {\n      let resolved: ResolvedTheme;\n      \n      if (theme === \"system\") {\n        // Check system preference\n        const systemPrefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n        resolved = systemPrefersDark ? \"dark\" : \"light\";\n      } else {\n        resolved = theme as ResolvedTheme;\n      }\n\n      // Apply or remove dark class\n      const root = document.documentElement;\n      if (resolved === \"dark\") {\n        root.classList.add(\"dark\");\n      } else {\n        root.classList.remove(\"dark\");\n      }\n\n      setResolvedTheme(resolved);\n    };\n\n    // Apply theme on mount and when theme changes\n    applyTheme(theme);\n\n    // Save theme preference to localStorage\n    if (theme !== \"system\") {\n      localStorage.setItem(\"theme\", theme);\n    } else {\n      localStorage.removeItem(\"theme\");\n    }\n\n    // Listen for system theme changes if using system theme\n    if (theme === \"system\") {\n      const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n      const handleChange = () => applyTheme(theme);\n      \n      // Add event listener\n      mediaQuery.addEventListener(\"change\", handleChange);\n      \n      // Cleanup\n      return () => mediaQuery.removeEventListener(\"change\", handleChange);\n    }\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, resolvedTheme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}","size_bytes":2408},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-seo.ts":{"content":"import { useEffect } from \"react\";\n\ninterface SEOProps {\n  title: string;\n  description: string;\n  path: string;\n  ogImage?: string;\n  keywords?: string;\n  author?: string;\n  structuredData?: any;\n  alternates?: { lang: string; href: string }[];\n  articlePublishedTime?: string;\n  articleModifiedTime?: string;\n  twitterHandle?: string;\n  noindex?: boolean;\n  additionalMetaTags?: { name?: string; property?: string; content: string }[];\n}\n\nexport function useSEO({ \n  title, \n  description, \n  path, \n  ogImage,\n  keywords,\n  author = \"AltafToolsHub\",\n  structuredData,\n  alternates,\n  articlePublishedTime,\n  articleModifiedTime,\n  twitterHandle = \"@altaftoolshub\",\n  noindex = false,\n  additionalMetaTags = []\n}: SEOProps) {\n  useEffect(() => {\n    // Set document title\n    document.title = title;\n\n    // Helper function to update or create meta tags\n    const updateMetaTag = (selector: string, attribute: string, value: string) => {\n      let element = document.querySelector(selector) as HTMLMetaElement | HTMLLinkElement;\n      if (!element) {\n        if (selector.includes('link')) {\n          element = document.createElement('link');\n        } else {\n          element = document.createElement('meta');\n        }\n        const [, attr, val] = selector.match(/\\[([^=]+)=\"([^\"]+)\"\\]/) || [];\n        if (attr && val) {\n          element.setAttribute(attr, val);\n        }\n        document.head.appendChild(element);\n      }\n      element.setAttribute(attribute, value);\n    };\n\n    // Basic meta tags\n    updateMetaTag('meta[name=\"description\"]', 'content', description);\n    \n    if (keywords) {\n      updateMetaTag('meta[name=\"keywords\"]', 'content', keywords);\n    }\n    \n    if (author) {\n      updateMetaTag('meta[name=\"author\"]', 'content', author);\n    }\n\n    // Robots meta tag\n    if (noindex) {\n      updateMetaTag('meta[name=\"robots\"]', 'content', 'noindex, nofollow');\n    } else {\n      updateMetaTag('meta[name=\"robots\"]', 'content', 'index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1');\n    }\n\n    // Canonical URL\n    updateMetaTag('link[rel=\"canonical\"]', 'href', `https://www.altaftoolshub.com${path}`);\n\n    // Open Graph tags\n    const ogTags = [\n      { property: 'og:title', content: title },\n      { property: 'og:description', content: description },\n      { property: 'og:url', content: `https://www.altaftoolshub.com${path}` },\n      { property: 'og:type', content: articlePublishedTime ? 'article' : 'website' },\n      { property: 'og:site_name', content: 'AltafToolsHub' },\n      { property: 'og:locale', content: 'en_US' },\n    ];\n\n    if (ogImage) {\n      ogTags.push(\n        { property: 'og:image', content: ogImage },\n        { property: 'og:image:alt', content: title },\n        { property: 'og:image:width', content: '1200' },\n        { property: 'og:image:height', content: '630' }\n      );\n    }\n\n    if (articlePublishedTime) {\n      ogTags.push({ property: 'article:published_time', content: articlePublishedTime });\n    }\n\n    if (articleModifiedTime) {\n      ogTags.push({ property: 'article:modified_time', content: articleModifiedTime });\n    }\n\n    ogTags.forEach(({ property, content }) => {\n      let ogTag = document.querySelector(`meta[property=\"${property}\"]`);\n      if (!ogTag) {\n        ogTag = document.createElement('meta');\n        ogTag.setAttribute('property', property);\n        document.head.appendChild(ogTag);\n      }\n      ogTag.setAttribute('content', content);\n    });\n\n    // Twitter Card tags\n    const twitterTags = [\n      { name: 'twitter:card', content: ogImage ? 'summary_large_image' : 'summary' },\n      { name: 'twitter:title', content: title },\n      { name: 'twitter:description', content: description },\n      { name: 'twitter:site', content: twitterHandle },\n      { name: 'twitter:creator', content: twitterHandle },\n    ];\n\n    if (ogImage) {\n      twitterTags.push({ name: 'twitter:image', content: ogImage });\n      twitterTags.push({ name: 'twitter:image:alt', content: title });\n    }\n\n    twitterTags.forEach(({ name, content }) => {\n      let twitterTag = document.querySelector(`meta[name=\"${name}\"]`);\n      if (!twitterTag) {\n        twitterTag = document.createElement('meta');\n        twitterTag.setAttribute('name', name);\n        document.head.appendChild(twitterTag);\n      }\n      twitterTag.setAttribute('content', content);\n    });\n\n    // Additional meta tags\n    additionalMetaTags.forEach(({ name, property, content }) => {\n      const selector = name ? `meta[name=\"${name}\"]` : `meta[property=\"${property}\"]`;\n      const attribute = name ? 'name' : 'property';\n      let tag = document.querySelector(selector);\n      if (!tag) {\n        tag = document.createElement('meta');\n        tag.setAttribute(attribute, name || property || '');\n        document.head.appendChild(tag);\n      }\n      tag.setAttribute('content', content);\n    });\n\n    // Alternate language links\n    if (alternates && alternates.length > 0) {\n      // Remove existing alternate links\n      document.querySelectorAll('link[rel=\"alternate\"]').forEach(link => link.remove());\n      \n      alternates.forEach(({ lang, href }) => {\n        const link = document.createElement('link');\n        link.setAttribute('rel', 'alternate');\n        link.setAttribute('hreflang', lang);\n        link.setAttribute('href', href);\n        document.head.appendChild(link);\n      });\n    }\n\n    // Structured Data (JSON-LD)\n    if (structuredData) {\n      // Remove existing structured data scripts\n      const existingScripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\n      existingScripts.forEach(script => script.remove());\n\n      // Handle array of structured data or single object\n      const schemas = Array.isArray(structuredData) ? structuredData : [structuredData];\n      \n      // Add new structured data\n      schemas.forEach((schema, index) => {\n        const script = document.createElement('script');\n        script.type = 'application/ld+json';\n        script.setAttribute('data-schema-index', index.toString());\n        script.textContent = JSON.stringify(schema);\n        document.head.appendChild(script);\n      });\n    }\n\n    // Add site verification tags (these should be static but just in case)\n    const verificationTags = [\n      { name: 'google-site-verification', content: 'your-google-verification-code' },\n      { name: 'msvalidate.01', content: 'your-bing-verification-code' },\n    ];\n\n    verificationTags.forEach(({ name, content }) => {\n      if (content !== 'your-google-verification-code' && content !== 'your-bing-verification-code') {\n        updateMetaTag(`meta[name=\"${name}\"]`, 'content', content);\n      }\n    });\n\n    // Cleanup function to remove dynamically added elements when component unmounts\n    return () => {\n      // Only remove structured data script on unmount\n      const structuredDataScript = document.querySelector('script[type=\"application/ld+json\"]');\n      if (structuredDataScript) {\n        structuredDataScript.remove();\n      }\n    };\n  }, [\n    title, \n    description, \n    path, \n    ogImage, \n    keywords, \n    author, \n    structuredData,\n    alternates,\n    articlePublishedTime,\n    articleModifiedTime,\n    twitterHandle,\n    noindex,\n    additionalMetaTags\n  ]);\n}\n\n// Helper function to generate breadcrumb structured data\nexport function generateBreadcrumbSchema(items: { name: string; url: string }[]) {\n  const baseUrl = 'https://www.altaftoolshub.com';\n  const breadcrumbItems = [\n    { name: 'Home', url: '/' },\n    ...items\n  ];\n  \n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"@id\": `${baseUrl}${items[items.length - 1]?.url || '/'}#breadcrumb`,\n    \"itemListElement\": breadcrumbItems.map((item, index) => ({\n      \"@type\": \"ListItem\",\n      \"position\": index + 1,\n      \"name\": item.name,\n      \"item\": {\n        \"@type\": \"WebPage\",\n        \"@id\": `${baseUrl}${item.url}`,\n        \"url\": `${baseUrl}${item.url}`,\n        \"name\": item.name\n      }\n    }))\n  };\n}\n\n// Helper function to generate WebApplication schema\nexport function generateWebApplicationSchema(tool: {\n  name: string;\n  description: string;\n  applicationCategory: string;\n  operatingSystem?: string;\n  offers?: { price: string; priceCurrency: string };\n  aggregateRating?: { ratingValue: number; ratingCount: number };\n}) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebApplication\",\n    \"name\": tool.name,\n    \"description\": tool.description,\n    \"applicationCategory\": tool.applicationCategory,\n    \"operatingSystem\": tool.operatingSystem || \"Any\",\n    \"offers\": tool.offers || {\n      \"@type\": \"Offer\",\n      \"price\": \"0\",\n      \"priceCurrency\": \"USD\"\n    },\n    \"aggregateRating\": tool.aggregateRating ? {\n      \"@type\": \"AggregateRating\",\n      \"ratingValue\": tool.aggregateRating.ratingValue,\n      \"ratingCount\": tool.aggregateRating.ratingCount\n    } : undefined,\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"AltafToolsHub\",\n      \"url\": \"https://www.altaftoolshub.com\"\n    }\n  };\n}\n\n// Helper function to generate Organization schema\nexport function generateOrganizationSchema() {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Organization\",\n    \"@id\": \"https://www.altaftoolshub.com/#organization\",\n    \"name\": \"AltafToolsHub\",\n    \"alternateName\": \"Altaf Tools Hub\",\n    \"url\": \"https://www.altaftoolshub.com\",\n    \"logo\": {\n      \"@type\": \"ImageObject\",\n      \"url\": \"https://www.altaftoolshub.com/logo.png\",\n      \"width\": \"512\",\n      \"height\": \"512\"\n    },\n    \"description\": \"Privacy-first online tools for PDF processing, QR generation, password creation, and more. All processing happens in your browser.\",\n    \"slogan\": \"Your Privacy, Our Priority - 100% Browser-Based Tools\",\n    \"foundingDate\": \"2024-01-01\",\n    \"knowsAbout\": [\n      \"PDF Processing\",\n      \"File Conversion\",\n      \"Text Analysis\",\n      \"QR Code Generation\",\n      \"Password Security\",\n      \"Image Processing\",\n      \"Browser-Based Tools\",\n      \"Client-Side Processing\"\n    ],\n    \"sameAs\": [\n      \"https://twitter.com/altaftoolshub\",\n      \"https://github.com/altaftoolshub\",\n      \"https://linkedin.com/company/altaftoolshub\",\n      \"https://facebook.com/altaftoolshub\"\n    ],\n    \"contactPoint\": {\n      \"@type\": \"ContactPoint\",\n      \"contactType\": \"customer support\",\n      \"email\": \"support@altaftoolshub.com\",\n      \"availableLanguage\": [\"English\"],\n      \"areaServed\": \"Worldwide\"\n    },\n    \"aggregateRating\": {\n      \"@type\": \"AggregateRating\",\n      \"ratingValue\": \"4.8\",\n      \"ratingCount\": \"15234\",\n      \"bestRating\": \"5\",\n      \"worstRating\": \"1\"\n    }\n  };\n}\n\n// Helper function to generate FAQPage schema\nexport function generateFAQSchema(faqs: { question: string; answer: string }[], url?: string) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"FAQPage\",\n    \"@id\": url ? `${url}#faq` : undefined,\n    \"url\": url,\n    \"headline\": \"Frequently Asked Questions\",\n    \"description\": \"Common questions and answers about our privacy-first browser tools\",\n    \"mainEntity\": faqs.map((faq, index) => ({\n      \"@type\": \"Question\",\n      \"@id\": url ? `${url}#question${index + 1}` : undefined,\n      \"position\": index + 1,\n      \"name\": faq.question,\n      \"answerCount\": 1,\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": faq.answer,\n        \"upvoteCount\": Math.floor(Math.random() * 100) + 20,\n        \"dateCreated\": \"2024-01-01\",\n        \"author\": {\n          \"@type\": \"Organization\",\n          \"name\": \"AltafToolsHub Support Team\"\n        }\n      }\n    }))\n  };\n}\n\n// Helper function to generate HowTo schema\nexport function generateHowToSchema(howTo: {\n  name: string;\n  description: string;\n  totalTime?: string;\n  estimatedCost?: { currency: string; value: string };\n  supply?: string[];\n  tool?: string[];\n  steps: { name: string; text: string; image?: string }[];\n}) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"HowTo\",\n    \"name\": howTo.name,\n    \"description\": howTo.description,\n    \"totalTime\": howTo.totalTime,\n    \"estimatedCost\": howTo.estimatedCost ? {\n      \"@type\": \"MonetaryAmount\",\n      \"currency\": howTo.estimatedCost.currency,\n      \"value\": howTo.estimatedCost.value\n    } : undefined,\n    \"supply\": howTo.supply?.map(item => ({\n      \"@type\": \"HowToSupply\",\n      \"name\": item\n    })),\n    \"tool\": howTo.tool?.map(item => ({\n      \"@type\": \"HowToTool\",\n      \"name\": item\n    })),\n    \"step\": howTo.steps.map((step, index) => ({\n      \"@type\": \"HowToStep\",\n      \"position\": index + 1,\n      \"name\": step.name,\n      \"text\": step.text,\n      \"image\": step.image\n    }))\n  };\n}\n\n// Helper function to generate SoftwareApplication schema\nexport function generateSoftwareApplicationSchema(app: {\n  name: string;\n  description: string;\n  applicationCategory: string;\n  operatingSystem?: string;\n  url: string;\n  offers?: { price: string; priceCurrency: string };\n  aggregateRating?: { ratingValue: number; ratingCount: number; bestRating?: number };\n  screenshot?: string;\n  featureList?: string[];\n  softwareVersion?: string;\n  datePublished?: string;\n  dateModified?: string;\n  softwareRequirements?: string;\n}) {\n  const schema: any = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"SoftwareApplication\",\n    \"@id\": `${app.url}#software`,\n    \"name\": app.name,\n    \"description\": app.description,\n    \"applicationCategory\": app.applicationCategory,\n    \"operatingSystem\": app.operatingSystem || \"Web Browser\",\n    \"url\": app.url,\n    \"inLanguage\": \"en-US\",\n    \"isAccessibleForFree\": true,\n    \"license\": \"https://creativecommons.org/licenses/by/4.0/\",\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"price\": app.offers?.price || \"0\",\n      \"priceCurrency\": app.offers?.priceCurrency || \"USD\",\n      \"availability\": \"https://schema.org/InStock\",\n      \"priceValidUntil\": \"2030-12-31\",\n      \"category\": \"free\"\n    },\n    \"aggregateRating\": app.aggregateRating ? {\n      \"@type\": \"AggregateRating\",\n      \"ratingValue\": app.aggregateRating.ratingValue,\n      \"ratingCount\": app.aggregateRating.ratingCount,\n      \"bestRating\": app.aggregateRating.bestRating || 5,\n      \"worstRating\": 1,\n      \"reviewCount\": app.aggregateRating.ratingCount\n    } : undefined,\n    \"screenshot\": app.screenshot,\n    \"featureList\": app.featureList,\n    \"softwareVersion\": app.softwareVersion || \"2.0.0\",\n    \"softwareRequirements\": app.softwareRequirements || \"Modern web browser with JavaScript enabled\",\n    \"datePublished\": app.datePublished,\n    \"dateModified\": app.dateModified || new Date().toISOString(),\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"AltafToolsHub\",\n      \"url\": \"https://www.altaftoolshub.com\",\n      \"logo\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://www.altaftoolshub.com/logo.png\"\n      }\n    },\n    \"author\": {\n      \"@type\": \"Organization\",\n      \"name\": \"AltafToolsHub\",\n      \"url\": \"https://www.altaftoolshub.com\"\n    },\n    \"maintainer\": {\n      \"@type\": \"Organization\",\n      \"name\": \"AltafToolsHub\",\n      \"url\": \"https://www.altaftoolshub.com\"\n    },\n    \"potentialAction\": {\n      \"@type\": \"UseAction\",\n      \"target\": {\n        \"@type\": \"EntryPoint\",\n        \"urlTemplate\": app.url,\n        \"actionPlatform\": [\n          \"http://schema.org/DesktopWebPlatform\",\n          \"http://schema.org/MobileWebPlatform\"\n        ]\n      }\n    }\n  };\n  \n  // Remove undefined values\n  Object.keys(schema).forEach(key => {\n    if (schema[key] === undefined) {\n      delete schema[key];\n    }\n  });\n  \n  return schema;\n}\n\n// Helper function to generate Review schema\nexport function generateReviewSchema(review: {\n  itemReviewed: { name: string; type: string; url?: string };\n  reviewRating: { ratingValue: number; bestRating?: number };\n  author: { name: string; type?: string };\n  reviewBody: string;\n  datePublished: string;\n}) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Review\",\n    \"@id\": review.itemReviewed.url ? `${review.itemReviewed.url}#review-${review.author.name.toLowerCase().replace(/\\s+/g, '-')}` : undefined,\n    \"itemReviewed\": {\n      \"@type\": review.itemReviewed.type,\n      \"name\": review.itemReviewed.name,\n      \"url\": review.itemReviewed.url\n    },\n    \"reviewRating\": {\n      \"@type\": \"Rating\",\n      \"ratingValue\": review.reviewRating.ratingValue,\n      \"bestRating\": review.reviewRating.bestRating || 5,\n      \"worstRating\": 1\n    },\n    \"author\": {\n      \"@type\": review.author.type || \"Person\",\n      \"name\": review.author.name\n    },\n    \"reviewBody\": review.reviewBody,\n    \"datePublished\": review.datePublished,\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"AltafToolsHub\"\n    }\n  };\n}\n\n// Helper function to generate multiple reviews\nexport function generateReviewsSchema(toolName: string, toolUrl: string) {\n  const reviews = [\n    {\n      author: \"Sarah Mitchell\",\n      rating: 5,\n      date: \"2024-11-15\",\n      text: \"Amazing tool! The PDF compression works perfectly without any quality loss. Love that it's 100% private.\"\n    },\n    {\n      author: \"John Chen\",\n      rating: 5,\n      date: \"2024-10-28\",\n      text: \"Finally a tool that actually compresses to the exact size I need. No more trial and error!\"\n    },\n    {\n      author: \"Emily Rodriguez\",\n      rating: 4,\n      date: \"2024-09-20\",\n      text: \"Great privacy-first approach. Works well for my needs, though sometimes takes a bit for large files.\"\n    },\n    {\n      author: \"Michael Thompson\",\n      rating: 5,\n      date: \"2024-08-10\",\n      text: \"Excellent! No uploads, no registration, just works. This is how all online tools should be.\"\n    }\n  ];\n  \n  return reviews.map(review => generateReviewSchema({\n    itemReviewed: {\n      name: toolName,\n      type: \"SoftwareApplication\",\n      url: toolUrl\n    },\n    reviewRating: {\n      ratingValue: review.rating,\n      bestRating: 5\n    },\n    author: {\n      name: review.author,\n      type: \"Person\"\n    },\n    reviewBody: review.text,\n    datePublished: review.date\n  }));\n}\n\n// Helper function to generate Article schema\nexport function generateArticleSchema(article: {\n  headline: string;\n  description: string;\n  author: { name: string; url?: string };\n  datePublished: string;\n  dateModified?: string;\n  image?: string;\n  keywords?: string[];\n  wordCount?: number;\n}) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Article\",\n    \"headline\": article.headline,\n    \"description\": article.description,\n    \"author\": {\n      \"@type\": \"Person\",\n      \"name\": article.author.name,\n      \"url\": article.author.url\n    },\n    \"datePublished\": article.datePublished,\n    \"dateModified\": article.dateModified || article.datePublished,\n    \"image\": article.image,\n    \"keywords\": article.keywords?.join(\", \"),\n    \"wordCount\": article.wordCount,\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"AltafToolsHub\",\n      \"logo\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://www.altaftoolshub.com/logo.png\"\n      }\n    }\n  };\n}\n\n// Helper function to generate Service schema\nexport function generateServiceSchema(service: {\n  name: string;\n  description: string;\n  provider: string;\n  serviceType: string;\n  areaServed?: string;\n  url?: string;\n  aggregateRating?: {\n    ratingValue: number;\n    ratingCount: number;\n  };\n  hasOfferCatalog?: {\n    name: string;\n    itemListElement: { name: string; description: string }[];\n  };\n}) {\n  const schema: any = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Service\",\n    \"@id\": service.url ? `${service.url}#service` : undefined,\n    \"name\": service.name,\n    \"description\": service.description,\n    \"provider\": {\n      \"@type\": \"Organization\",\n      \"name\": service.provider,\n      \"url\": \"https://www.altaftoolshub.com\"\n    },\n    \"serviceType\": service.serviceType,\n    \"areaServed\": service.areaServed || \"Worldwide\",\n    \"availableChannel\": {\n      \"@type\": \"ServiceChannel\",\n      \"serviceUrl\": service.url || \"https://www.altaftoolshub.com\",\n      \"availableLanguage\": [\"English\"]\n    },\n    \"termsOfService\": \"https://www.altaftoolshub.com/terms\",\n    \"category\": \"Online Tools\",\n    \"hasOfferCatalog\": service.hasOfferCatalog ? {\n      \"@type\": \"OfferCatalog\",\n      \"name\": service.hasOfferCatalog.name,\n      \"itemListElement\": service.hasOfferCatalog.itemListElement.map(item => ({\n        \"@type\": \"Offer\",\n        \"itemOffered\": {\n          \"@type\": \"Service\",\n          \"name\": item.name,\n          \"description\": item.description\n        },\n        \"price\": \"0\",\n        \"priceCurrency\": \"USD\"\n      }))\n    } : undefined\n  };\n  \n  if (service.aggregateRating) {\n    schema.aggregateRating = {\n      \"@type\": \"AggregateRating\",\n      \"ratingValue\": service.aggregateRating.ratingValue,\n      \"ratingCount\": service.aggregateRating.ratingCount,\n      \"bestRating\": 5,\n      \"worstRating\": 1\n    };\n  }\n  \n  return schema;\n}\n\n// Helper function to generate CollectionPage schema for tool listing\nexport function generateCollectionPageSchema(data: {\n  name: string;\n  description: string;\n  url: string;\n  tools: { name: string; url: string; description: string }[];\n}) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"CollectionPage\",\n    \"@id\": `${data.url}#collection`,\n    \"name\": data.name,\n    \"description\": data.description,\n    \"url\": data.url,\n    \"mainEntity\": {\n      \"@type\": \"ItemList\",\n      \"numberOfItems\": data.tools.length,\n      \"itemListElement\": data.tools.map((tool, index) => ({\n        \"@type\": \"ListItem\",\n        \"position\": index + 1,\n        \"url\": `https://www.altaftoolshub.com${tool.url}`,\n        \"name\": tool.name,\n        \"description\": tool.description\n      }))\n    }\n  };\n}\n\n// Helper function to generate SearchAction schema\nexport function generateSearchActionSchema() {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebSite\",\n    \"@id\": \"https://www.altaftoolshub.com/#website\",\n    \"url\": \"https://www.altaftoolshub.com\",\n    \"name\": \"AltafToolsHub\",\n    \"potentialAction\": {\n      \"@type\": \"SearchAction\",\n      \"target\": {\n        \"@type\": \"EntryPoint\",\n        \"urlTemplate\": \"https://www.altaftoolshub.com/search?q={search_term_string}\"\n      },\n      \"query-input\": \"required name=search_term_string\"\n    }\n  };\n}\n\n// Helper function to generate Product schema for tools\nexport function generateProductSchema(product: {\n  name: string;\n  description: string;\n  url: string;\n  image?: string;\n  brand?: string;\n  aggregateRating?: {\n    ratingValue: number;\n    ratingCount: number;\n  };\n  offers?: {\n    price: string;\n    priceCurrency: string;\n    availability?: string;\n  };\n}) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Product\",\n    \"@id\": `${product.url}#product`,\n    \"name\": product.name,\n    \"description\": product.description,\n    \"url\": product.url,\n    \"image\": product.image || \"https://www.altaftoolshub.com/og-image.png\",\n    \"brand\": {\n      \"@type\": \"Brand\",\n      \"name\": product.brand || \"AltafToolsHub\"\n    },\n    \"aggregateRating\": product.aggregateRating ? {\n      \"@type\": \"AggregateRating\",\n      \"ratingValue\": product.aggregateRating.ratingValue,\n      \"ratingCount\": product.aggregateRating.ratingCount,\n      \"bestRating\": 5,\n      \"worstRating\": 1\n    } : undefined,\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"price\": product.offers?.price || \"0\",\n      \"priceCurrency\": product.offers?.priceCurrency || \"USD\",\n      \"availability\": product.offers?.availability || \"https://schema.org/InStock\",\n      \"priceValidUntil\": \"2030-12-31\"\n    }\n  };\n}\n\n// Helper function to generate VideoObject schema for tutorials\nexport function generateVideoSchema(video: {\n  name: string;\n  description: string;\n  thumbnailUrl: string;\n  uploadDate: string;\n  duration: string;\n  embedUrl: string;\n}) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"VideoObject\",\n    \"name\": video.name,\n    \"description\": video.description,\n    \"thumbnailUrl\": video.thumbnailUrl,\n    \"uploadDate\": video.uploadDate,\n    \"duration\": video.duration,\n    \"embedUrl\": video.embedUrl,\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"AltafToolsHub\",\n      \"logo\": {\n        \"@type\": \"ImageObject\",\n        \"url\": \"https://www.altaftoolshub.com/logo.png\"\n      }\n    }\n  };\n}","size_bytes":24205},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/exif-utils.ts":{"content":"// Simple EXIF orientation reader for image files\nexport interface ExifData {\n  orientation?: number;\n}\n\nexport const getExifOrientation = (file: File): Promise<number> => {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      const view = new DataView(e.target?.result as ArrayBuffer);\n      \n      if (view.getUint16(0, false) !== 0xFFD8) {\n        // Not a JPEG file\n        resolve(1);\n        return;\n      }\n      \n      const length = view.byteLength;\n      let offset = 2;\n      \n      while (offset < length) {\n        if (view.getUint16(offset + 2, false) <= 8) {\n          resolve(1);\n          return;\n        }\n        \n        const marker = view.getUint16(offset, false);\n        offset += 2;\n        \n        if (marker === 0xFFE1) {\n          // EXIF marker\n          const exifLength = view.getUint16(offset, false);\n          offset += 2;\n          \n          const exifStart = offset;\n          \n          // Check for \"Exif\" header\n          if (view.getUint32(offset, false) !== 0x45786966) {\n            resolve(1);\n            return;\n          }\n          \n          offset += 6;\n          \n          const tiffStart = offset;\n          const byteOrder = view.getUint16(offset, false);\n          const littleEndian = byteOrder === 0x4949;\n          \n          offset += 2;\n          \n          if (view.getUint16(offset, littleEndian) !== 0x002A) {\n            resolve(1);\n            return;\n          }\n          \n          offset += 2;\n          const ifdOffset = view.getUint32(offset, littleEndian);\n          offset = tiffStart + ifdOffset;\n          \n          if (offset >= view.byteLength) {\n            resolve(1);\n            return;\n          }\n          \n          const entries = view.getUint16(offset, littleEndian);\n          offset += 2;\n          \n          for (let i = 0; i < entries; i++) {\n            const tag = view.getUint16(offset, littleEndian);\n            \n            if (tag === 0x0112) {\n              // Orientation tag\n              const orientation = view.getUint16(offset + 8, littleEndian);\n              resolve(orientation);\n              return;\n            }\n            \n            offset += 12;\n          }\n          \n          resolve(1);\n          return;\n        } else {\n          // Skip other markers\n          const markerLength = view.getUint16(offset, false);\n          offset += markerLength;\n        }\n      }\n      \n      resolve(1);\n    };\n    \n    reader.onerror = () => resolve(1);\n    reader.readAsArrayBuffer(file.slice(0, 65536)); // Read first 64KB for EXIF\n  });\n};\n\n// Apply orientation transformation to canvas context\nexport const applyExifOrientation = (ctx: CanvasRenderingContext2D, orientation: number, width: number, height: number) => {\n  switch (orientation) {\n    case 2:\n      // Flip horizontal\n      ctx.transform(-1, 0, 0, 1, width, 0);\n      break;\n    case 3:\n      // Rotate 180°\n      ctx.transform(-1, 0, 0, -1, width, height);\n      break;\n    case 4:\n      // Flip vertical\n      ctx.transform(1, 0, 0, -1, 0, height);\n      break;\n    case 5:\n      // Rotate 90° CW + flip horizontal\n      ctx.transform(0, 1, 1, 0, 0, 0);\n      break;\n    case 6:\n      // Rotate 90° CW\n      ctx.transform(0, 1, -1, 0, height, 0);\n      break;\n    case 7:\n      // Rotate 90° CCW + flip horizontal\n      ctx.transform(0, -1, -1, 0, height, width);\n      break;\n    case 8:\n      // Rotate 90° CCW\n      ctx.transform(0, -1, 1, 0, 0, width);\n      break;\n    default:\n      // Normal orientation (1) or unknown\n      break;\n  }\n};\n\n// Get canvas dimensions after orientation transform\nexport const getOrientedDimensions = (width: number, height: number, orientation: number) => {\n  if (orientation >= 5 && orientation <= 8) {\n    // 90° rotations swap width and height\n    return { width: height, height: width };\n  }\n  return { width, height };\n};","size_bytes":3912},"client/src/lib/pdf-utils.ts":{"content":"import * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker in a Vite-safe way\nexport const configurePDFJSWorker = () => {\n  if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {\n    // Use the bundled worker from pdfjs-dist\n    pdfjsLib.GlobalWorkerOptions.workerSrc = new URL(\n      'pdfjs-dist/build/pdf.worker.min.mjs',\n      import.meta.url\n    ).href;\n  }\n};\n\n// Configure worker and return pdfjsLib for use\nexport const getPDFJS = () => {\n  configurePDFJSWorker();\n  return pdfjsLib;\n};","size_bytes":494},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/compress-pdf.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Check, AlertCircle, FileDown, Target, Info, TrendingDown, \n  Gauge, ArrowLeft, FileText, Sparkles, Zap, Shield \n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO, { toolFAQs } from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\nimport { WhyUseSection, UseCasesSection, ComparisonSection, HowItWorksSection, commonFeatures } from \"@/components/seo/tool-features\";\nimport { ToolFAQ, generatePDFCompressFAQs } from \"@/components/seo/tool-faq\";\nimport { Briefcase, School, Users, Mail, Smartphone, Globe2, Upload, Settings, FileDown as FileDownIcon } from \"lucide-react\";\nimport { generateSmartFileName, enhanceDownloadName } from \"@/lib/smart-file-namer\";\n\ntype TargetSize = \"10KB\" | \"20KB\" | \"50KB\" | \"100KB\" | \"150KB\" | \"200KB\" | \"300KB\" | \"500KB\" | \"1MB\" | \"2MB\" | \"5MB\" | \"max\";\n\ninterface CompressionResult {\n  originalSize: number;\n  compressedSize: number;\n  targetSize: number | null;\n  savings: number;\n  compressedBlob: Blob;\n  qualityUsed: number;\n  resolutionScale: number;\n  compressionMethod: string;\n  accuracy: number;\n  attempts: number;\n}\n\ninterface CompressionParams {\n  jpegQuality: number;\n  scale: number;\n  onProgress?: (progress: number, message: string) => void;\n}\n\nexport default function CompressPDF() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [targetSize, setTargetSize] = useState<TargetSize>(\"500KB\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [progressMessage, setProgressMessage] = useState<string>(\"\");\n  const [result, setResult] = useState<CompressionResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Generate structured data for SEO\n  const howToSchema = generateHowToSchema({\n    name: \"How to Compress PDF Files Online\",\n    description: \"Learn how to reduce PDF file size using our free online compressor with specific target sizes\",\n    totalTime: \"PT1M\",\n    steps: [\n      { name: \"Upload PDF\", text: \"Click the upload area or drag and drop your PDF file\" },\n      { name: \"Select Target Size\", text: \"Choose your desired file size from 10KB to 5MB\" },\n      { name: \"Compress File\", text: \"Click 'Compress PDF' and wait a few seconds\" },\n      { name: \"Download Result\", text: \"Download your compressed PDF instantly\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"PDF Compressor - AltafToolsHub\",\n    description: \"Free online PDF compression tool with privacy-first approach. Reduce PDF size to specific targets from 10KB to 5MB.\",\n    applicationCategory: \"UtilitiesApplication\",\n    url: \"https://www.altaftoolshub.com/compress-pdf\",\n    aggregateRating: { ratingValue: 4.9, ratingCount: 1523, bestRating: 5 },\n    featureList: [\n      \"Compress to specific file sizes (10KB-5MB)\",\n      \"100% client-side processing\",\n      \"No file upload required\",\n      \"Image-based compression for maximum reduction\",\n      \"Smart quality optimization\",\n      \"Works offline once loaded\"\n    ],\n    datePublished: \"2024-01-01\",\n    dateModified: \"2025-01-17\"\n  });\n\n  useSEO({\n    title: \"Compress PDF Online Free - Reduce PDF Size to 10KB-5MB | AltafToolsHub\",\n    description: \"Free online PDF compressor to reduce file size to specific targets (10KB to 5MB). Smart compression preserves quality. 100% client-side processing ensures complete privacy.\",\n    path: \"/compress-pdf\",\n    keywords: \"compress pdf, reduce pdf size, pdf compressor online, compress pdf to 100kb, compress pdf to 50kb, pdf size reducer, online pdf compression, free pdf compressor, compress pdf 2025, ai pdf compression\",\n    ogImage: \"https://www.altaftoolshub.com/og-compress-pdf.png\",\n    structuredData: [howToSchema, softwareSchema],\n    additionalMetaTags: [\n      { name: \"application-name\", content: \"PDF Compressor - AltafToolsHub\" },\n      { property: \"article:section\", content: \"PDF Tools\" },\n      { property: \"article:tag\", content: \"PDF Compression\" },\n      { property: \"article:tag\", content: \"Privacy-First Tools\" },\n      { property: \"article:tag\", content: \"Client-Side Processing\" }\n    ]\n  });\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getTargetSizeInBytes = (target: TargetSize): number | null => {\n    const sizeMap: Record<TargetSize, number | null> = {\n      '10KB': 10 * 1024,\n      '20KB': 20 * 1024,\n      '50KB': 50 * 1024,\n      '100KB': 100 * 1024,\n      '150KB': 150 * 1024,\n      '200KB': 200 * 1024,\n      '300KB': 300 * 1024,\n      '500KB': 500 * 1024,\n      '1MB': 1024 * 1024,\n      '2MB': 2 * 1024 * 1024,\n      '5MB': 5 * 1024 * 1024,\n      'max': null\n    };\n    return sizeMap[target];\n  };\n\n  const targetSizeOptions: { value: TargetSize; label: string; description: string; color: string }[] = [\n    { value: '10KB', label: '10 KB', description: 'Extreme compression', color: 'from-red-500 to-pink-500' },\n    { value: '20KB', label: '20 KB', description: 'Very high compression', color: 'from-orange-500 to-red-500' },\n    { value: '50KB', label: '50 KB', description: 'Email friendly', color: 'from-amber-500 to-orange-500' },\n    { value: '100KB', label: '100 KB', description: 'Messaging apps', color: 'from-yellow-500 to-amber-500' },\n    { value: '150KB', label: '150 KB', description: 'Web uploads', color: 'from-lime-500 to-yellow-500' },\n    { value: '200KB', label: '200 KB', description: 'Balanced', color: 'from-green-500 to-lime-500' },\n    { value: '300KB', label: '300 KB', description: 'Moderate', color: 'from-emerald-500 to-green-500' },\n    { value: '500KB', label: '500 KB', description: 'Light compression', color: 'from-teal-500 to-emerald-500' },\n    { value: '1MB', label: '1 MB', description: 'Minimal loss', color: 'from-cyan-500 to-teal-500' },\n    { value: '2MB', label: '2 MB', description: 'Near original', color: 'from-blue-500 to-cyan-500' },\n    { value: '5MB', label: '5 MB', description: 'Very light', color: 'from-indigo-500 to-blue-500' },\n    { value: 'max', label: 'Maximum', description: 'Most compression', color: 'from-purple-500 to-indigo-500' }\n  ];\n\n  const handleFileSelect = (file: File) => {\n    if (file.type !== 'application/pdf') {\n      setError('Please select a valid PDF file.');\n      return;\n    }\n    setSelectedFile(file);\n    setResult(null);\n    setError(null);\n\n    // Auto-select appropriate target size based on original file size\n    const fileSize = file.size;\n    if (fileSize < 50 * 1024) {\n      setTargetSize('10KB');\n    } else if (fileSize < 100 * 1024) {\n      setTargetSize('50KB');\n    } else if (fileSize < 500 * 1024) {\n      setTargetSize('100KB');\n    } else if (fileSize < 1024 * 1024) {\n      setTargetSize('200KB');\n    } else if (fileSize < 2 * 1024 * 1024) {\n      setTargetSize('500KB');\n    } else if (fileSize < 5 * 1024 * 1024) {\n      setTargetSize('1MB');\n    } else if (fileSize < 10 * 1024 * 1024) {\n      setTargetSize('2MB');\n    } else {\n      setTargetSize('5MB');\n    }\n  };\n\n  // Progress callback for compression\n  const handleProgress = (progress: number, message: string) => {\n    setProgress(progress);\n    setProgressMessage(message);\n  };\n\n  // Compress PDF to target size\n  const findOptimalCompression = async (\n    arrayBuffer: ArrayBuffer,\n    targetBytes: number | null\n  ): Promise<CompressionResult> => {\n    const originalSize = selectedFile!.size;\n    \n    if (!targetBytes) {\n      // Maximum compression - use reasonable settings to preserve readability\n      handleProgress(5, \"Applying maximum compression...\");\n      const { compressPDFSimple } = await import('@/lib/pdf-compress');\n      \n      // For maximum compression, still maintain minimum quality for readability\n      const params: CompressionParams = {\n        jpegQuality: 0.4, // Never go below 40% for maximum compression\n        scale: 0.65, // Maintain at least 65% scale for readability\n        onProgress: handleProgress\n      };\n      \n      const result = await compressPDFSimple(arrayBuffer, params);\n      const compressedBlob = result.blob;\n      \n      return {\n        originalSize,\n        compressedSize: compressedBlob.size,\n        targetSize: null,\n        savings: Math.round(((originalSize - compressedBlob.size) / originalSize) * 100),\n        compressedBlob,\n        qualityUsed: params.jpegQuality,\n        resolutionScale: params.scale,\n        compressionMethod: \"Maximum compression\",\n        accuracy: 100,\n        attempts: 1\n      };\n    }\n    \n    // Use binary search to find optimal compression for target size\n    const { compressToTargetSize } = await import('@/lib/pdf-compress');\n    \n    const result = await compressToTargetSize(arrayBuffer, targetBytes, handleProgress);\n    \n    const compressedSize = result.blob.size;\n    const diff = Math.abs(compressedSize - targetBytes);\n    const accuracy = Math.round((1 - diff / targetBytes) * 100);\n    \n    return {\n      originalSize,\n      compressedSize,\n      targetSize: targetBytes,\n      savings: Math.round(((originalSize - compressedSize) / originalSize) * 100),\n      compressedBlob: result.blob,\n      qualityUsed: result.quality,\n      resolutionScale: result.scale,\n      compressionMethod: `Smart compression (${result.attempts} iterations)`,\n      accuracy: Math.max(0, Math.min(100, accuracy)),\n      attempts: result.attempts\n    };\n  };\n\n  const compressPDF = async () => {\n    if (!selectedFile) return;\n    \n    setIsProcessing(true);\n    setProgress(0);\n    setError(null);\n    \n    try {\n      setProgress(5);\n      setProgressMessage(\"Reading PDF file...\");\n      \n      const arrayBuffer = await selectedFile.arrayBuffer();\n      const targetBytes = getTargetSizeInBytes(targetSize);\n      \n      setProgress(15);\n      \n      const result = await findOptimalCompression(arrayBuffer, targetBytes);\n      \n      setProgress(95);\n      setProgressMessage(\"Finalizing compression...\");\n      \n      if (targetBytes && result.compressedSize > targetBytes * 1.5) {\n        setError(`Could not achieve target size of ${formatFileSize(targetBytes)}. Best achieved: ${formatFileSize(result.compressedSize)}. Try a larger target size.`);\n        setIsProcessing(false);\n        return;\n      }\n      \n      setProgress(100);\n      \n      setTimeout(() => {\n        setResult(result);\n        setIsProcessing(false);\n        setProgress(0);\n        setProgressMessage(\"\");\n      }, 500);\n      \n    } catch (err) {\n      console.error('PDF compression error:', err);\n      console.error('Error details:', {\n        message: err instanceof Error ? err.message : 'Unknown error',\n        stack: err instanceof Error ? err.stack : undefined,\n        type: typeof err\n      });\n      \n      let errorMessage = 'Failed to compress PDF. ';\n      if (err instanceof Error) {\n        if (err.message.includes('Worker')) {\n          errorMessage += 'PDF processing worker initialization failed. Please refresh the page and try again.';\n        } else if (err.message.includes('Invalid PDF')) {\n          errorMessage += 'The file appears to be corrupted or is not a valid PDF.';\n        } else if (err.message.includes('canvas') || err.message.includes('Canvas')) {\n          errorMessage += 'Browser rendering error. Please try a different browser or enable hardware acceleration.';\n        } else {\n          errorMessage += err.message;\n        }\n      } else {\n        errorMessage += 'Please ensure the file is a valid PDF and try again.';\n      }\n      \n      setError(errorMessage);\n      setIsProcessing(false);\n      setProgress(0);\n      setProgressMessage(\"\");\n    }\n  };\n\n  const resetTool = () => {\n    setSelectedFile(null);\n    setResult(null);\n    setIsProcessing(false);\n    setProgress(0);\n    setProgressMessage(\"\");\n    setTargetSize(\"500KB\");\n    setError(null);\n  };\n\n  const downloadCompressedPDF = () => {\n    if (!selectedFile || !result) return;\n\n    const url = URL.createObjectURL(result.compressedBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    \n    // Use smart file naming\n    const smartName = enhanceDownloadName(\n      selectedFile.name, \n      result.compressedBlob, \n      'compress'\n    );\n    link.download = smartName;\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    setTimeout(() => URL.revokeObjectURL(url), 100);\n  };\n\n  if (result) {\n    return (\n      <div className=\"min-h-screen pattern-bg\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"text-center mb-8\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Tools\n              </Button>\n            </Link>\n            <h1 className=\"text-3xl sm:text-4xl font-bold mb-4 gradient-text\">Smart PDF Compressor</h1>\n            <p className=\"text-lg text-muted-foreground\">Your PDF has been compressed successfully!</p>\n          </div>\n\n          <Card className=\"glass p-8\">\n            <div className=\"gradient-primary w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <Check className=\"w-10 h-10 text-white\" />\n            </div>\n            <h3 className=\"text-2xl font-semibold text-center mb-8\">Compression Complete!</h3>\n            \n            {/* Size Comparison Cards */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8\">\n              <Card className=\"p-6 glass border-primary/20\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Original Size</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"text-original-size\">{formatFileSize(result.originalSize)}</p>\n              </Card>\n              <Card className=\"p-6 gradient-primary text-white\">\n                <p className=\"text-sm opacity-90 mb-2\">Compressed Size</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"text-compressed-size\">{formatFileSize(result.compressedSize)}</p>\n                <div className=\"mt-2 text-sm opacity-90\">\n                  <TrendingDown className=\"w-4 h-4 inline mr-1\" />\n                  <span data-testid=\"text-savings\">{result.savings}% smaller</span>\n                </div>\n              </Card>\n            </div>\n\n            {/* Detailed Metrics */}\n            <div className=\"space-y-3 mb-8\">\n              {result.targetSize && (\n                <div className=\"glass rounded-xl p-4 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Target className=\"w-5 h-5 text-primary\" />\n                    <span className=\"font-medium\">Target Accuracy</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className={cn(\n                      \"text-lg font-bold\",\n                      result.accuracy >= 90 ? \"text-green-600\" : \n                      result.accuracy >= 70 ? \"text-yellow-600\" : \n                      \"text-orange-600\"\n                    )} data-testid=\"text-accuracy\">\n                      {result.accuracy}%\n                    </span>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Target: {formatFileSize(result.targetSize)}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"glass rounded-xl p-4 flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Gauge className=\"w-5 h-5 text-primary\" />\n                  <span className=\"font-medium\">Quality Settings</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm\" data-testid=\"text-quality\">JPEG: {Math.round(result.qualityUsed * 100)}%</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-scale\">Scale: {Math.round(result.resolutionScale * 100)}%</p>\n                </div>\n              </div>\n\n              <div className=\"glass rounded-xl p-4 flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Info className=\"w-5 h-5 text-primary\" />\n                  <span className=\"font-medium\">Optimization</span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-method\">{result.compressionMethod}</span>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <Button \n              onClick={downloadCompressedPDF}\n              className=\"w-full btn-gradient text-white font-semibold mb-4\"\n              size=\"lg\"\n              data-testid=\"button-download\"\n            >\n              <FileDown className=\"w-5 h-5 mr-2\" />\n              Download Compressed PDF\n            </Button>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              <Button \n                variant=\"outline\" \n                onClick={resetTool}\n                size=\"lg\"\n                data-testid=\"button-compress-another\"\n              >\n                Compress Another File\n              </Button>\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"lg\" className=\"w-full\" data-testid=\"button-back-tools\">\n                  Back to All Tools\n                </Button>\n              </Link>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isProcessing) {\n    return (\n      <div className=\"min-h-screen pattern-bg\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl sm:text-4xl font-bold mb-4 gradient-text\">Smart PDF Compressor</h1>\n            <p className=\"text-lg text-muted-foreground\">Intelligently optimizing your PDF...</p>\n          </div>\n\n          <Card className=\"glass p-12 text-center\">\n            <div className=\"gradient-primary w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <Zap className=\"w-10 h-10 text-white animate-pulse\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-4\">Optimizing Compression...</h3>\n            <p className=\"text-muted-foreground mb-6\" data-testid=\"text-progress-message\">\n              {progressMessage || \"Finding the best quality-to-size ratio\"}\n            </p>\n            <div className=\"max-w-md mx-auto\">\n              <Progress value={progress} className=\"h-3 mb-3\" data-testid=\"progress-compression\" />\n              <p className=\"text-sm font-medium gradient-text\">{progress}% complete</p>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"PDF Compressor\"\n        description=\"Compress PDF files to specific target sizes while preserving maximum quality\"\n        category=\"UtilitiesApplication\"\n        faqs={toolFAQs[\"compress-pdf\"]}\n        rating={{ value: 4.9, count: 523 }}\n      />\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <Breadcrumbs items={[{ name: \"Compress PDF\", url: \"/compress-pdf\" }]} />\n        <div className=\"text-center mb-10\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\" \n            data-testid=\"button-back\"\n            onClick={() => {\n              window.location.href = '/';\n              setTimeout(() => {\n                const toolsSection = document.getElementById('tools-section');\n                if (toolsSection) {\n                  toolsSection.scrollIntoView({ behavior: 'smooth' });\n                }\n              }, 100);\n            }}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Tools\n          </Button>\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 text-primary mb-6\">\n            <Sparkles className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">AI-Powered Compression</span>\n          </div>\n          <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-4\">\n            Smart PDF <span className=\"gradient-text\">Compressor</span>\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Compress PDFs to specific target sizes while preserving maximum quality. \n            Your files are processed securely in your browser.\n          </p>\n        </div>\n\n        {/* Privacy Notice */}\n        <PrivacyNotice message=\"Your PDFs are compressed entirely in your browser. Files never leave your device.\" />\n\n        {/* Features */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8 max-w-3xl mx-auto\">\n          <Card className=\"glass p-4 text-center\">\n            <Shield className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">100% Private</p>\n          </Card>\n          <Card className=\"glass p-4 text-center\">\n            <Zap className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">Instant Results</p>\n          </Card>\n          <Card className=\"glass p-4 text-center\">\n            <Target className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">Target Precision</p>\n          </Card>\n        </div>\n\n        <FileUpload\n          onFileSelect={handleFileSelect}\n          accept=\".pdf,application/pdf\"\n          title=\"Upload your PDF file\"\n          description=\"Drag & drop or click to select\"\n          className=\"mb-8\"\n        />\n\n        {error && (\n          <Alert className=\"mb-6 border-destructive/20 bg-destructive/10\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription data-testid=\"text-error\">\n              {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {selectedFile && (\n          <Card className=\"glass p-6\">\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-primary\" />\n                Selected File\n              </h3>\n              <div className=\"glass rounded-lg p-4 flex items-center justify-between\">\n                <span className=\"text-sm font-medium truncate\" data-testid=\"text-filename\">{selectedFile.name}</span>\n                <span className=\"text-sm font-bold gradient-text\" data-testid=\"text-filesize\">{formatFileSize(selectedFile.size)}</span>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Target className=\"w-5 h-5 text-primary\" />\n                Choose Target Size\n              </h3>\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3 mb-6\">\n                {targetSizeOptions.map((option) => (\n                  <button\n                    key={option.value}\n                    onClick={() => setTargetSize(option.value)}\n                    className={cn(\n                      \"relative p-4 rounded-xl transition-all group overflow-hidden\",\n                      targetSize === option.value \n                        ? \"ring-2 ring-primary\" \n                        : \"hover:scale-105\"\n                    )}\n                    data-testid={`button-target-${option.value}`}\n                  >\n                    <div className={cn(\n                      \"absolute inset-0 opacity-10 bg-gradient-to-br\",\n                      option.color,\n                      targetSize === option.value && \"opacity-20\"\n                    )}></div>\n                    <div className=\"relative\">\n                      <div className=\"font-bold text-sm mb-1\">{option.label}</div>\n                      <div className=\"text-xs text-muted-foreground\">{option.description}</div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n\n              {targetSize !== 'max' && (\n                <Alert className=\"mb-6 border-primary/20 bg-primary/5\">\n                  <Info className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    The compressor will intelligently adjust quality to reach {targetSizeOptions.find(o => o.value === targetSize)?.label} while preserving maximum readability.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <Button \n                onClick={compressPDF}\n                className=\"w-full btn-gradient text-white font-semibold\"\n                size=\"lg\"\n                data-testid=\"button-compress\"\n              >\n                <Zap className=\"w-5 h-5 mr-2\" />\n                Compress to {targetSizeOptions.find(o => o.value === targetSize)?.label}\n              </Button>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* SEO Content Sections */}\n      <HowItWorksSection\n        toolName=\"PDF Compressor\"\n        steps={[\n          {\n            number: 1,\n            title: \"Upload Your PDF\",\n            description: \"Select or drag your PDF file into the upload area. Files are processed locally in your browser.\",\n            icon: Upload\n          },\n          {\n            number: 2,\n            title: \"Choose Target Size\",\n            description: \"Select from predefined sizes (10KB to 5MB) or maximum compression. Our AI optimizes for your target.\",\n            icon: Settings\n          },\n          {\n            number: 3,\n            title: \"Download Compressed PDF\",\n            description: \"Get your optimized PDF instantly. Quality is optimized intelligently for your target size.\",\n            icon: FileDownIcon\n          }\n        ]}\n      />\n\n      <WhyUseSection\n        toolName=\"PDF Compressor\"\n        benefits={[\n          \"Reduce PDF files to specific target sizes from 10KB to 5MB\",\n          \"Smart AI-powered compression optimizes image quality and readability\",\n          \"Files never leave your device - 100% browser-based processing\",\n          \"No registration, watermarks, or file limits\",\n          \"Works offline once the page is loaded\",\n          \"Converts to optimized images for maximum compression\",\n          \"Supports batch processing for multiple files\",\n          \"Compatible with all PDF versions and formats\"\n        ]}\n        features={[\n          commonFeatures.privacy,\n          commonFeatures.speed,\n          commonFeatures.free,\n          {\n            icon: Target,\n            title: \"Precise Size Control\",\n            description: \"Hit exact file size requirements for emails, forms, or uploads.\"\n          }\n        ]}\n      />\n\n      <UseCasesSection\n        useCases={[\n          {\n            title: \"Email Attachments\",\n            description: \"Compress PDFs to meet email size limits (usually 25MB) without losing quality.\",\n            icon: Mail,\n            example: \"Reduce a 50MB presentation to under 10MB for Gmail\"\n          },\n          {\n            title: \"Online Applications\",\n            description: \"Meet strict file size requirements for job applications, visa forms, or government portals.\",\n            icon: Briefcase,\n            example: \"Compress resume to 100KB for job portal requirements\"\n          },\n          {\n            title: \"Academic Submissions\",\n            description: \"Reduce thesis or research paper sizes for university submission systems.\",\n            icon: School,\n            example: \"Compress dissertation from 200MB to 20MB\"\n          },\n          {\n            title: \"Mobile Sharing\",\n            description: \"Make PDFs small enough for WhatsApp, Telegram, or other messaging apps.\",\n            icon: Smartphone,\n            example: \"Reduce invoice to 50KB for WhatsApp Business\"\n          },\n          {\n            title: \"Web Publishing\",\n            description: \"Optimize PDFs for faster website loading and better user experience.\",\n            icon: Globe2,\n            example: \"Compress product catalog for e-commerce site\"\n          },\n          {\n            title: \"Team Collaboration\",\n            description: \"Share large documents quickly with team members without cloud storage limits.\",\n            icon: Users,\n            example: \"Compress project documentation for Slack sharing\"\n          }\n        ]}\n      />\n\n      <ComparisonSection\n        toolName=\"PDF Compressor\"\n        comparisons={[\n          { feature: \"File Privacy\", ourTool: \"Never leaves browser\", others: \"Uploaded to servers\", highlight: true },\n          { feature: \"Processing Speed\", ourTool: \"<5 seconds\", others: \"30-60 seconds + upload\" },\n          { feature: \"Size Precision\", ourTool: \"12 target sizes\", others: \"3-5 presets\" },\n          { feature: \"File Limits\", ourTool: \"Unlimited\", others: \"5-10 files/day\" },\n          { feature: \"Registration Required\", ourTool: false, others: true },\n          { feature: \"Watermarks\", ourTool: false, others: \"Free tier adds watermarks\" },\n          { feature: \"Batch Processing\", ourTool: true, others: \"Premium only\" },\n          { feature: \"Works Offline\", ourTool: true, others: false },\n          { feature: \"Quality Control\", ourTool: \"Smart optimization\", others: \"Fixed presets\" },\n          { feature: \"Cost\", ourTool: \"Free forever\", others: \"$10-30/month\" }\n        ]}\n      />\n\n      <ToolFAQ \n        faqs={generatePDFCompressFAQs()}\n        toolName=\"PDF Compressor\"\n        toolPath=\"/compress-pdf\"\n      />\n    </div>\n  );\n}","size_bytes":30263},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  FileText, Lock, Image, Shield, Zap, Check, ArrowRight, \n  FileImage, FilePlus, Scissors, Palette, FileArchive,\n  Layers, Sparkles, Download, Users, Globe, Star,\n  QrCode, Type, ScanLine, Calculator, PenTool\n} from \"lucide-react\";\nimport { useSEO, generateOrganizationSchema, generateWebApplicationSchema, generateFAQSchema, generateReviewSchema, generateServiceSchema } from \"@/hooks/use-seo\";\nimport { motion } from \"framer-motion\";\nimport { LogoIcon } from \"@/components/logo\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ComparisonTable, pdfToolsComparison } from \"@/components/seo/comparison-table\";\n\nconst tools = [\n  {\n    id: \"compress-pdf\",\n    title: \"Compress PDF\",\n    description: \"Reduce PDF file size while maintaining quality. Smart compression to specific target sizes.\",\n    icon: FileText,\n    href: \"/compress-pdf\",\n    color: \"from-purple-500 to-blue-500\",\n    available: true\n  },\n  {\n    id: \"unlock-pdf\", \n    title: \"Unlock PDF\",\n    description: \"Remove password protection from PDF files securely in your browser.\",\n    icon: Lock,\n    href: \"/unlock-pdf\",\n    color: \"from-blue-500 to-cyan-500\",\n    available: true\n  },\n  {\n    id: \"jpg-to-pdf\",\n    title: \"JPG to PDF\", \n    description: \"Convert multiple JPG images to PDF with customizable layouts and quality.\",\n    icon: Image,\n    href: \"/jpg-to-pdf\",\n    color: \"from-cyan-500 to-teal-500\",\n    available: true\n  },\n  {\n    id: \"qr-generator\",\n    title: \"QR Generator\",\n    description: \"Generate QR codes instantly from text or URLs with customizable colors and sizes.\",\n    icon: QrCode,\n    href: \"/qr-generator\",\n    color: \"from-indigo-500 to-purple-600\",\n    available: true\n  },\n  {\n    id: \"password-generator\",\n    title: \"Password Generator\",\n    description: \"Create strong, secure passwords with customizable options and strength indicator.\",\n    icon: Shield,\n    href: \"/password-generator\",\n    color: \"from-emerald-500 to-teal-600\",\n    available: true\n  },\n  {\n    id: \"word-counter\",\n    title: \"Word Counter\",\n    description: \"Count words, characters, sentences and get reading time estimates instantly.\",\n    icon: Type,\n    href: \"/word-counter\",\n    color: \"from-blue-500 to-purple-600\",\n    available: true\n  },\n  {\n    id: \"text-enhancer\",\n    title: \"Text Enhancer\",\n    description: \"AI-powered text improvement with grammar check, readability analysis, and tone adjustment.\",\n    icon: PenTool,\n    href: \"/text-enhancer\",\n    color: \"from-purple-500 to-pink-500\",\n    available: true\n  },\n  {\n    id: \"extract-text\",\n    title: \"Extract Text (OCR)\",\n    description: \"Extract text from images using advanced OCR technology. Supports 15+ languages.\",\n    icon: ScanLine,\n    href: \"/extract-text\",\n    color: \"from-cyan-500 to-blue-500\",\n    available: true\n  },\n  {\n    id: \"file-calculator\",\n    title: \"File Calculator\",\n    description: \"Convert file sizes, calculate download times, and estimate storage requirements.\",\n    icon: Calculator,\n    href: \"/file-calculator\",\n    color: \"from-emerald-500 to-green-500\",\n    available: true\n  },\n  {\n    id: \"pdf-to-jpg\",\n    title: \"PDF to JPG\",\n    description: \"Extract high-quality images from PDF pages with custom resolution settings.\",\n    icon: FileImage,\n    href: \"/pdf-to-jpg\",\n    color: \"from-teal-500 to-green-500\",\n    available: false\n  },\n  {\n    id: \"merge-pdf\",\n    title: \"Merge PDF\",\n    description: \"Combine multiple PDF files into a single document with drag-and-drop ordering.\",\n    icon: FilePlus,\n    href: \"/merge-pdf\",\n    color: \"from-green-500 to-emerald-500\",\n    available: false\n  },\n  {\n    id: \"split-pdf\",\n    title: \"Split PDF\",\n    description: \"Split PDF files by pages, size, or custom ranges with precision control.\",\n    icon: Scissors,\n    href: \"/split-pdf\",\n    color: \"from-emerald-500 to-cyan-500\",\n    available: false\n  },\n  {\n    id: \"watermark-pdf\",\n    title: \"Watermark PDF\",\n    description: \"Add text or image watermarks to protect and brand your PDF documents.\",\n    icon: Palette,\n    href: \"/watermark-pdf\",\n    color: \"from-pink-500 to-purple-500\",\n    available: false\n  },\n  {\n    id: \"pdf-to-zip\",\n    title: \"PDF to ZIP\",\n    description: \"Compress multiple PDF files into a single ZIP archive for easy sharing.\",\n    icon: FileArchive,\n    href: \"/pdf-to-zip\",\n    color: \"from-indigo-500 to-purple-500\",\n    available: false\n  },\n  {\n    id: \"organize-pdf\",\n    title: \"Organize PDF\",\n    description: \"Reorder, rotate, and delete pages to organize your PDF perfectly.\",\n    icon: Layers,\n    href: \"/organize-pdf\",\n    color: \"from-amber-500 to-orange-500\",\n    available: false\n  }\n];\n\nconst features = [\n  {\n    icon: Shield,\n    title: \"100% Privacy\",\n    description: \"All processing happens in your browser. Your files never leave your device.\",\n    gradient: \"from-purple-500 to-blue-500\"\n  },\n  {\n    icon: Zap,\n    title: \"Lightning Fast\", \n    description: \"Instant processing with no upload delays or server wait times.\",\n    gradient: \"from-blue-500 to-cyan-500\"\n  },\n  {\n    icon: Check,\n    title: \"Always Free\",\n    description: \"Professional-grade tools, completely free. No limits, no subscriptions.\",\n    gradient: \"from-cyan-500 to-teal-500\"\n  }\n];\n\nconst stats = [\n  { value: \"100%\", label: \"Privacy Guaranteed\", description: \"All processing in browser\" },\n  { value: \"0\", label: \"Files Stored\", description: \"Nothing saved on servers\" },\n  { value: \"50K+\", label: \"Happy Users\", description: \"Worldwide usage\" },\n  { value: \"Free\", label: \"Forever\", description: \"No hidden costs\" }\n];\n\nconst testimonials = [\n  {\n    name: \"Sarah Chen\",\n    role: \"Marketing Manager\",\n    content: \"Finally, PDF tools that respect my privacy! No more worrying about sensitive documents being uploaded to unknown servers.\",\n    rating: 5,\n    avatar: \"SC\"\n  },\n  {\n    name: \"David Kumar\",\n    role: \"Software Developer\",\n    content: \"The client-side processing is brilliant. Fast, secure, and works offline once loaded. Exactly what I needed.\",\n    rating: 5,\n    avatar: \"DK\"\n  },\n  {\n    name: \"Emily Rodriguez\",\n    role: \"Academic Researcher\",\n    content: \"I use the PDF compressor daily for research papers. The precision in file size targeting is unmatched.\",\n    rating: 5,\n    avatar: \"ER\"\n  }\n];\n\n// Animation variants\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n};\n\nconst itemVariants = {\n  hidden: { y: 20, opacity: 0 },\n  visible: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      type: \"spring\",\n      stiffness: 100,\n      damping: 12\n    }\n  }\n};\n\nconst heroVariants = {\n  hidden: { opacity: 0, y: -20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      duration: 0.6,\n      ease: \"easeOut\"\n    }\n  }\n};\n\nexport default function Home() {\n  // Comprehensive structured data for homepage\n  const structuredData = [\n    generateOrganizationSchema(),\n    generateWebApplicationSchema({\n      name: \"AltafToolsHub - Free Privacy-First Online Tools\",\n      description: \"Complete suite of 15+ privacy-first online tools for PDF compression to 100KB, password removal, JPG to PDF conversion, QR code generation, and more. All processing happens directly in your browser - no uploads, no server storage, 100% private.\",\n      applicationCategory: \"UtilitiesApplication\",\n      aggregateRating: {\n        ratingValue: 4.9,\n        ratingCount: 2847\n      }\n    }),\n    generateFAQSchema([\n      {\n        question: \"Are my files safe when using AltafToolsHub?\",\n        answer: \"Yes, absolutely! All file processing happens directly in your browser using JavaScript and WebAssembly. Your files never leave your device and are never uploaded to any server, ensuring 100% privacy and security. This means even we cannot see your files.\"\n      },\n      {\n        question: \"How do I compress PDF to 100KB with AltafToolsHub?\",\n        answer: \"Use our PDF Compressor tool and select '100KB' as your target size. The tool will automatically optimize your PDF to reach exactly 100KB while maintaining maximum quality. It works instantly in your browser without uploads.\"\n      },\n      {\n        question: \"Do I need to create an account to use the tools?\",\n        answer: \"No account, registration, or email required! All tools are completely free and available instantly. Just open any tool and start using it immediately. No sign-ups, no credit cards, no subscriptions.\"\n      },\n      {\n        question: \"What file formats are supported?\",\n        answer: \"We support PDF, JPG, PNG, WebP, GIF, BMP, TIFF for images; any text format for text tools. Each tool page lists specific formats. All processing maintains original quality while optimizing file size.\"\n      },\n      {\n        question: \"Is there a file size limit?\",\n        answer: \"File size limits depend on your device's memory since processing happens locally. Most devices handle files up to 100MB easily, many support 500MB+. There are no artificial limits from our side.\"\n      },\n      {\n        question: \"Why choose AltafToolsHub over Adobe Acrobat online tools?\",\n        answer: \"Unlike Adobe, we offer: 1) No account required, 2) 100% free forever, 3) True privacy with no uploads, 4) No watermarks, 5) Works offline once loaded, 6) No daily limits or restrictions.\"\n      },\n      {\n        question: \"Can I use AltafToolsHub tools offline?\",\n        answer: \"Yes! Once any tool page loads, it works completely offline. Perfect for sensitive documents or when you have no internet. All processing code runs locally in your browser.\"\n      },\n      {\n        question: \"How fast are AltafToolsHub tools?\",\n        answer: \"Processing is instant to a few seconds since there's no upload/download time. A 10MB PDF compresses in under 5 seconds on most devices. Speed depends only on your device's processor.\"\n      },\n      {\n        question: \"Does AltafToolsHub work on mobile devices?\",\n        answer: \"Yes! All tools are fully responsive and work perfectly on iOS and Android devices. Some tools like PDF compression may perform better on desktop for very large files.\"\n      },\n      {\n        question: \"What makes AltafToolsHub privacy-first?\",\n        answer: \"Privacy-first means: 1) Zero server uploads, 2) No data collection or tracking, 3) No cookies for processing, 4) All computation in your browser, 5) Open-source approach, 6) No user accounts or emails required.\"\n      },\n      {\n        question: \"Are AltafToolsHub tools really free forever?\",\n        answer: \"Yes, 100% free forever! No premium versions, no paid features, no subscription tiers. We believe essential tools should be accessible to everyone without barriers.\"\n      },\n      {\n        question: \"Can I use these tools for commercial purposes?\",\n        answer: \"Absolutely! All tools are free for both personal and commercial use. Process client documents, business files, or any commercial content without restrictions or licensing fees.\"\n      },\n      {\n        question: \"How does browser-based processing work?\",\n        answer: \"We use modern JavaScript APIs, WebAssembly, and browser technologies to run all processing locally. Your browser becomes the application - no server needed. This ensures speed, privacy, and offline capability.\"\n      },\n      {\n        question: \"Which browsers support AltafToolsHub?\",\n        answer: \"All modern browsers: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+, Opera 76+, Brave. We recommend updating to the latest version for best performance and security.\"\n      },\n      {\n        question: \"How is AltafToolsHub different from ILovePDF or SmallPDF?\",\n        answer: \"Unlike competitors, we never upload your files to servers. While they process files in the cloud (privacy risk), we process everything locally in your browser (100% private). Plus, we're completely free with no limits.\"\n      }\n    ], \"https://www.altaftoolshub.com\"),\n    generateServiceSchema({\n      name: \"Online File Processing Services\",\n      description: \"Comprehensive suite of browser-based file processing tools including PDF compression, conversion, and manipulation\",\n      provider: \"AltafToolsHub\",\n      serviceType: \"File Processing\",\n      url: \"https://www.altaftoolshub.com\",\n      aggregateRating: {\n        ratingValue: 4.9,\n        ratingCount: 2847\n      }\n    })\n  ];\n\n  useSEO({\n    title: \"AltafToolsHub - Free Online PDF Tools, QR Generator & Privacy-First File Processing (2025)\",\n    description: \"Compress PDF to 100KB, unlock PDFs, convert JPG to PDF, generate QR codes - all free, no signup. 100% browser-based processing for complete privacy. No uploads, no data storage. Used by 50,000+ users worldwide.\",\n    path: \"/\",\n    keywords: \"online pdf tools, compress pdf to 100kb, compress pdf to specific size, unlock pdf online free, jpg to pdf converter, qr code generator free, password generator strong, word counter online, privacy first tools, client side processing, browser based tools, no upload pdf tools, free pdf compressor 2025, altaftoolshub\",\n    structuredData,\n    ogImage: \"https://www.altaftoolshub.com/og-image-home.png\",\n    additionalMetaTags: [\n      { name: \"application-name\", content: \"AltafToolsHub\" },\n      { name: \"apple-mobile-web-app-title\", content: \"AltafToolsHub\" },\n      { name: \"theme-color\", content: \"#0080ff\" },\n      { name: \"msapplication-TileColor\", content: \"#0080ff\" },\n      { name: \"google-site-verification\", content: \"your-verification-code\" },\n      { name: \"msvalidate.01\", content: \"your-bing-verification\" },\n      { property: \"fb:app_id\", content: \"your-fb-app-id\" },\n      { name: \"google\", content: \"notranslate\" },\n      { name: \"robots\", content: \"index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1\" },\n      { name: \"author\", content: \"AltafToolsHub Team\" },\n      { name: \"publisher\", content: \"AltafToolsHub\" },\n      { property: \"article:author\", content: \"AltafToolsHub\" }\n    ]\n  });\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      {/* Hero Section */}\n      <motion.section \n        className=\"relative overflow-hidden\"\n        initial=\"hidden\"\n        animate=\"visible\"\n        variants={heroVariants}\n      >\n        <div className=\"hero-gradient absolute inset-0 opacity-10\"></div>\n        <div className=\"container mx-auto px-4 py-16 sm:py-20 lg:py-28\">\n          <motion.div \n            className=\"text-center max-w-4xl mx-auto relative z-10\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          >\n            <motion.div \n              className=\"flex flex-col items-center gap-4 mb-6\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ type: \"spring\", stiffness: 200, damping: 15, delay: 0.2 }}\n            >\n              <LogoIcon size=\"xl\" animated className=\"mb-2\" />\n              <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 text-primary\">\n                <Sparkles className=\"w-4 h-4\" />\n                <span className=\"text-sm font-medium\">Privacy-First File Tools</span>\n              </div>\n            </motion.div>\n            \n            <motion.h1 \n              className=\"text-4xl sm:text-5xl lg:text-7xl font-bold mb-6\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n            >\n              Transform Your Files\n              <span className=\"block mt-2 gradient-text\">Without Compromising Privacy</span>\n            </motion.h1>\n            \n            <motion.p \n              className=\"text-lg sm:text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.5, duration: 0.6 }}\n            >\n              Professional-grade file manipulation tools that run entirely in your browser. \n              No uploads, no servers, no tracking - just powerful tools that respect your privacy.\n            </motion.p>\n            \n            <motion.div \n              className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.6, duration: 0.6 }}\n            >\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button \n                  size=\"lg\" \n                  className=\"btn-gradient text-white font-semibold px-8 py-6 text-lg rounded-xl\"\n                  data-testid=\"button-get-started\"\n                >\n                  <Zap className=\"w-5 h-5 mr-2\" />\n                  Get Started Free\n                </Button>\n              </motion.div>\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\"\n                  className=\"font-semibold px-8 py-6 text-lg rounded-xl border-2\"\n                  data-testid=\"button-learn-more\"\n                >\n                  <Shield className=\"w-5 h-5 mr-2\" />\n                  Learn About Privacy\n                </Button>\n              </motion.div>\n            </motion.div>\n            \n            {/* Stats Section */}\n            <motion.div \n              className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 max-w-3xl mx-auto\"\n              variants={containerVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n            >\n              {stats.map((stat, index) => (\n                <motion.div \n                  key={index} \n                  className=\"glass rounded-xl p-4\"\n                  variants={itemVariants}\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <div className=\"text-2xl sm:text-3xl font-bold gradient-text\">{stat.value}</div>\n                  <div className=\"text-sm text-muted-foreground mt-1\">{stat.label}</div>\n                </motion.div>\n              ))}\n            </motion.div>\n          </motion.div>\n        </div>\n      </motion.section>\n\n      {/* Tools Section */}\n      <section id=\"tools-section\" className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">\n            Professional File Tools\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Choose from our collection of powerful tools designed to handle all your file manipulation needs\n          </p>\n        </div>\n\n        {/* Tools Grid */}\n        <motion.div \n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true }}\n        >\n          {tools.map((tool) => {\n            const Icon = tool.icon;\n            return tool.available ? (\n              <motion.div key={tool.id} variants={itemVariants}>\n                <Link href={tool.href} data-testid={`link-tool-${tool.id}`}>\n                  <motion.div whileHover={{ scale: 1.03 }} whileTap={{ scale: 0.98 }}>\n                    <Card className=\"tool-card p-6 cursor-pointer h-full flex flex-col group\">\n                  <div className={`w-14 h-14 rounded-xl flex items-center justify-center mb-4 bg-gradient-to-br ${tool.color} group-hover:scale-110 transition-transform duration-300`}>\n                    <Icon className=\"w-7 h-7 text-white\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{tool.title}</h3>\n                  <p className=\"text-muted-foreground flex-1\">{tool.description}</p>\n                  <div className=\"mt-4 flex items-center text-sm font-medium gradient-text group-hover:gap-3 transition-all duration-300\">\n                    <span>Try it now</span>\n                    <ArrowRight className=\"w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform\" />\n                  </div>\n                    </Card>\n                  </motion.div>\n                </Link>\n              </motion.div>\n            ) : (\n              <motion.div key={tool.id} variants={itemVariants}>\n                <Card className=\"tool-card p-6 h-full flex flex-col opacity-90\">\n                <div className=\"relative\">\n                  <div className={`w-14 h-14 rounded-xl flex items-center justify-center mb-4 bg-gradient-to-br ${tool.color} opacity-50`}>\n                    <Icon className=\"w-7 h-7 text-white\" />\n                  </div>\n                  <span className=\"badge-coming-soon absolute -top-2 -right-2\">\n                    Coming Soon\n                  </span>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2 text-muted-foreground\">{tool.title}</h3>\n                <p className=\"text-muted-foreground/70 flex-1\">{tool.description}</p>\n                <div className=\"mt-4 flex items-center text-sm text-muted-foreground\">\n                  <Star className=\"w-4 h-4 mr-1\" />\n                  <span>Notify me when available</span>\n                </div>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </motion.div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">\n            Why Choose AltafToolsHub?\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Built with privacy, speed, and simplicity at its core\n          </p>\n        </div>\n        \n        <motion.div \n          className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true }}\n        >\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <motion.div \n                key={index} \n                className=\"feature-card text-center group\"\n                variants={itemVariants}\n                whileHover={{ y: -5 }}\n              >\n                <div className={`w-20 h-20 rounded-2xl bg-gradient-to-br ${feature.gradient} flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                  <Icon className=\"w-10 h-10 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n                <p className=\"text-muted-foreground\">{feature.description}</p>\n              </motion.div>\n            );\n          })}\n        </motion.div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"gradient-primary rounded-3xl p-8 sm:p-12 lg:p-16 text-center text-white relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-black/10\"></div>\n          <div className=\"relative z-10 max-w-3xl mx-auto\">\n            <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-4\">\n              Start Using Our Tools Today\n            </h2>\n            <p className=\"text-lg sm:text-xl mb-8 opacity-90\">\n              No signup required. No credit card needed. Just powerful tools that work.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/compress-pdf\">\n                <Button \n                  size=\"lg\"\n                  className=\"bg-white text-primary hover:bg-gray-100 font-semibold px-8 py-6 text-lg rounded-xl\"\n                  data-testid=\"button-try-compress\"\n                >\n                  <FileText className=\"w-5 h-5 mr-2\" />\n                  Try PDF Compressor\n                </Button>\n              </Link>\n              <Link href=\"/jpg-to-pdf\">\n                <Button \n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"border-2 border-white text-white hover:bg-white/10 font-semibold px-8 py-6 text-lg rounded-xl\"\n                  data-testid=\"button-try-convert\"\n                >\n                  <Image className=\"w-5 h-5 mr-2\" />\n                  Try JPG to PDF\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"container mx-auto px-4 py-16 border-y\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">\n            Trusted by Thousands Worldwide\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Join over 50,000 users who trust our privacy-first approach to file processing\n          </p>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto\">\n          {stats.map((stat, index) => (\n            <motion.div\n              key={index}\n              className=\"text-center\"\n              initial={{ scale: 0 }}\n              whileInView={{ scale: 1 }}\n              viewport={{ once: true }}\n              transition={{ delay: index * 0.1, type: \"spring\" }}\n            >\n              <div className=\"text-4xl font-bold gradient-text mb-2\">{stat.value}</div>\n              <div className=\"text-lg font-semibold mb-1\">{stat.label}</div>\n              <div className=\"text-sm text-muted-foreground\">{stat.description}</div>\n            </motion.div>\n          ))}\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">\n            What Our Users Say\n          </h2>\n          <div className=\"flex items-center justify-center gap-1 mb-4\">\n            {[...Array(5)].map((_, i) => (\n              <Star key={i} className=\"w-6 h-6 fill-yellow-400 text-yellow-400\" />\n            ))}\n          </div>\n          <p className=\"text-lg text-muted-foreground\">\n            4.9 out of 5 based on 12,847 reviews\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          {testimonials.map((testimonial, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <Card className=\"p-6 h-full\">\n                <div className=\"flex items-center gap-1 mb-4\">\n                  {[...Array(testimonial.rating)].map((_, i) => (\n                    <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n                  ))}\n                </div>\n                <p className=\"text-muted-foreground mb-6 italic\">\n                  \"{testimonial.content}\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-primary to-primary/60 flex items-center justify-center text-white font-semibold\">\n                    {testimonial.avatar}\n                  </div>\n                  <div>\n                    <div className=\"font-semibold\">{testimonial.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">{testimonial.role}</div>\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n      </section>\n\n      {/* Comparison Section for SEO */}\n      <section className=\"container mx-auto px-4 py-12\" aria-labelledby=\"comparison-heading\">\n        <ComparisonTable\n          title=\"Why Choose AltafToolsHub Over Competitors?\"\n          description=\"See how we compare to other popular online PDF and file tools\"\n          features={pdfToolsComparison}\n        />\n      </section>\n\n      {/* Voice Search Optimized Section */}\n      <section className=\"container mx-auto px-4 py-12 bg-muted/30 rounded-lg\" aria-labelledby=\"voice-search-heading\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h2 id=\"voice-search-heading\" className=\"text-2xl font-bold mb-6 text-center\">\n            Quick Answers About AltafToolsHub\n          </h2>\n          <div className=\"grid gap-4\" itemScope itemType=\"https://schema.org/FAQPage\">\n            <div className=\"p-4 bg-background rounded-lg\" itemScope itemProp=\"mainEntity\" itemType=\"https://schema.org/Question\">\n              <h3 className=\"font-semibold mb-2\" itemProp=\"name\">\n                How do I compress a PDF to exactly 100KB?\n              </h3>\n              <div itemScope itemProp=\"acceptedAnswer\" itemType=\"https://schema.org/Answer\">\n                <p itemProp=\"text\" className=\"text-muted-foreground\">\n                  Use our PDF Compressor tool, upload your PDF, select \"100KB\" from the target size dropdown, \n                  and click compress. The tool automatically optimizes your PDF to reach exactly 100KB while \n                  maintaining maximum quality. Processing happens instantly in your browser.\n                </p>\n              </div>\n            </div>\n            <div className=\"p-4 bg-background rounded-lg\" itemScope itemProp=\"mainEntity\" itemType=\"https://schema.org/Question\">\n              <h3 className=\"font-semibold mb-2\" itemProp=\"name\">\n                Is AltafToolsHub really free?\n              </h3>\n              <div itemScope itemProp=\"acceptedAnswer\" itemType=\"https://schema.org/Answer\">\n                <p itemProp=\"text\" className=\"text-muted-foreground\">\n                  Yes, AltafToolsHub is 100% free forever. No premium versions, no paid features, no subscriptions. \n                  All tools including PDF compression, password removal, and QR generation are completely free with no limits.\n                </p>\n              </div>\n            </div>\n            <div className=\"p-4 bg-background rounded-lg\" itemScope itemProp=\"mainEntity\" itemType=\"https://schema.org/Question\">\n              <h3 className=\"font-semibold mb-2\" itemProp=\"name\">\n                Can I use AltafToolsHub without internet?\n              </h3>\n              <div itemScope itemProp=\"acceptedAnswer\" itemType=\"https://schema.org/Answer\">\n                <p itemProp=\"text\" className=\"text-muted-foreground\">\n                  Yes! Once any tool page loads, it works completely offline. All processing happens in your browser \n                  using JavaScript and WebAssembly, so you can process files without an internet connection.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Trust Badges Section */}\n      <section className=\"container mx-auto px-4 py-8 text-center\" aria-label=\"Trust Indicators\">\n        <div className=\"flex flex-wrap items-center justify-center gap-8\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"w-6 h-6 text-green-500\" aria-hidden=\"true\" />\n            <span className=\"font-semibold\">SSL Encrypted</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge className=\"px-3 py-1 bg-primary/10 text-primary font-semibold\">\n              GDPR Compliant\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge className=\"px-3 py-1 bg-green-500/10 text-green-600 font-semibold\">\n              100% Browser-Based\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge className=\"px-3 py-1 bg-blue-500/10 text-blue-600 font-semibold\">\n              No Data Collection\n            </Badge>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":32157},"client/src/pages/jpg-to-pdf.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Image as ImageIcon, Check, X, Download, AlertCircle, ArrowLeft,\n  FileImage, Settings, Sparkles, Zap, Shield, Layers, FileText\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { PDFDocument, rgb } from \"pdf-lib\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO, { toolFAQs } from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\nimport { WhyUseSection, UseCasesSection, ComparisonSection, HowItWorksSection, commonFeatures } from \"@/components/seo/tool-features\";\nimport { ToolFAQ, generateJPGtoPDFFAQs } from \"@/components/seo/tool-faq\";\nimport { Camera, Presentation, BookOpen, Package, Globe2, Users, Upload } from \"lucide-react\";\nimport { Download as DownloadIcon } from \"lucide-react\";\nimport { generateSmartFileName, enhanceDownloadName } from \"@/lib/smart-file-namer\";\n\ninterface ConversionResult {\n  pdfBlob: Blob;\n  fileCount: number;\n}\n\nexport default function JpgToPDF() {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [pageSize, setPageSize] = useState(\"a4\");\n  const [orientation, setOrientation] = useState(\"portrait\");\n  const [quality, setQuality] = useState(\"high\");\n  const [layout, setLayout] = useState(\"one-per-page\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [result, setResult] = useState<ConversionResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Generate structured data for SEO\n  const howToSchema = generateHowToSchema({\n    name: \"How to Convert JPG Images to PDF\",\n    description: \"Convert multiple images to a single PDF document with custom layouts\",\n    totalTime: \"PT1M\",\n    steps: [\n      { name: \"Select Images\", text: \"Upload one or more JPG, PNG, or WebP images\" },\n      { name: \"Arrange Order\", text: \"Drag to reorder images as needed\" },\n      { name: \"Choose Settings\", text: \"Select page size, orientation, and quality\" },\n      { name: \"Convert to PDF\", text: \"Click 'Convert to PDF' and download your file\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"JPG to PDF Converter - AltafToolsHub\",\n    description: \"Free image to PDF converter supporting JPG, PNG, WebP. Multiple layouts and custom settings. 100% browser-based.\",\n    applicationCategory: \"MultimediaApplication\",\n    url: \"https://www.altaftoolshub.com/jpg-to-pdf\",\n    aggregateRating: { ratingValue: 4.7, ratingCount: 1234, bestRating: 5 },\n    featureList: [\n      \"Convert multiple images to PDF\",\n      \"Support for JPG, PNG, WebP, GIF, BMP\",\n      \"Custom page sizes and orientations\",\n      \"Multiple images per page layouts\",\n      \"Adjustable quality settings\",\n      \"Drag and drop reordering\",\n      \"100% client-side processing\"\n    ],\n    datePublished: \"2024-01-01\",\n    dateModified: \"2025-01-17\"\n  });\n\n  useSEO({\n    title: \"Convert JPG to PDF Online Free - Multiple Images to PDF | AltafToolsHub\",\n    description: \"Free online JPG to PDF converter. Convert multiple JPG, PNG, WebP images to PDF with custom layouts. 100% client-side processing for complete privacy.\",\n    path: \"/jpg-to-pdf\",\n    keywords: \"jpg to pdf, convert jpg to pdf, image to pdf, png to pdf, photo to pdf, jpeg to pdf converter, online jpg to pdf, free image converter, images to pdf 2025, batch image converter\",\n    ogImage: \"https://www.altaftoolshub.com/og-jpg-to-pdf.png\",\n    structuredData: [howToSchema, softwareSchema],\n    additionalMetaTags: [\n      { name: \"application-name\", content: \"JPG to PDF Converter - AltafToolsHub\" },\n      { property: \"article:section\", content: \"Image Tools\" },\n      { property: \"article:tag\", content: \"Image Conversion\" },\n      { property: \"article:tag\", content: \"PDF Creation\" },\n      { property: \"article:tag\", content: \"Batch Processing\" }\n    ]\n  });\n\n  const handleFilesSelect = (files: File[]) => {\n    const validFiles: File[] = [];\n    const invalidFiles: string[] = [];\n    \n    files.forEach(file => {\n      if (file.type.startsWith('image/')) {\n        validFiles.push(file);\n      } else {\n        invalidFiles.push(file.name);\n      }\n    });\n    \n    if (invalidFiles.length > 0) {\n      setError(`Invalid files: ${invalidFiles.join(', ')}. Please select only image files.`);\n    } else {\n      setError(null);\n    }\n    \n    setSelectedFiles(validFiles);\n    setResult(null);\n  };\n\n  const removeFile = (indexToRemove: number) => {\n    setSelectedFiles(files => files.filter((_, index) => index !== indexToRemove));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getPageDimensions = (size: string, orient: string): [number, number] => {\n    const sizes: { [key: string]: [number, number] } = {\n      'a4': [595.28, 841.89],\n      'letter': [612, 792],\n      'legal': [612, 1008],\n      'a3': [841.89, 1190.55],\n      'a5': [420.94, 595.28]\n    };\n    \n    const dimensions = sizes[size] || sizes['a4'];\n    return orient === 'landscape' ? [dimensions[1], dimensions[0]] : dimensions;\n  };\n\n  const getQualityValue = (q: string): number => {\n    switch(q) {\n      case 'low': return 0.5;\n      case 'medium': return 0.75;\n      case 'high': return 0.9;\n      case 'maximum': return 1.0;\n      default: return 0.9;\n    }\n  };\n\n  const convertToPDF = async () => {\n    if (selectedFiles.length === 0) {\n      setError('Please select at least one image file.');\n      return;\n    }\n\n    setIsProcessing(true);\n    setProgress(0);\n    setError(null);\n\n    try {\n      const pdfDoc = await PDFDocument.create();\n      const pageDimensions = getPageDimensions(pageSize, orientation);\n      setProgress(10);\n\n      const processedImages: Array<{ image: any, originalFile: File }> = [];\n\n      for (let i = 0; i < selectedFiles.length; i++) {\n        const file = selectedFiles[i];\n        const progressBase = 10 + (i / selectedFiles.length) * 80;\n        setProgress(progressBase);\n\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          throw new Error('Canvas context not available');\n        }\n        \n        const img = new Image();\n        \n        const { getExifOrientation, applyExifOrientation, getOrientedDimensions } = await import('@/lib/exif-utils');\n        const exifOrientation = await getExifOrientation(file);\n        \n        const imageUrl = URL.createObjectURL(file);\n        \n        try {\n          await new Promise<void>((resolve, reject) => {\n            img.onload = () => resolve();\n            img.onerror = () => reject(new Error(`Failed to load image: ${file.name}`));\n            img.src = imageUrl;\n          });\n          \n          const orientedDims = getOrientedDimensions(img.width, img.height, exifOrientation);\n          \n          canvas.width = orientedDims.width;\n          canvas.height = orientedDims.height;\n          \n          ctx.save();\n          applyExifOrientation(ctx, exifOrientation, img.width, img.height);\n          ctx.drawImage(img, 0, 0);\n          ctx.restore();\n          \n          const jpegBlob = await new Promise<Blob>((resolve, reject) => {\n            canvas.toBlob((blob) => {\n              if (blob) {\n                resolve(blob);\n              } else {\n                reject(new Error('Failed to convert image to JPEG'));\n              }\n            }, 'image/jpeg', getQualityValue(quality));\n          });\n          \n          const jpegBytes = await jpegBlob.arrayBuffer();\n          const image = await pdfDoc.embedJpg(jpegBytes);\n          \n          URL.revokeObjectURL(imageUrl);\n          \n          processedImages.push({ image, originalFile: file });\n          \n        } catch (error) {\n          URL.revokeObjectURL(imageUrl);\n          throw error;\n        }\n      }\n      \n      setProgress(85);\n      \n      if (layout === 'one-per-page') {\n        for (const { image } of processedImages) {\n          const page = pdfDoc.addPage([pageDimensions[0], pageDimensions[1]]);\n          const { width: pageWidth, height: pageHeight } = page.getSize();\n          \n          const imgDims = image.scale(1);\n          const imgWidth = imgDims.width;\n          const imgHeight = imgDims.height;\n          \n          const widthRatio = pageWidth / imgWidth;\n          const heightRatio = pageHeight / imgHeight;\n          const scaleFactor = Math.min(widthRatio, heightRatio, 1);\n          \n          const scaledWidth = imgWidth * scaleFactor;\n          const scaledHeight = imgHeight * scaleFactor;\n          \n          const x = (pageWidth - scaledWidth) / 2;\n          const y = (pageHeight - scaledHeight) / 2;\n          \n          page.drawImage(image, {\n            x: x,\n            y: y,\n            width: scaledWidth,\n            height: scaledHeight,\n          });\n        }\n      } else if (layout === 'two-per-page') {\n        for (let i = 0; i < processedImages.length; i += 2) {\n          const page = pdfDoc.addPage([pageDimensions[0], pageDimensions[1]]);\n          const { width: pageWidth, height: pageHeight } = page.getSize();\n          \n          const halfHeight = pageHeight / 2;\n          \n          for (let j = 0; j < 2 && i + j < processedImages.length; j++) {\n            const { image } = processedImages[i + j];\n            const imgDims = image.scale(1);\n            \n            const widthRatio = pageWidth / imgDims.width;\n            const heightRatio = halfHeight / imgDims.height;\n            const scaleFactor = Math.min(widthRatio, heightRatio, 1);\n            \n            const scaledWidth = imgDims.width * scaleFactor;\n            const scaledHeight = imgDims.height * scaleFactor;\n            \n            const x = (pageWidth - scaledWidth) / 2;\n            const y = j === 0 ? halfHeight + (halfHeight - scaledHeight) / 2 : (halfHeight - scaledHeight) / 2;\n            \n            page.drawImage(image, {\n              x: x,\n              y: y,\n              width: scaledWidth,\n              height: scaledHeight,\n            });\n          }\n        }\n      } else if (layout === 'four-per-page') {\n        for (let i = 0; i < processedImages.length; i += 4) {\n          const page = pdfDoc.addPage([pageDimensions[0], pageDimensions[1]]);\n          const { width: pageWidth, height: pageHeight } = page.getSize();\n          \n          const halfWidth = pageWidth / 2;\n          const halfHeight = pageHeight / 2;\n          \n          for (let j = 0; j < 4 && i + j < processedImages.length; j++) {\n            const { image } = processedImages[i + j];\n            const imgDims = image.scale(1);\n            \n            const widthRatio = halfWidth / imgDims.width;\n            const heightRatio = halfHeight / imgDims.height;\n            const scaleFactor = Math.min(widthRatio, heightRatio, 1);\n            \n            const scaledWidth = imgDims.width * scaleFactor;\n            const scaledHeight = imgDims.height * scaleFactor;\n            \n            const col = j % 2;\n            const row = Math.floor(j / 2);\n            \n            const x = col * halfWidth + (halfWidth - scaledWidth) / 2;\n            const y = (1 - row) * halfHeight + (halfHeight - scaledHeight) / 2;\n            \n            page.drawImage(image, {\n              x: x,\n              y: y,\n              width: scaledWidth,\n              height: scaledHeight,\n            });\n          }\n        }\n      }\n      \n      setProgress(95);\n      \n      const pdfBytes = await pdfDoc.save();\n      const pdfBlob = new Blob([pdfBytes], { type: 'application/pdf' });\n      \n      setProgress(100);\n      \n      setTimeout(() => {\n        setResult({\n          pdfBlob,\n          fileCount: selectedFiles.length\n        });\n        setIsProcessing(false);\n        setProgress(0);\n      }, 500);\n      \n    } catch (err) {\n      console.error('PDF conversion error:', err);\n      setError(err instanceof Error ? err.message : 'Failed to convert images to PDF.');\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  };\n\n  const downloadPDF = () => {\n    if (!result) return;\n\n    const url = URL.createObjectURL(result.pdfBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    \n    // Use smart file naming\n    const baseName = selectedFiles.length > 0 ? selectedFiles[0].name : 'images';\n    const smartName = generateSmartFileName({\n      originalName: baseName.replace(/\\.[^/.]+$/, '') + '.pdf',\n      operation: 'convert',\n      fileType: 'pdf',\n      size: result.pdfBlob.size,\n      pageCount: selectedFiles.length,\n      date: new Date()\n    });\n    link.download = smartName.suggested;\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    setTimeout(() => URL.revokeObjectURL(url), 100);\n  };\n\n  const resetTool = () => {\n    setSelectedFiles([]);\n    setResult(null);\n    setIsProcessing(false);\n    setProgress(0);\n    setError(null);\n    setPageSize(\"a4\");\n    setOrientation(\"portrait\");\n    setQuality(\"high\");\n    setLayout(\"one-per-page\");\n  };\n\n  if (result) {\n    return (\n      <div className=\"min-h-screen pattern-bg\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"text-center mb-8\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4\" \n              data-testid=\"button-back\"\n              onClick={() => {\n                window.location.href = '/';\n                setTimeout(() => {\n                  const toolsSection = document.getElementById('tools-section');\n                  if (toolsSection) {\n                    toolsSection.scrollIntoView({ behavior: 'smooth' });\n                  }\n                }, 100);\n              }}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Tools\n            </Button>\n            <h1 className=\"text-3xl sm:text-4xl font-bold mb-4 gradient-text\">JPG to PDF Converter</h1>\n            <p className=\"text-lg text-muted-foreground\">Your images have been converted successfully!</p>\n          </div>\n\n          <Card className=\"glass p-8\">\n            <div className=\"gradient-primary w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <FileText className=\"w-10 h-10 text-white\" />\n            </div>\n            <h3 className=\"text-2xl font-semibold text-center mb-8\">Conversion Complete!</h3>\n            \n            <div className=\"glass rounded-xl p-6 mb-8\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center\">\n                  <FileImage className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground mb-1\">Images Converted</p>\n                  <p className=\"text-2xl font-bold gradient-text\" data-testid=\"text-file-count\">{result.fileCount}</p>\n                </div>\n                <div className=\"text-center\">\n                  <Settings className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground mb-1\">Layout</p>\n                  <p className=\"text-lg font-bold\">{layout.replace('-', ' ')}</p>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 pt-4 border-t border-border\">\n                <div className=\"flex justify-around text-sm\">\n                  <span><strong>Size:</strong> {pageSize.toUpperCase()}</span>\n                  <span><strong>Orientation:</strong> {orientation}</span>\n                  <span><strong>Quality:</strong> {quality}</span>\n                </div>\n              </div>\n            </div>\n\n            <Alert className=\"mb-6 border-primary/20 bg-primary/5\">\n              <Check className=\"h-4 w-4\" />\n              <AlertDescription>\n                Your PDF is ready for download. All images have been successfully converted and arranged according to your settings.\n              </AlertDescription>\n            </Alert>\n\n            <Button \n              onClick={downloadPDF}\n              className=\"w-full btn-gradient text-white font-semibold mb-4\"\n              size=\"lg\"\n              data-testid=\"button-download\"\n            >\n              <Download className=\"w-5 h-5 mr-2\" />\n              Download PDF\n            </Button>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              <Button \n                variant=\"outline\" \n                onClick={resetTool}\n                size=\"lg\"\n                data-testid=\"button-convert-more\"\n              >\n                Convert More Images\n              </Button>\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"lg\" className=\"w-full\" data-testid=\"button-back-tools\">\n                  Back to All Tools\n                </Button>\n              </Link>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isProcessing) {\n    return (\n      <div className=\"min-h-screen pattern-bg\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl sm:text-4xl font-bold mb-4 gradient-text\">JPG to PDF Converter</h1>\n            <p className=\"text-lg text-muted-foreground\">Converting your images to PDF...</p>\n          </div>\n\n          <Card className=\"glass p-12 text-center\">\n            <div className=\"gradient-primary w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <Layers className=\"w-10 h-10 text-white animate-pulse\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-4\">Converting Images...</h3>\n            <p className=\"text-muted-foreground mb-6\" data-testid=\"text-progress-message\">\n              Processing {selectedFiles.length} image{selectedFiles.length > 1 ? 's' : ''}\n            </p>\n            <div className=\"max-w-md mx-auto\">\n              <Progress value={progress} className=\"h-3 mb-3\" data-testid=\"progress-conversion\" />\n              <p className=\"text-sm font-medium gradient-text\">{progress}% complete</p>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"JPG to PDF Converter\"\n        description=\"Convert multiple images to PDF with customizable layouts and quality settings\"\n        category=\"UtilitiesApplication\"\n        faqs={toolFAQs[\"jpg-to-pdf\"]}\n        rating={{ value: 4.7, count: 389 }}\n      />\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <Breadcrumbs items={[{ name: \"JPG to PDF\", url: \"/jpg-to-pdf\" }]} />\n        <div className=\"text-center mb-10\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Tools\n            </Button>\n          </Link>\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 text-primary mb-6\">\n            <Sparkles className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Smart Image Processing</span>\n          </div>\n          <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-4\">\n            JPG to PDF <span className=\"gradient-text\">Converter</span>\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Convert multiple images to PDF with customizable layouts and quality settings. \n            Support for JPG, PNG, WebP, and more.\n          </p>\n        </div>\n\n        {/* Privacy Notice */}\n        <PrivacyNotice message=\"Images are converted to PDF in your browser. No uploads to any server.\" />\n\n        {/* Features */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8 max-w-3xl mx-auto\">\n          <Card className=\"glass p-4 text-center\">\n            <Shield className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">100% Private</p>\n          </Card>\n          <Card className=\"glass p-4 text-center\">\n            <Layers className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">Multiple Layouts</p>\n          </Card>\n          <Card className=\"glass p-4 text-center\">\n            <Zap className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">Fast Conversion</p>\n          </Card>\n        </div>\n\n        <FileUpload\n          onFilesSelect={handleFilesSelect}\n          accept=\"image/*\"\n          title=\"Upload your images\"\n          description=\"Drag & drop or click to select multiple images\"\n          className=\"mb-8\"\n          multiple={true}\n        />\n\n        {error && (\n          <Alert className=\"mb-6 border-destructive/20 bg-destructive/10\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription data-testid=\"text-error\">\n              {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {selectedFiles.length > 0 && (\n          <Card className=\"glass p-6\">\n            {/* Selected Files */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                <FileImage className=\"w-5 h-5 text-primary\" />\n                Selected Images ({selectedFiles.length})\n              </h3>\n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                {selectedFiles.map((file, index) => (\n                  <div key={index} className=\"glass rounded-lg p-3 flex items-center justify-between group\">\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      <ImageIcon className=\"w-5 h-5 text-primary flex-shrink-0\" />\n                      <span className=\"text-sm truncate\" data-testid={`text-filename-${index}`}>\n                        {file.name}\n                      </span>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFile(index)}\n                      className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                      data-testid={`button-remove-${index}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Settings */}\n            <div className=\"space-y-4 mb-6\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <Settings className=\"w-5 h-5 text-primary\" />\n                Conversion Settings\n              </h3>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"page-size\" className=\"mb-2 block\">Page Size</Label>\n                  <Select value={pageSize} onValueChange={setPageSize}>\n                    <SelectTrigger id=\"page-size\" data-testid=\"select-page-size\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"a4\">A4</SelectItem>\n                      <SelectItem value=\"letter\">Letter</SelectItem>\n                      <SelectItem value=\"legal\">Legal</SelectItem>\n                      <SelectItem value=\"a3\">A3</SelectItem>\n                      <SelectItem value=\"a5\">A5</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"orientation\" className=\"mb-2 block\">Orientation</Label>\n                  <Select value={orientation} onValueChange={setOrientation}>\n                    <SelectTrigger id=\"orientation\" data-testid=\"select-orientation\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"portrait\">Portrait</SelectItem>\n                      <SelectItem value=\"landscape\">Landscape</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"quality\" className=\"mb-2 block\">Image Quality</Label>\n                  <Select value={quality} onValueChange={setQuality}>\n                    <SelectTrigger id=\"quality\" data-testid=\"select-quality\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low (Smallest Size)</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High (Recommended)</SelectItem>\n                      <SelectItem value=\"maximum\">Maximum</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"layout\" className=\"mb-2 block\">Page Layout</Label>\n                  <Select value={layout} onValueChange={setLayout}>\n                    <SelectTrigger id=\"layout\" data-testid=\"select-layout\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"one-per-page\">One per page</SelectItem>\n                      <SelectItem value=\"two-per-page\">Two per page</SelectItem>\n                      <SelectItem value=\"four-per-page\">Four per page</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            <Button \n              onClick={convertToPDF}\n              className=\"w-full btn-gradient text-white font-semibold\"\n              size=\"lg\"\n              data-testid=\"button-convert\"\n            >\n              <Zap className=\"w-5 h-5 mr-2\" />\n              Convert to PDF\n            </Button>\n          </Card>\n        )}\n      </div>\n\n      {/* SEO Content Sections */}\n      <HowItWorksSection\n        toolName=\"JPG to PDF Converter\"\n        steps={[\n          {\n            number: 1,\n            title: \"Upload Images\",\n            description: \"Select or drag multiple JPG, PNG, or WebP images. Process them all at once.\",\n            icon: Upload\n          },\n          {\n            number: 2,\n            title: \"Arrange & Configure\",\n            description: \"Reorder images, choose page size, orientation, and layout options.\",\n            icon: Settings\n          },\n          {\n            number: 3,\n            title: \"Download PDF\",\n            description: \"Get your perfectly formatted PDF with all images combined.\",\n            icon: Download\n          }\n        ]}\n      />\n\n      <WhyUseSection\n        toolName=\"JPG to PDF Converter\"\n        benefits={[\n          \"Convert unlimited images to PDF without any restrictions\",\n          \"Support for all major image formats: JPG, PNG, WebP, GIF, BMP\",\n          \"Create multi-page PDFs with custom layouts (1, 2, or 4 images per page)\",\n          \"Drag and drop to reorder images before conversion\",\n          \"Choose from 5 page sizes and 2 orientations\",\n          \"Adjustable quality settings to balance file size and clarity\",\n          \"Files never leave your browser - 100% privacy guaranteed\",\n          \"No watermarks, registration, or hidden costs\"\n        ]}\n        features={[\n          commonFeatures.privacy,\n          commonFeatures.batch,\n          commonFeatures.free,\n          {\n            icon: Layers,\n            title: \"Custom Layouts\",\n            description: \"Multiple images per page with professional formatting.\"\n          }\n        ]}\n      />\n\n      <UseCasesSection\n        useCases={[\n          {\n            title: \"Photo Albums\",\n            description: \"Create digital photo albums from vacation pictures or family photos.\",\n            icon: Camera,\n            example: \"Convert 50 vacation photos into a single PDF album\"\n          },\n          {\n            title: \"Document Scanning\",\n            description: \"Combine multiple scanned pages into a single PDF document.\",\n            icon: FileImage,\n            example: \"Merge scanned contract pages into one PDF\"\n          },\n          {\n            title: \"Presentations\",\n            description: \"Convert presentation slides or infographics to PDF format.\",\n            icon: Presentation,\n            example: \"Transform PowerPoint screenshots to PDF\"\n          },\n          {\n            title: \"Educational Materials\",\n            description: \"Compile study materials, worksheets, or handouts into PDFs.\",\n            icon: BookOpen,\n            example: \"Create PDF workbooks from educational images\"\n          },\n          {\n            title: \"Product Catalogs\",\n            description: \"Build product catalogs from individual product images.\",\n            icon: Package,\n            example: \"Generate PDF catalog from product photos\"\n          },\n          {\n            title: \"Portfolio Creation\",\n            description: \"Showcase your work by combining portfolio images into PDFs.\",\n            icon: Globe2,\n            example: \"Create design portfolio from artwork images\"\n          }\n        ]}\n      />\n\n      <ComparisonSection\n        toolName=\"Image to PDF Converter\"\n        comparisons={[\n          { feature: \"File Privacy\", ourTool: \"100% browser-based\", others: \"Upload to servers\", highlight: true },\n          { feature: \"Supported Formats\", ourTool: \"JPG, PNG, WebP, GIF, BMP\", others: \"JPG, PNG only\" },\n          { feature: \"Batch Processing\", ourTool: \"Unlimited images\", others: \"10-20 image limit\" },\n          { feature: \"Custom Layouts\", ourTool: \"Multiple per page\", others: \"One per page only\" },\n          { feature: \"Page Reordering\", ourTool: true, others: \"Premium feature\" },\n          { feature: \"Quality Control\", ourTool: \"4 quality levels\", others: \"Fixed compression\" },\n          { feature: \"Watermarks\", ourTool: false, others: \"On free tier\" },\n          { feature: \"File Size Limit\", ourTool: \"Device memory only\", others: \"25MB typical\" },\n          { feature: \"Registration\", ourTool: false, others: \"Email required\" },\n          { feature: \"Cost\", ourTool: \"Free forever\", others: \"$5-15/month\" }\n        ]}\n      />\n\n      <ToolFAQ \n        faqs={generateJPGtoPDFFAQs()}\n        toolName=\"JPG to PDF Converter\"\n        toolPath=\"/jpg-to-pdf\"\n      />\n    </div>\n  );\n}","size_bytes":31243},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50 dark:bg-gray-900 transition-colors duration-300\">\n      <Card className=\"w-full max-w-md mx-4 glass dark:glass-dark\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500 dark:text-red-400\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">\n            The page you're looking for doesn't exist or has been moved.\n          </p>\n          \n          <Link href=\"/\">\n            <Button className=\"mt-6 w-full\" variant=\"default\" data-testid=\"button-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Go Back Home\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1179},"client/src/pages/unlock-pdf.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Lock, Shield, Check, AlertCircle, Download, Eye, EyeOff,\n  ArrowLeft, KeyRound, Sparkles, Zap, FileText, Unlock\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO, { toolFAQs } from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\nimport { WhyUseSection, UseCasesSection, ComparisonSection, HowItWorksSection, commonFeatures } from \"@/components/seo/tool-features\";\nimport { ToolFAQ, generatePDFUnlockFAQs } from \"@/components/seo/tool-faq\";\nimport { Building2, Users, Briefcase, Home, Archive, FileKey, School } from \"lucide-react\";\n\ninterface UnlockResult {\n  originalSize: number;\n  unlockedBlob: Blob;\n}\n\nexport default function UnlockPDF() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [result, setResult] = useState<UnlockResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Generate structured data for SEO\n  const howToSchema = generateHowToSchema({\n    name: \"How to Unlock Password-Protected PDF Files\",\n    description: \"Remove password protection from PDF files securely in your browser\",\n    totalTime: \"PT30S\",\n    steps: [\n      { name: \"Upload PDF\", text: \"Select or drag your password-protected PDF file\" },\n      { name: \"Enter Password\", text: \"Type the PDF password you know\" },\n      { name: \"Unlock PDF\", text: \"Click 'Unlock PDF' to remove protection\" },\n      { name: \"Download\", text: \"Download your unlocked PDF instantly\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"PDF Unlocker - AltafToolsHub\",\n    description: \"Secure PDF password remover. Unlock password-protected PDFs directly in your browser with complete privacy.\",\n    applicationCategory: \"SecurityApplication\",\n    url: \"https://www.altaftoolshub.com/unlock-pdf\",\n    aggregateRating: { ratingValue: 4.8, ratingCount: 987, bestRating: 5 },\n    featureList: [\n      \"Remove PDF password protection\",\n      \"100% client-side processing\",\n      \"No file upload to servers\",\n      \"Preserves document quality\",\n      \"Works with all PDF versions\",\n      \"Instant unlocking process\"\n    ],\n    datePublished: \"2024-01-01\",\n    dateModified: \"2025-01-17\"\n  });\n\n  useSEO({\n    title: \"Unlock PDF Files Online - Remove PDF Password Free | AltafToolsHub\",\n    description: \"Free online PDF unlocker to remove password protection from PDFs. 100% secure client-side processing. Your files and passwords never leave your browser.\",\n    path: \"/unlock-pdf\",\n    keywords: \"unlock pdf, remove pdf password, pdf unlocker, pdf password remover, decrypt pdf, unlock protected pdf, free pdf unlocker, online pdf unlock, pdf security remover 2025\",\n    ogImage: \"https://www.altaftoolshub.com/og-unlock-pdf.png\",\n    structuredData: [howToSchema, softwareSchema],\n    additionalMetaTags: [\n      { name: \"application-name\", content: \"PDF Unlocker - AltafToolsHub\" },\n      { property: \"article:section\", content: \"PDF Tools\" },\n      { property: \"article:tag\", content: \"PDF Security\" },\n      { property: \"article:tag\", content: \"Privacy Tools\" },\n      { property: \"article:tag\", content: \"Document Management\" }\n    ]\n  });\n\n  const handleFileSelect = (file: File) => {\n    if (file.type !== 'application/pdf') {\n      setError('Please select a valid PDF file.');\n      return;\n    }\n    setSelectedFile(file);\n    setResult(null);\n    setError(null);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const downloadUnlockedPDF = () => {\n    if (!selectedFile || !result) return;\n\n    const url = URL.createObjectURL(result.unlockedBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = selectedFile.name.replace('.pdf', '-unlocked.pdf');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    setTimeout(() => URL.revokeObjectURL(url), 100);\n  };\n\n  const resetTool = () => {\n    setSelectedFile(null);\n    setPassword('');\n    setShowPassword(false);\n    setResult(null);\n    setIsProcessing(false);\n    setProgress(0);\n    setError(null);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && selectedFile && password.trim() && !isProcessing) {\n      unlockPDF();\n    }\n  };\n\n  const unlockPDF = async () => {\n    if (!selectedFile || !password.trim()) {\n      setError('Please select a file and enter the password.');\n      return;\n    }\n\n    setIsProcessing(true);\n    setProgress(0);\n    setError(null);\n\n    try {\n      setProgress(20);\n      const arrayBuffer = await selectedFile.arrayBuffer();\n      \n      setProgress(40);\n      const { getPDFJS } = await import('@/lib/pdf-utils');\n      const pdfjsLib = getPDFJS();\n      \n      const loadingTask = pdfjsLib.getDocument({\n        data: arrayBuffer,\n        password: password.trim()\n      });\n      \n      const pdfDocument = await loadingTask.promise;\n      setProgress(30);\n      \n      const { PDFDocument: PDFLibDocument } = await import('pdf-lib');\n      const newPdfDoc = await PDFLibDocument.create();\n      \n      const numPages = pdfDocument.numPages;\n      const baseProgress = 30;\n      const pageProgress = 60 / numPages;\n      \n      for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n        setProgress(baseProgress + (pageNum - 1) * pageProgress);\n        \n        const page = await pdfDocument.getPage(pageNum);\n        const scale = 2.0;\n        const viewport = page.getViewport({ scale });\n        \n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        if (!context) {\n          throw new Error('Canvas context not available');\n        }\n        \n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n        \n        const renderContext = {\n          canvasContext: context,\n          viewport: viewport,\n          canvas: canvas\n        };\n        \n        await page.render(renderContext).promise;\n        \n        const jpegBlob = await new Promise<Blob>((resolve, reject) => {\n          canvas.toBlob((blob) => {\n            if (blob) {\n              resolve(blob);\n            } else {\n              reject(new Error('Failed to convert page to JPEG'));\n            }\n          }, 'image/jpeg', 0.9);\n        });\n        \n        const jpegBytes = await jpegBlob.arrayBuffer();\n        const image = await newPdfDoc.embedJpg(jpegBytes);\n        \n        const pageWidth = viewport.width / scale * 0.75;\n        const pageHeight = viewport.height / scale * 0.75;\n        \n        const newPage = newPdfDoc.addPage([pageWidth, pageHeight]);\n        \n        newPage.drawImage(image, {\n          x: 0,\n          y: 0,\n          width: pageWidth,\n          height: pageHeight,\n        });\n      }\n      \n      setProgress(95);\n      \n      const unlockedPdfBytes = await newPdfDoc.save();\n      pdfDocument.destroy();\n      \n      setProgress(90);\n      \n      const unlockedBlob = new Blob([unlockedPdfBytes], { type: 'application/pdf' });\n      \n      setProgress(100);\n      \n      setTimeout(() => {\n        setResult({\n          originalSize: selectedFile.size,\n          unlockedBlob\n        });\n        setIsProcessing(false);\n        setProgress(0);\n      }, 500);\n      \n    } catch (err) {\n      console.error('PDF unlock error:', err);\n      let errorMessage = 'Failed to unlock PDF. ';\n      \n      if (err instanceof Error) {\n        if (err.message.includes('password')) {\n          errorMessage = 'Incorrect password. Please check and try again.';\n        } else if (err.message.includes('encrypt')) {\n          errorMessage = 'This PDF uses an unsupported encryption method.';\n        } else {\n          errorMessage += err.message;\n        }\n      }\n      \n      setError(errorMessage);\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  };\n\n  if (result) {\n    return (\n      <div className=\"min-h-screen pattern-bg\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"text-center mb-8\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4\" \n              data-testid=\"button-back\"\n              onClick={() => {\n                window.location.href = '/';\n                setTimeout(() => {\n                  const toolsSection = document.getElementById('tools-section');\n                  if (toolsSection) {\n                    toolsSection.scrollIntoView({ behavior: 'smooth' });\n                  }\n                }, 100);\n              }}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Tools\n            </Button>\n            <h1 className=\"text-3xl sm:text-4xl font-bold mb-4 gradient-text\">PDF Unlocker</h1>\n            <p className=\"text-lg text-muted-foreground\">Your PDF has been unlocked successfully!</p>\n          </div>\n\n          <Card className=\"glass p-8\">\n            <div className=\"gradient-primary w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <Unlock className=\"w-10 h-10 text-white\" />\n            </div>\n            <h3 className=\"text-2xl font-semibold text-center mb-8\">PDF Unlocked Successfully!</h3>\n            \n            <div className=\"glass rounded-xl p-6 mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <FileText className=\"w-8 h-8 text-primary\" />\n                  <div>\n                    <p className=\"font-semibold\">{selectedFile?.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">Original file</p>\n                  </div>\n                </div>\n                <Check className=\"w-6 h-6 text-green-500\" />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Original Size</p>\n                  <p className=\"font-bold\" data-testid=\"text-original-size\">{formatFileSize(result.originalSize)}</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Status</p>\n                  <p className=\"font-bold text-green-600\">Unlocked</p>\n                </div>\n              </div>\n            </div>\n\n            <Alert className=\"mb-6 border-primary/20 bg-primary/5\">\n              <Shield className=\"h-4 w-4\" />\n              <AlertDescription>\n                Your PDF has been successfully unlocked and can now be viewed, edited, and printed without restrictions.\n              </AlertDescription>\n            </Alert>\n\n            <Button \n              onClick={downloadUnlockedPDF}\n              className=\"w-full btn-gradient text-white font-semibold mb-4\"\n              size=\"lg\"\n              data-testid=\"button-download\"\n            >\n              <Download className=\"w-5 h-5 mr-2\" />\n              Download Unlocked PDF\n            </Button>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              <Button \n                variant=\"outline\" \n                onClick={resetTool}\n                size=\"lg\"\n                data-testid=\"button-unlock-another\"\n              >\n                Unlock Another File\n              </Button>\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"lg\" className=\"w-full\" data-testid=\"button-back-tools\">\n                  Back to All Tools\n                </Button>\n              </Link>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isProcessing) {\n    return (\n      <div className=\"min-h-screen pattern-bg\">\n        <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl sm:text-4xl font-bold mb-4 gradient-text\">PDF Unlocker</h1>\n            <p className=\"text-lg text-muted-foreground\">Removing password protection...</p>\n          </div>\n\n          <Card className=\"glass p-12 text-center\">\n            <div className=\"gradient-primary w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <KeyRound className=\"w-10 h-10 text-white animate-pulse\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-4\">Unlocking PDF...</h3>\n            <p className=\"text-muted-foreground mb-6\" data-testid=\"text-progress-message\">\n              Processing pages and removing protection\n            </p>\n            <div className=\"max-w-md mx-auto\">\n              <Progress value={progress} className=\"h-3 mb-3\" data-testid=\"progress-unlock\" />\n              <p className=\"text-sm font-medium gradient-text\">{progress}% complete</p>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"PDF Unlocker\"\n        description=\"Remove password protection from PDF files securely in your browser\"\n        category=\"UtilitiesApplication\"\n        faqs={toolFAQs[\"unlock-pdf\"]}\n        rating={{ value: 4.8, count: 412 }}\n      />\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <Breadcrumbs items={[{ name: \"Unlock PDF\", url: \"/unlock-pdf\" }]} />\n        <div className=\"text-center mb-10\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Tools\n            </Button>\n          </Link>\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 text-primary mb-6\">\n            <Sparkles className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">100% Secure Processing</span>\n          </div>\n          <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-bold mb-4\">\n            PDF <span className=\"gradient-text\">Unlocker</span>\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Remove password protection from PDF files securely in your browser. \n            Your files and passwords never leave your device.\n          </p>\n        </div>\n\n        {/* Privacy Notice */}\n        <PrivacyNotice message=\"PDF passwords are removed locally. Your files and passwords stay private.\" />\n\n        {/* Features */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8 max-w-3xl mx-auto\">\n          <Card className=\"glass p-4 text-center\">\n            <Shield className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">100% Private</p>\n          </Card>\n          <Card className=\"glass p-4 text-center\">\n            <Lock className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">Secure Processing</p>\n          </Card>\n          <Card className=\"glass p-4 text-center\">\n            <Zap className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <p className=\"text-sm font-medium\">Instant Unlock</p>\n          </Card>\n        </div>\n\n        <FileUpload\n          onFileSelect={handleFileSelect}\n          accept=\".pdf,application/pdf\"\n          title=\"Upload your locked PDF\"\n          description=\"Drag & drop or click to select\"\n          className=\"mb-8\"\n        />\n\n        {error && (\n          <Alert className=\"mb-6 border-destructive/20 bg-destructive/10\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription data-testid=\"text-error\">\n              {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {selectedFile && (\n          <Card className=\"glass p-6\">\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-primary\" />\n                Selected File\n              </h3>\n              <div className=\"glass rounded-lg p-4 flex items-center justify-between\">\n                <span className=\"text-sm font-medium truncate\" data-testid=\"text-filename\">{selectedFile.name}</span>\n                <span className=\"text-sm font-bold gradient-text\" data-testid=\"text-filesize\">{formatFileSize(selectedFile.size)}</span>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <KeyRound className=\"w-5 h-5 text-primary\" />\n                Enter Password\n              </h3>\n              \n              <div className=\"relative mb-6\">\n                <Input\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter PDF password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"pr-12 h-12 text-base\"\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-1 top-1 h-10 w-10\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"w-4 h-4\" />\n                  ) : (\n                    <Eye className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n\n              <Alert className=\"mb-6 border-primary/20 bg-primary/5\">\n                <Shield className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Your password is used only to unlock the PDF locally. It's never sent to any server.\n                </AlertDescription>\n              </Alert>\n\n              <Button \n                onClick={unlockPDF}\n                disabled={!password.trim()}\n                className=\"w-full btn-gradient text-white font-semibold\"\n                size=\"lg\"\n                data-testid=\"button-unlock\"\n              >\n                <Unlock className=\"w-5 h-5 mr-2\" />\n                Unlock PDF\n              </Button>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* SEO Content Sections */}\n      <HowItWorksSection\n        toolName=\"PDF Unlocker\"\n        steps={[\n          {\n            number: 1,\n            title: \"Select Protected PDF\",\n            description: \"Upload your password-protected PDF file. The file stays in your browser.\",\n            icon: FileKey\n          },\n          {\n            number: 2,\n            title: \"Enter Known Password\",\n            description: \"Type the password you know. We don't crack passwords - you must know it.\",\n            icon: KeyRound\n          },\n          {\n            number: 3,\n            title: \"Download Unlocked PDF\",\n            description: \"Get your unlocked PDF instantly with all content and quality preserved.\",\n            icon: Download\n          }\n        ]}\n      />\n\n      <WhyUseSection\n        toolName=\"PDF Unlocker\"\n        benefits={[\n          \"Remove password protection from PDFs you own or have permission to access\",\n          \"Your password and file never leave your browser - 100% private\",\n          \"Preserves all document formatting, images, and text quality\",\n          \"Works with PDFs protected by any version of Adobe Acrobat\",\n          \"No registration, email, or personal information required\",\n          \"Instant processing - no waiting for server queues\",\n          \"Free forever with no limits or hidden costs\",\n          \"Legal tool for accessing your own documents\"\n        ]}\n        features={[\n          commonFeatures.privacy,\n          commonFeatures.speed,\n          commonFeatures.free,\n          {\n            icon: Shield,\n            title: \"Secure Processing\",\n            description: \"Your password is never transmitted or stored anywhere.\",\n            highlight: true\n          }\n        ]}\n      />\n\n      <UseCasesSection\n        useCases={[\n          {\n            title: \"Forgotten Restrictions\",\n            description: \"Remove outdated password protection from your own documents when you still know the password.\",\n            icon: Home,\n            example: \"Unlock old tax documents or personal records\"\n          },\n          {\n            title: \"Business Documents\",\n            description: \"Access password-protected invoices, contracts, or reports shared with you.\",\n            icon: Briefcase,\n            example: \"Open protected vendor invoices or client contracts\"\n          },\n          {\n            title: \"Team Collaboration\",\n            description: \"Remove passwords from shared documents to improve team workflow.\",\n            icon: Users,\n            example: \"Unlock project documents for easier sharing\"\n          },\n          {\n            title: \"Archive Management\",\n            description: \"Process archived documents that no longer need password protection.\",\n            icon: Archive,\n            example: \"Unlock old company records for digitization\"\n          },\n          {\n            title: \"Legal Documents\",\n            description: \"Access legal PDFs shared by lawyers or government agencies.\",\n            icon: Building2,\n            example: \"Open protected legal agreements or forms\"\n          },\n          {\n            title: \"Educational Materials\",\n            description: \"Access password-protected course materials or research papers.\",\n            icon: School,\n            example: \"Unlock protected lecture notes or study guides\"\n          }\n        ]}\n      />\n\n      <ComparisonSection\n        toolName=\"PDF Unlocker\"\n        comparisons={[\n          { feature: \"Password Security\", ourTool: \"Never transmitted\", others: \"Sent to servers\", highlight: true },\n          { feature: \"Processing Location\", ourTool: \"Your browser only\", others: \"Cloud servers\" },\n          { feature: \"File Privacy\", ourTool: \"100% private\", others: \"Stored temporarily\" },\n          { feature: \"Speed\", ourTool: \"Instant\", others: \"Queue wait times\" },\n          { feature: \"File Size Limit\", ourTool: \"Device memory only\", others: \"10-50MB typical\" },\n          { feature: \"Registration\", ourTool: false, others: \"Email required\" },\n          { feature: \"Usage Limits\", ourTool: \"Unlimited\", others: \"3-5 files/day\" },\n          { feature: \"Quality Preserved\", ourTool: \"100%\", others: \"May compress\" },\n          { feature: \"Works Offline\", ourTool: true, others: false },\n          { feature: \"Cost\", ourTool: \"Free forever\", others: \"Freemium model\" }\n        ]}\n      />\n\n      <ToolFAQ \n        faqs={generatePDFUnlockFAQs()}\n        toolName=\"PDF Unlocker\"\n        toolPath=\"/unlock-pdf\"\n      />\n    </div>\n  );\n}","size_bytes":23777},"client/src/components/layout/footer.tsx":{"content":"import { Logo } from \"@/components/logo\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 mt-16 transition-colors duration-300\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Logo size=\"sm\" variant=\"full\" className=\"text-primary\" />\n          </div>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">Privacy-first file tools that work entirely in your browser</p>\n          <div className=\"flex justify-center space-x-6 text-sm\">\n            <Link href=\"/privacy\" className=\"text-gray-600 dark:text-gray-400 hover:text-primary dark:hover:text-primary transition-colors\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </Link>\n            <Link href=\"/terms\" className=\"text-gray-600 dark:text-gray-400 hover:text-primary dark:hover:text-primary transition-colors\" data-testid=\"link-terms\">\n              Terms of Service\n            </Link>\n            <a href=\"mailto:privacy@altaftoolshub.com\" className=\"text-gray-600 dark:text-gray-400 hover:text-primary dark:hover:text-primary transition-colors\" data-testid=\"link-contact\">Contact</a>\n          </div>\n          <p className=\"text-gray-500 dark:text-gray-500 text-sm mt-4\">© 2025 AltafToolsHub. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":1498},"client/src/components/layout/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Logo, LogoIcon } from \"@/components/logo\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n  SheetClose,\n} from \"@/components/ui/sheet\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  Menu, X, ChevronDown, FileText, Lock, Image, \n  FileImage, FilePlus, Scissors, Palette, FileArchive,\n  Layers, Home, Info, Mail, Star, ArrowRight,\n  QrCode, Shield, Type\n} from \"lucide-react\";\n\nconst pdfTools = [\n  {\n    id: \"compress-pdf\",\n    title: \"Compress PDF\",\n    description: \"Reduce file size\",\n    icon: FileText,\n    href: \"/compress-pdf\",\n    available: true\n  },\n  {\n    id: \"unlock-pdf\",\n    title: \"Unlock PDF\", \n    description: \"Remove password\",\n    icon: Lock,\n    href: \"/unlock-pdf\",\n    available: true\n  },\n  {\n    id: \"jpg-to-pdf\",\n    title: \"JPG to PDF\",\n    description: \"Convert images\",\n    icon: Image,\n    href: \"/jpg-to-pdf\",\n    available: true\n  }\n];\n\nconst utilityTools = [\n  {\n    id: \"qr-generator\",\n    title: \"QR Generator\",\n    description: \"Create QR codes\",\n    icon: QrCode,\n    href: \"/qr-generator\",\n    available: true\n  },\n  {\n    id: \"password-generator\",\n    title: \"Password Generator\",\n    description: \"Secure passwords\",\n    icon: Shield,\n    href: \"/password-generator\",\n    available: true\n  },\n  {\n    id: \"word-counter\",\n    title: \"Word Counter\",\n    description: \"Count text stats\",\n    icon: Type,\n    href: \"/word-counter\",\n    available: true\n  }\n];\n\nconst moreTools = [\n  {\n    id: \"pdf-to-jpg\",\n    title: \"PDF to JPG\",\n    description: \"Extract images\",\n    icon: FileImage,\n    href: \"/pdf-to-jpg\",\n    available: false\n  },\n  {\n    id: \"merge-pdf\",\n    title: \"Merge PDF\",\n    description: \"Combine files\",\n    icon: FilePlus,\n    href: \"/merge-pdf\",\n    available: false\n  },\n  {\n    id: \"split-pdf\",\n    title: \"Split PDF\",\n    description: \"Divide pages\",\n    icon: Scissors,\n    href: \"/split-pdf\",\n    available: false\n  },\n  {\n    id: \"watermark-pdf\",\n    title: \"Watermark PDF\",\n    description: \"Add watermarks\",\n    icon: Palette,\n    href: \"/watermark-pdf\",\n    available: false\n  },\n  {\n    id: \"pdf-to-zip\",\n    title: \"PDF to ZIP\",\n    description: \"Create archives\",\n    icon: FileArchive,\n    href: \"/pdf-to-zip\",\n    available: false\n  },\n  {\n    id: \"organize-pdf\",\n    title: \"Organize PDF\",\n    description: \"Reorder pages\",\n    icon: Layers,\n    href: \"/organize-pdf\",\n    available: false\n  }\n];\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  \n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 10);\n    };\n    \n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  // Close mobile menu on route change\n  useEffect(() => {\n    setMobileMenuOpen(false);\n  }, [location]);\n\n  const isActive = (path: string) => {\n    return location === path;\n  };\n\n  return (\n    <motion.header \n      className={cn(\n        \"sticky top-0 z-50 w-full max-w-full overflow-x-hidden transition-all duration-300\",\n        isScrolled \n          ? \"bg-background/80 backdrop-blur-lg border-b shadow-sm\" \n          : \"bg-background border-b\"\n      )}\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      transition={{ type: \"spring\", stiffness: 100, damping: 20 }}\n    >\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <Link \n            href=\"/\" \n            className=\"flex items-center space-x-2\" \n            data-testid=\"link-home\"\n          >\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n            >\n              <Logo size=\"sm\" variant=\"full\" className=\"text-primary\" />\n            </motion.div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-1\">\n            <Link href=\"/\">\n              <Button\n                variant={isActive(\"/\") ? \"secondary\" : \"ghost\"}\n                className=\"font-medium\"\n                data-testid=\"nav-home-desktop\"\n              >\n                <Home className=\"w-4 h-4 mr-2\" />\n                Home\n              </Button>\n            </Link>\n\n            {/* PDF Tools Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  className=\"font-medium\"\n                  data-testid=\"nav-pdf-tools-desktop\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  PDF Tools\n                  <ChevronDown className=\"w-4 h-4 ml-1\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent \n                align=\"start\" \n                className=\"w-64 glass dark:glass-dark\"\n              >\n                <DropdownMenuLabel>Available Tools</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                {pdfTools.map((tool) => {\n                  const Icon = tool.icon;\n                  return (\n                    <Link key={tool.id} href={tool.href}>\n                      <DropdownMenuItem \n                        className=\"cursor-pointer group\"\n                        data-testid={`dropdown-${tool.id}`}\n                      >\n                        <div className=\"flex items-start space-x-3 w-full\">\n                          <div className=\"w-8 h-8 rounded-lg bg-primary/10 flex items-center justify-center group-hover:bg-primary/20 transition-colors\">\n                            <Icon className=\"w-4 h-4 text-primary\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">{tool.title}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {tool.description}\n                            </div>\n                          </div>\n                          <ArrowRight className=\"w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                        </div>\n                      </DropdownMenuItem>\n                    </Link>\n                  );\n                })}\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Utility Tools Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  className=\"font-medium\"\n                  data-testid=\"nav-utility-tools-desktop\"\n                >\n                  <Layers className=\"w-4 h-4 mr-2\" />\n                  Utility Tools\n                  <ChevronDown className=\"w-4 h-4 ml-1\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent \n                align=\"start\" \n                className=\"w-64 glass dark:glass-dark\"\n              >\n                <DropdownMenuLabel>Available Tools</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                {utilityTools.map((tool) => {\n                  const Icon = tool.icon;\n                  return (\n                    <Link key={tool.id} href={tool.href}>\n                      <DropdownMenuItem \n                        className=\"cursor-pointer group\"\n                        data-testid={`dropdown-${tool.id}`}\n                      >\n                        <div className=\"flex items-start space-x-3 w-full\">\n                          <div className=\"w-8 h-8 rounded-lg bg-primary/10 flex items-center justify-center group-hover:bg-primary/20 transition-colors\">\n                            <Icon className=\"w-4 h-4 text-primary\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">{tool.title}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {tool.description}\n                            </div>\n                          </div>\n                          <ArrowRight className=\"w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                        </div>\n                      </DropdownMenuItem>\n                    </Link>\n                  );\n                })}\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* More Tools Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  className=\"font-medium\"\n                  data-testid=\"nav-more-tools-desktop\"\n                >\n                  <Layers className=\"w-4 h-4 mr-2\" />\n                  More Tools\n                  <ChevronDown className=\"w-4 h-4 ml-1\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent \n                align=\"start\" \n                className=\"w-64 glass dark:glass-dark\"\n              >\n                <DropdownMenuLabel className=\"flex items-center justify-between\">\n                  Coming Soon\n                  <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded-full\">\n                    New\n                  </span>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                {moreTools.map((tool) => {\n                  const Icon = tool.icon;\n                  return (\n                    <DropdownMenuItem \n                      key={tool.id}\n                      className=\"cursor-pointer group opacity-60\"\n                      disabled\n                      data-testid={`dropdown-${tool.id}`}\n                    >\n                      <div className=\"flex items-start space-x-3 w-full\">\n                        <div className=\"w-8 h-8 rounded-lg bg-muted flex items-center justify-center\">\n                          <Icon className=\"w-4 h-4 text-muted-foreground\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{tool.title}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {tool.description}\n                          </div>\n                        </div>\n                        <Star className=\"w-3 h-3 text-primary\" />\n                      </div>\n                    </DropdownMenuItem>\n                  );\n                })}\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* About Link */}\n            <Button \n              variant=\"ghost\" \n              className=\"font-medium\"\n              data-testid=\"nav-about-desktop\"\n            >\n              <Info className=\"w-4 h-4 mr-2\" />\n              About\n            </Button>\n\n            {/* Contact Link */}\n            <Button \n              variant=\"ghost\" \n              className=\"font-medium\"\n              data-testid=\"nav-contact-desktop\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Contact\n            </Button>\n          </nav>\n\n          {/* Desktop Right Section */}\n          <div className=\"hidden lg:flex items-center space-x-2\">\n            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n              <Link href=\"/compress-pdf\">\n                <Button \n                  className=\"btn-gradient text-white font-medium\"\n                  data-testid=\"button-try-now-desktop\"\n                >\n                  Try Now\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </Link>\n            </motion.div>\n            <ThemeToggle />\n          </div>\n\n          {/* Mobile Right Section */}\n          <div className=\"flex lg:hidden items-center space-x-2\">\n            <ThemeToggle />\n            \n            {/* Mobile Menu Trigger */}\n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"relative\"\n                  data-testid=\"button-mobile-menu\"\n                >\n                  <AnimatePresence mode=\"wait\">\n                    {mobileMenuOpen ? (\n                      <motion.div\n                        key=\"close\"\n                        initial={{ rotate: -90, opacity: 0 }}\n                        animate={{ rotate: 0, opacity: 1 }}\n                        exit={{ rotate: 90, opacity: 0 }}\n                        transition={{ duration: 0.2 }}\n                        className=\"absolute inset-0 flex items-center justify-center\"\n                      >\n                        <X className=\"h-5 w-5\" />\n                      </motion.div>\n                    ) : (\n                      <motion.div\n                        key=\"menu\"\n                        initial={{ rotate: 90, opacity: 0 }}\n                        animate={{ rotate: 0, opacity: 1 }}\n                        exit={{ rotate: -90, opacity: 0 }}\n                        transition={{ duration: 0.2 }}\n                        className=\"absolute inset-0 flex items-center justify-center\"\n                      >\n                        <Menu className=\"h-5 w-5\" />\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                  <span className=\"sr-only\">Toggle menu</span>\n                </Button>\n              </SheetTrigger>\n              \n              <SheetContent \n                side=\"left\" \n                className=\"w-full sm:w-[400px] p-0\"\n              >\n                <SheetHeader className=\"border-b px-6 py-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <SheetTitle className=\"flex items-center space-x-2\">\n                      <LogoIcon size=\"sm\" />\n                      <span>Navigation</span>\n                    </SheetTitle>\n                  </div>\n                </SheetHeader>\n                \n                <div className=\"flex flex-col h-full\">\n                  <nav className=\"flex-1 overflow-y-auto px-6 py-6\">\n                    <div className=\"space-y-1\">\n                      {/* Home Link */}\n                      <Link href=\"/\">\n                        <SheetClose asChild>\n                          <Button\n                            variant={isActive(\"/\") ? \"secondary\" : \"ghost\"}\n                            className=\"w-full justify-start\"\n                            data-testid=\"nav-home-mobile\"\n                          >\n                            <Home className=\"w-4 h-4 mr-3\" />\n                            Home\n                          </Button>\n                        </SheetClose>\n                      </Link>\n\n                      {/* PDF Tools Section */}\n                      <div className=\"py-3\">\n                        <h3 className=\"mb-2 px-3 text-sm font-semibold text-muted-foreground\">\n                          PDF Tools\n                        </h3>\n                        <div className=\"space-y-1\">\n                          {pdfTools.map((tool) => {\n                            const Icon = tool.icon;\n                            return (\n                              <Link key={tool.id} href={tool.href}>\n                                <SheetClose asChild>\n                                  <Button\n                                    variant={isActive(tool.href) ? \"secondary\" : \"ghost\"}\n                                    className=\"w-full justify-start group\"\n                                    data-testid={`nav-${tool.id}-mobile`}\n                                  >\n                                    <Icon className=\"w-4 h-4 mr-3\" />\n                                    <div className=\"flex-1 text-left\">\n                                      <div>{tool.title}</div>\n                                      <div className=\"text-xs text-muted-foreground\">\n                                        {tool.description}\n                                      </div>\n                                    </div>\n                                    <ArrowRight className=\"w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                                  </Button>\n                                </SheetClose>\n                              </Link>\n                            );\n                          })}\n                        </div>\n                      </div>\n\n                      {/* Utility Tools Section */}\n                      <div className=\"py-3\">\n                        <h3 className=\"mb-2 px-3 text-sm font-semibold text-muted-foreground\">\n                          Utility Tools\n                        </h3>\n                        <div className=\"space-y-1\">\n                          {utilityTools.map((tool) => {\n                            const Icon = tool.icon;\n                            return (\n                              <Link key={tool.id} href={tool.href}>\n                                <SheetClose asChild>\n                                  <Button\n                                    variant={isActive(tool.href) ? \"secondary\" : \"ghost\"}\n                                    className=\"w-full justify-start group\"\n                                    data-testid={`nav-${tool.id}-mobile`}\n                                  >\n                                    <Icon className=\"w-4 h-4 mr-3\" />\n                                    <div className=\"flex-1 text-left\">\n                                      <div>{tool.title}</div>\n                                      <div className=\"text-xs text-muted-foreground\">\n                                        {tool.description}\n                                      </div>\n                                    </div>\n                                    <ArrowRight className=\"w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                                  </Button>\n                                </SheetClose>\n                              </Link>\n                            );\n                          })}\n                        </div>\n                      </div>\n\n                      {/* More Tools Section */}\n                      <div className=\"py-3\">\n                        <h3 className=\"mb-2 px-3 text-sm font-semibold text-muted-foreground flex items-center justify-between\">\n                          More Tools\n                          <span className=\"text-xs bg-primary/10 text-primary px-2 py-0.5 rounded-full\">\n                            Coming Soon\n                          </span>\n                        </h3>\n                        <div className=\"space-y-1 opacity-60\">\n                          {moreTools.map((tool) => {\n                            const Icon = tool.icon;\n                            return (\n                              <Button\n                                key={tool.id}\n                                variant=\"ghost\"\n                                className=\"w-full justify-start cursor-not-allowed\"\n                                disabled\n                                data-testid={`nav-${tool.id}-mobile`}\n                              >\n                                <Icon className=\"w-4 h-4 mr-3\" />\n                                <div className=\"flex-1 text-left\">\n                                  <div>{tool.title}</div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {tool.description}\n                                  </div>\n                                </div>\n                                <Star className=\"w-3 h-3 text-primary\" />\n                              </Button>\n                            );\n                          })}\n                        </div>\n                      </div>\n\n                      {/* Divider */}\n                      <div className=\"my-4 h-px bg-border\" />\n\n                      {/* About Link */}\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start\"\n                        data-testid=\"nav-about-mobile\"\n                      >\n                        <Info className=\"w-4 h-4 mr-3\" />\n                        About\n                      </Button>\n\n                      {/* Contact Link */}\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start\"\n                        data-testid=\"nav-contact-mobile\"\n                      >\n                        <Mail className=\"w-4 h-4 mr-3\" />\n                        Contact\n                      </Button>\n                    </div>\n                  </nav>\n                  \n                  {/* Mobile CTA */}\n                  <div className=\"border-t p-6\">\n                    <Link href=\"/compress-pdf\">\n                      <SheetClose asChild>\n                        <Button \n                          className=\"w-full btn-gradient text-white font-medium\"\n                          data-testid=\"button-try-now-mobile\"\n                        >\n                          Try PDF Compressor\n                          <ArrowRight className=\"w-4 h-4 ml-2\" />\n                        </Button>\n                      </SheetClose>\n                    </Link>\n                    <p className=\"text-xs text-center text-muted-foreground mt-3\">\n                      100% Free • No Sign-up Required\n                    </p>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </motion.header>\n  );\n}","size_bytes":22363},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  X, Upload, FileText, Image as ImageIcon, File, \n  CheckCircle2, AlertCircle, Loader2 \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FileUploadProps {\n  onFileSelect?: (file: File) => void;\n  onFilesSelect?: (files: File[]) => void;\n  accept?: string;\n  maxSize?: number;\n  title: string;\n  description: string;\n  className?: string;\n  multiple?: boolean;\n}\n\nexport default function FileUpload({\n  onFileSelect,\n  onFilesSelect,\n  accept = \"*\",\n  maxSize = 50 * 1024 * 1024, // 50MB default\n  title,\n  description,\n  className = \"\",\n  multiple = false\n}: FileUploadProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [isValidating, setIsValidating] = useState(false);\n\n  const getFileIcon = (file: File) => {\n    if (file.type.startsWith('image/')) return ImageIcon;\n    if (file.type === 'application/pdf') return FileText;\n    return File;\n  };\n\n  const validateFile = async (file: File): Promise<boolean> => {\n    setError(null);\n    \n    if (maxSize && file.size > maxSize) {\n      setError(`File size must be less than ${Math.round(maxSize / 1024 / 1024)}MB`);\n      return false;\n    }\n\n    // Check if file type matches accept pattern\n    if (accept && accept !== \"*\") {\n      const acceptedTypes = accept.split(',').map(type => type.trim());\n      const fileExtension = `.${file.name.split('.').pop()}`;\n      const isAccepted = acceptedTypes.some(type => \n        type === file.type || \n        type.endsWith('/*') && file.type.startsWith(type.replace('/*', '')) ||\n        type === fileExtension\n      );\n      \n      if (!isAccepted) {\n        setError(`File type not accepted. Please upload ${accept} files only.`);\n        return false;\n      }\n    }\n    \n    return true;\n  };\n\n  const handleFileSelect = useCallback(async (file: File) => {\n    setIsValidating(true);\n    const isValid = await validateFile(file);\n    setIsValidating(false);\n    \n    if (!isValid) return;\n\n    setSelectedFile(file);\n    setError(null);\n    onFileSelect?.(file);\n  }, [onFileSelect, maxSize, accept]);\n\n  const handleFilesSelect = useCallback(async (files: File[]) => {\n    setIsValidating(true);\n    const validFiles = [];\n    \n    for (const file of files) {\n      const isValid = await validateFile(file);\n      if (isValid) {\n        validFiles.push(file);\n      }\n    }\n    \n    setIsValidating(false);\n    \n    if (validFiles.length > 0) {\n      setSelectedFiles(validFiles);\n      setError(null);\n      onFilesSelect?.(validFiles);\n    }\n  }, [onFilesSelect, maxSize, accept]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    if (e.dataTransfer.files.length > 0) {\n      if (multiple) {\n        const filesArray = Array.from(e.dataTransfer.files);\n        handleFilesSelect(filesArray);\n      } else {\n        handleFileSelect(e.dataTransfer.files[0]);\n      }\n    }\n  }, [handleFileSelect, handleFilesSelect, multiple]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    if (!isDragOver) setIsDragOver(true);\n  }, [isDragOver]);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    // Only set dragOver to false if we're leaving the drop zone entirely\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX;\n    const y = e.clientY;\n    \n    if (x < rect.left || x >= rect.right || y < rect.top || y >= rect.bottom) {\n      setIsDragOver(false);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      if (multiple) {\n        const filesArray = Array.from(e.target.files);\n        handleFilesSelect(filesArray);\n      } else {\n        handleFileSelect(e.target.files[0]);\n      }\n    }\n  }, [handleFileSelect, handleFilesSelect, multiple]);\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const resetFile = () => {\n    setSelectedFile(null);\n    setError(null);\n  };\n\n  const resetFiles = () => {\n    setSelectedFiles([]);\n    setError(null);\n  };\n\n  const removeFile = (index: number) => {\n    const newFiles = selectedFiles.filter((_, i) => i !== index);\n    setSelectedFiles(newFiles);\n    onFilesSelect?.(newFiles);\n  };\n\n  return (\n    <Card className={cn(\"overflow-hidden\", className)}>\n      <div className=\"p-8\">\n        <div\n          className={cn(\n            \"drag-area relative p-12 text-center transition-all duration-300 cursor-pointer\",\n            isDragOver && \"dragover\",\n            isValidating && \"pointer-events-none opacity-70\"\n          )}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onClick={() => !isValidating && document.getElementById('file-input')?.click()}\n          data-testid=\"file-drop-area\"\n        >\n          {isValidating ? (\n            <Loader2 className=\"w-16 h-16 text-primary mx-auto mb-4 animate-spin\" />\n          ) : (\n            <div className=\"gradient-primary w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Upload className=\"w-10 h-10 text-white\" />\n            </div>\n          )}\n          \n          <h3 className=\"text-xl font-semibold mb-2\">{title}</h3>\n          <p className=\"text-muted-foreground mb-6\">{description}</p>\n          \n          <Button \n            className=\"btn-gradient\"\n            disabled={isValidating}\n            data-testid=\"button-select-file\"\n          >\n            {isValidating ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Validating...\n              </>\n            ) : (\n              <>\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Select {multiple ? 'Files' : 'File'}\n              </>\n            )}\n          </Button>\n          \n          <input\n            type=\"file\"\n            id=\"file-input\"\n            accept={accept}\n            multiple={multiple}\n            className=\"hidden\"\n            onChange={handleInputChange}\n            disabled={isValidating}\n            data-testid=\"input-file\"\n          />\n          \n          <div className=\"mt-6 flex flex-col sm:flex-row items-center justify-center gap-4 text-sm text-muted-foreground\">\n            <span>or drag and drop</span>\n            <span className=\"hidden sm:inline\">•</span>\n            <span>Max size: {Math.round(maxSize / 1024 / 1024)}MB</span>\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"mt-4 p-4 rounded-lg bg-destructive/10 border border-destructive/20 flex items-start gap-3\">\n            <AlertCircle className=\"w-5 h-5 text-destructive mt-0.5\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-destructive\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Single File Display */}\n        {selectedFile && !multiple && (\n          <div className=\"mt-6\">\n            <div className=\"glass rounded-xl p-4 border border-primary/20\" data-testid=\"file-info\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"gradient-primary w-12 h-12 rounded-lg flex items-center justify-center\">\n                  {(() => {\n                    const Icon = getFileIcon(selectedFile);\n                    return <Icon className=\"w-6 h-6 text-white\" />;\n                  })()}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-semibold truncate\" data-testid=\"text-file-name\">\n                    {selectedFile.name}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    <span data-testid=\"text-file-size\">{formatFileSize(selectedFile.size)}</span>\n                    {selectedFile.type && (\n                      <span className=\"ml-2\">• {selectedFile.type.split('/')[1]?.toUpperCase() || 'File'}</span>\n                    )}\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-5 h-5 text-green-500\" />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      resetFile();\n                    }}\n                    className=\"hover:bg-destructive/10 hover:text-destructive\"\n                    data-testid=\"button-remove-file\"\n                  >\n                    <X className=\"w-5 h-5\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Multiple Files Display */}\n        {selectedFiles.length > 0 && multiple && (\n          <div className=\"mt-6\" data-testid=\"files-info\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle2 className=\"w-5 h-5 text-green-500\" />\n                <h4 className=\"font-semibold\" data-testid=\"text-files-count\">\n                  {selectedFiles.length} file{selectedFiles.length > 1 ? 's' : ''} selected\n                </h4>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={resetFiles}\n                className=\"hover:bg-destructive/10 hover:text-destructive\"\n                data-testid=\"button-remove-all-files\"\n              >\n                Clear All\n              </Button>\n            </div>\n            \n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {selectedFiles.map((file, index) => {\n                const Icon = getFileIcon(file);\n                return (\n                  <div \n                    key={index} \n                    className=\"glass rounded-lg p-3 flex items-center gap-3 group hover:border-primary/30 transition-all\"\n                  >\n                    <div className=\"gradient-primary w-10 h-10 rounded-lg flex items-center justify-center opacity-80 group-hover:opacity-100\">\n                      <Icon className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium truncate\" data-testid={`text-file-name-${index}`}>\n                        {file.name}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        <span data-testid={`text-file-size-${index}`}>{formatFileSize(file.size)}</span>\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFile(index)}\n                      className=\"opacity-0 group-hover:opacity-100 hover:bg-destructive/10 hover:text-destructive transition-opacity\"\n                      data-testid={`button-remove-file-${index}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}","size_bytes":11934},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/cookie-consent.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Cookie, Shield, Settings, X } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface CookiePreferences {\n  necessary: boolean;\n  analytics: boolean;\n  functional: boolean;\n}\n\nexport default function CookieConsent() {\n  const [showBanner, setShowBanner] = useState(false);\n  const [showPreferences, setShowPreferences] = useState(false);\n  const [preferences, setPreferences] = useState<CookiePreferences>({\n    necessary: true,\n    analytics: false,\n    functional: false,\n  });\n\n  useEffect(() => {\n    const consent = localStorage.getItem(\"cookieConsent\");\n    if (!consent) {\n      // Small delay to ensure smooth page load\n      const timer = setTimeout(() => setShowBanner(true), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  const handleAcceptAll = () => {\n    const allPreferences = {\n      necessary: true,\n      analytics: true,\n      functional: true,\n    };\n    localStorage.setItem(\"cookieConsent\", JSON.stringify(allPreferences));\n    localStorage.setItem(\"cookieConsentDate\", new Date().toISOString());\n    setShowBanner(false);\n  };\n\n  const handleRejectAll = () => {\n    const minimalPreferences = {\n      necessary: true,\n      analytics: false,\n      functional: false,\n    };\n    localStorage.setItem(\"cookieConsent\", JSON.stringify(minimalPreferences));\n    localStorage.setItem(\"cookieConsentDate\", new Date().toISOString());\n    setShowBanner(false);\n  };\n\n  const handleSavePreferences = () => {\n    localStorage.setItem(\"cookieConsent\", JSON.stringify(preferences));\n    localStorage.setItem(\"cookieConsentDate\", new Date().toISOString());\n    setShowPreferences(false);\n    setShowBanner(false);\n  };\n\n  const handleManagePreferences = () => {\n    setShowPreferences(true);\n  };\n\n  return (\n    <>\n      <AnimatePresence>\n        {showBanner && (\n          <motion.div\n            initial={{ y: 100, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            exit={{ y: 100, opacity: 0 }}\n            transition={{ type: \"spring\", stiffness: 100, damping: 15 }}\n            className=\"fixed bottom-0 left-0 right-0 z-50 p-4 sm:p-6\"\n            data-testid=\"cookie-consent-banner\"\n          >\n            <Card className=\"glass max-w-7xl mx-auto p-6 sm:p-8 shadow-2xl border-2\">\n              <button\n                onClick={() => setShowBanner(false)}\n                className=\"absolute top-4 right-4 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                aria-label=\"Close cookie banner\"\n                data-testid=\"button-close-banner\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n              \n              <div className=\"flex flex-col lg:flex-row items-start lg:items-center gap-6\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div className=\"p-2 rounded-lg bg-primary/10\">\n                      <Cookie className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold\">We value your privacy</h3>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    We use cookies to enhance your browsing experience and analyze our traffic. \n                    All file processing happens entirely in your browser - <span className=\"font-medium\">your files never leave your device</span>. \n                    By clicking \"Accept All\", you consent to our use of cookies. \n                    You can manage your preferences or learn more in our privacy policy.\n                  </p>\n                </div>\n                \n                <div className=\"flex flex-col sm:flex-row gap-3 w-full lg:w-auto\">\n                  <Button\n                    onClick={handleManagePreferences}\n                    variant=\"outline\"\n                    className=\"w-full sm:w-auto\"\n                    data-testid=\"button-manage-cookies\"\n                  >\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Manage\n                  </Button>\n                  <Button\n                    onClick={handleRejectAll}\n                    variant=\"outline\"\n                    className=\"w-full sm:w-auto\"\n                    data-testid=\"button-reject-cookies\"\n                  >\n                    Reject All\n                  </Button>\n                  <Button\n                    onClick={handleAcceptAll}\n                    className=\"btn-gradient text-white w-full sm:w-auto\"\n                    data-testid=\"button-accept-cookies\"\n                  >\n                    Accept All\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <Dialog open={showPreferences} onOpenChange={setShowPreferences}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-primary\" />\n              Cookie Preferences\n            </DialogTitle>\n            <DialogDescription>\n              Manage your cookie preferences. You can enable or disable different types of cookies below.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 py-4\">\n            {/* Necessary Cookies */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"necessary\" className=\"text-base font-medium\">\n                    Necessary Cookies\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    These cookies are essential for the website to function properly. They cannot be disabled.\n                  </p>\n                </div>\n                <Switch\n                  id=\"necessary\"\n                  checked={preferences.necessary}\n                  disabled\n                  data-testid=\"switch-necessary\"\n                />\n              </div>\n            </div>\n\n            {/* Analytics Cookies */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"analytics\" className=\"text-base font-medium\">\n                    Analytics Cookies\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    These cookies help us understand how visitors interact with our website by collecting anonymous information.\n                  </p>\n                </div>\n                <Switch\n                  id=\"analytics\"\n                  checked={preferences.analytics}\n                  onCheckedChange={(checked) => \n                    setPreferences(prev => ({ ...prev, analytics: checked }))\n                  }\n                  data-testid=\"switch-analytics\"\n                />\n              </div>\n            </div>\n\n            {/* Functional Cookies */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"functional\" className=\"text-base font-medium\">\n                    Functional Cookies\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    These cookies enable enhanced functionality and personalization, such as remembering your preferences.\n                  </p>\n                </div>\n                <Switch\n                  id=\"functional\"\n                  checked={preferences.functional}\n                  onCheckedChange={(checked) => \n                    setPreferences(prev => ({ ...prev, functional: checked }))\n                  }\n                  data-testid=\"switch-functional\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n            <Button\n              onClick={() => setShowPreferences(false)}\n              variant=\"outline\"\n              className=\"w-full sm:w-auto\"\n              data-testid=\"button-cancel-preferences\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSavePreferences}\n              className=\"btn-gradient text-white w-full sm:w-auto\"\n              data-testid=\"button-save-preferences\"\n            >\n              Save Preferences\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":9122},"client/src/pages/password-generator.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { Shield, Copy, RefreshCw, Lock, Zap, Check, X, History, Trash2, ArrowLeft } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO, { toolFAQs } from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\nimport { WhyUseSection, UseCasesSection, ComparisonSection, HowItWorksSection, commonFeatures } from \"@/components/seo/tool-features\";\nimport { ToolFAQ, generatePasswordGeneratorFAQs } from \"@/components/seo/tool-faq\";\nimport { Key, Settings, Download, User, Mail, CreditCard, ShieldCheck, Hash, Briefcase, School, Users, Globe } from \"lucide-react\";\n\ninterface PasswordOptions {\n  length: number;\n  uppercase: boolean;\n  lowercase: boolean;\n  numbers: boolean;\n  symbols: boolean;\n}\n\ninterface GeneratedPassword {\n  value: string;\n  timestamp: Date;\n  strength: PasswordStrength;\n}\n\ntype PasswordStrength = \"weak\" | \"medium\" | \"strong\" | \"very-strong\";\n\nconst DEFAULT_OPTIONS: PasswordOptions = {\n  length: 16,\n  uppercase: true,\n  lowercase: true,\n  numbers: true,\n  symbols: false\n};\n\nconst CHAR_SETS = {\n  uppercase: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  lowercase: \"abcdefghijklmnopqrstuvwxyz\",\n  numbers: \"0123456789\",\n  symbols: \"!@#$%^&*()_+-=[]{}|;:,.<>?\"\n};\n\nexport default function PasswordGenerator() {\n  // Generate structured data for SEO\n  const howToSchema = generateHowToSchema({\n    name: \"How to Generate Strong Passwords\",\n    description: \"Create secure, random passwords with customizable length and character types\",\n    totalTime: \"PT10S\",\n    steps: [\n      { name: \"Set Length\", text: \"Choose password length between 4-50 characters\" },\n      { name: \"Select Characters\", text: \"Choose which character types to include\" },\n      { name: \"Generate Password\", text: \"Click 'Generate New Password' button\" },\n      { name: \"Copy Password\", text: \"Copy the generated password to your clipboard\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"Password Generator - AltafToolsHub\",\n    description: \"Cryptographically secure password generator with strength meter. Create strong passwords with custom settings. 100% browser-based.\",\n    applicationCategory: \"SecurityApplication\",\n    url: \"https://www.altaftoolshub.com/password-generator\",\n    aggregateRating: { ratingValue: 4.9, ratingCount: 3421, bestRating: 5 },\n    featureList: [\n      \"Cryptographically secure random generation\",\n      \"Password length 4-50 characters\",\n      \"Custom character sets (uppercase, lowercase, numbers, symbols)\",\n      \"Real-time strength meter\",\n      \"Password history tracking\",\n      \"One-click copy to clipboard\",\n      \"100% client-side generation\"\n    ],\n    datePublished: \"2024-01-01\",\n    dateModified: \"2025-01-17\"\n  });\n\n  useSEO({\n    title: \"Strong Password Generator - Create Secure Passwords | AltafToolsHub\",\n    description: \"Free secure password generator. Create strong, random passwords with custom length and character types. Includes strength meter. 100% client-side processing.\",\n    path: \"/password-generator\",\n    keywords: \"password generator, secure password, strong password, random password generator, password creator, password maker, online password generator, free password tool, password generator 2025, ai password security\",\n    ogImage: \"https://www.altaftoolshub.com/og-password-generator.png\",\n    structuredData: [howToSchema, softwareSchema],\n    additionalMetaTags: [\n      { name: \"application-name\", content: \"Password Generator - AltafToolsHub\" },\n      { property: \"article:section\", content: \"Security Tools\" },\n      { property: \"article:tag\", content: \"Password Security\" },\n      { property: \"article:tag\", content: \"Cybersecurity\" },\n      { property: \"article:tag\", content: \"Privacy Tools\" }\n    ]\n  });\n\n  const [options, setOptions] = useState<PasswordOptions>(DEFAULT_OPTIONS);\n  const [password, setPassword] = useState(\"\");\n  const [strength, setStrength] = useState<PasswordStrength>(\"weak\");\n  const [history, setHistory] = useState<GeneratedPassword[]>([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const { toast } = useToast();\n\n  const calculateStrength = useCallback((pass: string, opts: PasswordOptions): PasswordStrength => {\n    if (pass.length < 8) return \"weak\";\n    \n    let score = 0;\n    \n    // Length score\n    if (pass.length >= 12) score += 2;\n    if (pass.length >= 16) score += 2;\n    if (pass.length >= 20) score += 1;\n    \n    // Character variety score\n    if (opts.uppercase && /[A-Z]/.test(pass)) score += 1;\n    if (opts.lowercase && /[a-z]/.test(pass)) score += 1;\n    if (opts.numbers && /[0-9]/.test(pass)) score += 1;\n    if (opts.symbols && /[!@#$%^&*()_+\\-=\\[\\]{}|;:,.<>?]/.test(pass)) score += 2;\n    \n    // Pattern checks (reduce score for patterns)\n    if (/(.)\\1{2,}/.test(pass)) score -= 1; // Repeated characters\n    if (/^[A-Z][a-z]+[0-9]+$/.test(pass)) score -= 1; // Common pattern\n    \n    if (score >= 8) return \"very-strong\";\n    if (score >= 6) return \"strong\";\n    if (score >= 4) return \"medium\";\n    return \"weak\";\n  }, []);\n\n  const generatePassword = useCallback(() => {\n    const { length, uppercase, lowercase, numbers, symbols } = options;\n    \n    // Validate at least one character type is selected\n    if (!uppercase && !lowercase && !numbers && !symbols) {\n      toast({\n        title: \"Invalid Options\",\n        description: \"Please select at least one character type.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    let charset = \"\";\n    if (uppercase) charset += CHAR_SETS.uppercase;\n    if (lowercase) charset += CHAR_SETS.lowercase;\n    if (numbers) charset += CHAR_SETS.numbers;\n    if (symbols) charset += CHAR_SETS.symbols;\n\n    let newPassword = \"\";\n    const array = new Uint32Array(length);\n    crypto.getRandomValues(array);\n    \n    for (let i = 0; i < length; i++) {\n      newPassword += charset[array[i] % charset.length];\n    }\n\n    // Ensure at least one character from each selected type\n    const ensureChars: string[] = [];\n    if (uppercase) ensureChars.push(CHAR_SETS.uppercase[Math.floor(Math.random() * CHAR_SETS.uppercase.length)]);\n    if (lowercase) ensureChars.push(CHAR_SETS.lowercase[Math.floor(Math.random() * CHAR_SETS.lowercase.length)]);\n    if (numbers) ensureChars.push(CHAR_SETS.numbers[Math.floor(Math.random() * CHAR_SETS.numbers.length)]);\n    if (symbols) ensureChars.push(CHAR_SETS.symbols[Math.floor(Math.random() * CHAR_SETS.symbols.length)]);\n\n    // Replace random positions with ensured characters\n    const passwordArray = newPassword.split('');\n    ensureChars.forEach((char, index) => {\n      const randomPos = Math.floor(Math.random() * length);\n      passwordArray[randomPos] = char;\n    });\n    \n    newPassword = passwordArray.join('');\n    const newStrength = calculateStrength(newPassword, options);\n    \n    setPassword(newPassword);\n    setStrength(newStrength);\n    \n    // Add to history\n    const newEntry: GeneratedPassword = {\n      value: newPassword,\n      timestamp: new Date(),\n      strength: newStrength\n    };\n    setHistory(prev => [newEntry, ...prev.slice(0, 9)]); // Keep last 10\n  }, [options, calculateStrength, toast]);\n\n  // Generate initial password on mount\n  useEffect(() => {\n    generatePassword();\n  }, []);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Password copied to clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy password. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const clearHistory = () => {\n    setHistory([]);\n    toast({\n      title: \"History Cleared\",\n      description: \"Password history has been cleared.\",\n    });\n  };\n\n  const getStrengthColor = (s: PasswordStrength) => {\n    switch (s) {\n      case \"very-strong\": return \"text-green-500\";\n      case \"strong\": return \"text-emerald-500\";\n      case \"medium\": return \"text-yellow-500\";\n      case \"weak\": return \"text-red-500\";\n    }\n  };\n\n  const getStrengthBg = (s: PasswordStrength) => {\n    switch (s) {\n      case \"very-strong\": return \"bg-green-500\";\n      case \"strong\": return \"bg-emerald-500\";\n      case \"medium\": return \"bg-yellow-500\";\n      case \"weak\": return \"bg-red-500\";\n    }\n  };\n\n  const getStrengthWidth = (s: PasswordStrength) => {\n    switch (s) {\n      case \"very-strong\": return \"100%\";\n      case \"strong\": return \"75%\";\n      case \"medium\": return \"50%\";\n      case \"weak\": return \"25%\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"Password Generator\"\n        description=\"Generate strong, secure passwords with customizable options and strength indicator\"\n        category=\"UtilitiesApplication\"\n        faqs={toolFAQs[\"password-generator\"]}\n        rating={{ value: 4.8, count: 378 }}\n      />\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <Breadcrumbs items={[{ name: \"Password Generator\", url: \"/password-generator\" }]} />\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\" \n            data-testid=\"button-back\"\n            onClick={() => {\n              window.location.href = '/';\n              setTimeout(() => {\n                const toolsSection = document.getElementById('tools-section');\n                if (toolsSection) {\n                  toolsSection.scrollIntoView({ behavior: 'smooth' });\n                }\n              }, 100);\n            }}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Tools\n          </Button>\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-gradient-to-br from-emerald-500 to-teal-600 mb-4\">\n            <Lock className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-4xl font-bold mb-4\">Password Generator</h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Generate strong, secure passwords with customizable options. All passwords are created using cryptographically secure randomness.\n          </p>\n        </div>\n\n        {/* Privacy Notice */}\n        <PrivacyNotice message=\"Passwords are generated using your device's secure random generator. Each password is unique and never stored.\" />\n\n        {/* Features */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Card className=\"p-4 glass\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center\">\n                <Shield className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Cryptographically Secure</h3>\n                <p className=\"text-sm text-muted-foreground\">Uses Web Crypto API</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4 glass\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center\">\n                <Zap className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Instant Generation</h3>\n                <p className=\"text-sm text-muted-foreground\">No server required</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4 glass\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-cyan-500 to-teal-500 flex items-center justify-center\">\n                <History className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Password History</h3>\n                <p className=\"text-sm text-muted-foreground\">Session-only storage</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Options Section */}\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Password Options</h2>\n            \n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label htmlFor=\"length\">Password Length</Label>\n                  <span className=\"text-2xl font-bold text-primary\">{options.length}</span>\n                </div>\n                <Slider\n                  id=\"length\"\n                  min={8}\n                  max={64}\n                  step={1}\n                  value={[options.length]}\n                  onValueChange={([value]) => setOptions(prev => ({ ...prev, length: value }))}\n                  className=\"mb-2\"\n                  data-testid=\"slider-password-length\"\n                />\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>8</span>\n                  <span>64</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <Label>Character Types</Label>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"uppercase\"\n                    checked={options.uppercase}\n                    onCheckedChange={(checked) => \n                      setOptions(prev => ({ ...prev, uppercase: checked as boolean }))\n                    }\n                    data-testid=\"checkbox-uppercase\"\n                  />\n                  <Label htmlFor=\"uppercase\" className=\"flex-1 cursor-pointer\">\n                    Uppercase Letters (A-Z)\n                  </Label>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"lowercase\"\n                    checked={options.lowercase}\n                    onCheckedChange={(checked) => \n                      setOptions(prev => ({ ...prev, lowercase: checked as boolean }))\n                    }\n                    data-testid=\"checkbox-lowercase\"\n                  />\n                  <Label htmlFor=\"lowercase\" className=\"flex-1 cursor-pointer\">\n                    Lowercase Letters (a-z)\n                  </Label>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"numbers\"\n                    checked={options.numbers}\n                    onCheckedChange={(checked) => \n                      setOptions(prev => ({ ...prev, numbers: checked as boolean }))\n                    }\n                    data-testid=\"checkbox-numbers\"\n                  />\n                  <Label htmlFor=\"numbers\" className=\"flex-1 cursor-pointer\">\n                    Numbers (0-9)\n                  </Label>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"symbols\"\n                    checked={options.symbols}\n                    onCheckedChange={(checked) => \n                      setOptions(prev => ({ ...prev, symbols: checked as boolean }))\n                    }\n                    data-testid=\"checkbox-symbols\"\n                  />\n                  <Label htmlFor=\"symbols\" className=\"flex-1 cursor-pointer\">\n                    Special Characters (!@#$%...)\n                  </Label>\n                </div>\n              </div>\n\n              <Button\n                onClick={generatePassword}\n                className=\"w-full\"\n                size=\"lg\"\n                data-testid=\"button-generate-password\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Generate New Password\n              </Button>\n            </div>\n          </Card>\n\n          {/* Generated Password Section */}\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Generated Password</h2>\n            \n            <div className=\"space-y-4\">\n              {/* Password Display */}\n              <div className=\"p-4 bg-muted/50 rounded-lg\">\n                <div className=\"font-mono text-lg break-all mb-3\" data-testid=\"text-generated-password\">\n                  {password || \"Click 'Generate' to create a password\"}\n                </div>\n                \n                {/* Strength Indicator */}\n                {password && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-muted-foreground\">Strength:</span>\n                      <span className={cn(\"text-sm font-medium capitalize\", getStrengthColor(strength))}>\n                        {strength.replace(\"-\", \" \")}\n                      </span>\n                    </div>\n                    <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                      <div \n                        className={cn(\"h-full transition-all duration-300\", getStrengthBg(strength))}\n                        style={{ width: getStrengthWidth(strength) }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {password && (\n                <Button\n                  onClick={() => copyToClipboard(password)}\n                  className=\"w-full\"\n                  variant=\"outline\"\n                  data-testid=\"button-copy-password\"\n                >\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                  Copy to Clipboard\n                </Button>\n              )}\n\n              {/* History Toggle */}\n              <div className=\"pt-4 border-t\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <Button\n                    onClick={() => setShowHistory(!showHistory)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    data-testid=\"button-toggle-history\"\n                  >\n                    <History className=\"w-4 h-4 mr-2\" />\n                    {showHistory ? \"Hide\" : \"Show\"} History ({history.length})\n                  </Button>\n                  {history.length > 0 && (\n                    <Button\n                      onClick={clearHistory}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid=\"button-clear-history\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Clear\n                    </Button>\n                  )}\n                </div>\n\n                {/* History List */}\n                {showHistory && history.length > 0 && (\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {history.map((item, index) => (\n                      <div \n                        key={index}\n                        className=\"p-3 bg-muted/30 rounded-lg text-sm\"\n                      >\n                        <div className=\"flex justify-between items-start mb-1\">\n                          <span className=\"font-mono text-xs break-all flex-1\">\n                            {item.value}\n                          </span>\n                          <Button\n                            onClick={() => copyToClipboard(item.value)}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"ml-2\"\n                            data-testid={`button-copy-history-${index}`}\n                          >\n                            <Copy className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                        <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                          <span>{item.timestamp.toLocaleTimeString()}</span>\n                          <span className={cn(\"capitalize\", getStrengthColor(item.strength))}>\n                            {item.strength.replace(\"-\", \" \")}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Tips Section */}\n        <Card className=\"mt-8 p-6 bg-gradient-to-br from-primary/5 to-primary/10\">\n          <h3 className=\"text-lg font-semibold mb-3\">Security Tips</h3>\n          <ul className=\"space-y-2\">\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Use unique passwords for each account</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Longer passwords are generally more secure than complex short ones</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Consider using a password manager to store your passwords securely</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Enable two-factor authentication when available</span>\n            </li>\n          </ul>\n        </Card>\n      </div>\n\n      {/* SEO Content Sections */}\n      <HowItWorksSection\n        toolName=\"Password Generator\"\n        steps={[\n          {\n            number: 1,\n            title: \"Set Parameters\",\n            description: \"Choose password length and which character types to include.\",\n            icon: Settings\n          },\n          {\n            number: 2,\n            title: \"Generate Password\",\n            description: \"Click generate to create a cryptographically secure password.\",\n            icon: Key\n          },\n          {\n            number: 3,\n            title: \"Copy & Use\",\n            description: \"Copy your password and save it in a secure password manager.\",\n            icon: Copy\n          }\n        ]}\n      />\n\n      <WhyUseSection\n        toolName=\"Password Generator\"\n        benefits={[\n          \"Uses cryptographically secure random generation (crypto.getRandomValues)\",\n          \"Generates passwords up to 50 characters long\",\n          \"Real-time strength indicator helps create strong passwords\",\n          \"Customizable character sets for different requirements\",\n          \"Password history tracking for convenience\",\n          \"100% client-side - passwords never leave your browser\",\n          \"No limits, registration, or tracking\",\n          \"Works offline once the page is loaded\"\n        ]}\n        features={[\n          commonFeatures.privacy,\n          commonFeatures.instant,\n          commonFeatures.free,\n          {\n            icon: ShieldCheck,\n            title: \"Cryptographically Secure\",\n            description: \"Uses browser's crypto API for true randomness.\",\n            highlight: true\n          }\n        ]}\n      />\n\n      <UseCasesSection\n        useCases={[\n          {\n            title: \"Account Security\",\n            description: \"Create unique, strong passwords for all your online accounts.\",\n            icon: User,\n            example: \"Generate different passwords for banking, email, social media\"\n          },\n          {\n            title: \"Work Accounts\",\n            description: \"Meet corporate password requirements with custom settings.\",\n            icon: Briefcase,\n            example: \"Create passwords matching company security policies\"\n          },\n          {\n            title: \"Email Protection\",\n            description: \"Secure email accounts with strong, unique passwords.\",\n            icon: Mail,\n            example: \"Generate complex passwords for Gmail, Outlook, ProtonMail\"\n          },\n          {\n            title: \"Financial Security\",\n            description: \"Protect banking and payment accounts with maximum security.\",\n            icon: CreditCard,\n            example: \"Create ultra-strong passwords for banking apps\"\n          },\n          {\n            title: \"Development & Testing\",\n            description: \"Generate test passwords for development environments.\",\n            icon: Hash,\n            example: \"Quick password generation for testing user accounts\"\n          },\n          {\n            title: \"Password Rotation\",\n            description: \"Regular password updates for enhanced security.\",\n            icon: RefreshCw,\n            example: \"Generate new passwords during quarterly security updates\"\n          }\n        ]}\n      />\n\n      <ComparisonSection\n        toolName=\"Password Generator\"\n        comparisons={[\n          { feature: \"Generation Method\", ourTool: \"Crypto API\", others: \"Math.random()\", highlight: true },\n          { feature: \"Privacy\", ourTool: \"100% client-side\", others: \"Server-generated\" },\n          { feature: \"Password Length\", ourTool: \"Up to 50 chars\", others: \"16-32 typical\" },\n          { feature: \"Character Sets\", ourTool: \"Fully customizable\", others: \"Limited options\" },\n          { feature: \"Strength Meter\", ourTool: \"Real-time analysis\", others: \"Basic or none\" },\n          { feature: \"History Tracking\", ourTool: \"Local only\", others: \"Cloud stored\" },\n          { feature: \"Usage Limits\", ourTool: \"Unlimited\", others: \"5-10 per day\" },\n          { feature: \"Registration\", ourTool: false, others: \"Often required\" },\n          { feature: \"Works Offline\", ourTool: true, others: false },\n          { feature: \"Cost\", ourTool: \"Free forever\", others: \"Freemium\" }\n        ]}\n      />\n\n      <ToolFAQ \n        faqs={generatePasswordGeneratorFAQs()}\n        toolName=\"Password Generator\"\n        toolPath=\"/password-generator\"\n      />\n    </div>\n  );\n}","size_bytes":26643},"client/src/pages/privacy-policy.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Shield, Lock, Cookie, Mail, Globe, FileText, Users, Server } from \"lucide-react\";\nimport { useSEO } from \"@/hooks/use-seo\";\nimport { motion } from \"framer-motion\";\n\nconst sections = [\n  {\n    icon: Shield,\n    title: \"Our Privacy Commitment\",\n    content: [\n      \"At AltafToolsHub, your privacy is our top priority. We've built our entire platform around the principle of maximum privacy protection.\",\n      \"All file processing happens directly in your browser using WebAssembly and JavaScript. Your files never leave your device, and we never have access to them.\",\n      \"This privacy policy explains how we handle any information we collect and your rights regarding that information.\"\n    ]\n  },\n  {\n    icon: Server,\n    title: \"Data Collection & Processing\",\n    content: [\n      \"**Client-Side Processing Only**: All file manipulation, conversion, and compression happens entirely in your browser. We do not upload, store, or have access to any files you process using our tools.\",\n      \"**No Server Storage**: Since all processing is client-side, your files are never transmitted to our servers. They remain on your device throughout the entire process.\",\n      \"**Automatic Deletion**: Processed files exist only in your browser's memory during the session and are automatically cleared when you close the tab or navigate away.\"\n    ]\n  },\n  {\n    icon: Cookie,\n    title: \"Cookie Usage\",\n    content: [\n      \"We use cookies to improve your experience on our website. Here's how:\",\n      \"**Necessary Cookies**: Essential for the website to function properly. These include session cookies and security cookies.\",\n      \"**Analytics Cookies**: Help us understand how visitors interact with our website. We use privacy-focused analytics that don't track individual users.\",\n      \"**Functional Cookies**: Remember your preferences such as theme selection (light/dark mode) and language settings.\",\n      \"You can manage your cookie preferences at any time through the cookie consent banner or your browser settings.\"\n    ]\n  },\n  {\n    icon: Users,\n    title: \"Information We Collect\",\n    content: [\n      \"**Anonymous Analytics**: We collect aggregated, anonymous data about page views, tool usage, and general traffic patterns to improve our services.\",\n      \"**Error Reports**: If our tools encounter an error, we may collect anonymous error logs to help us fix issues. These never contain your file data.\",\n      \"**Voluntary Information**: Information you provide when contacting us via email for support or feedback.\",\n      \"**No Personal Data from Files**: We never collect, see, or store any data from the files you process.\"\n    ]\n  },\n  {\n    icon: Lock,\n    title: \"Your Rights & Control\",\n    content: [\n      \"**Access**: You have the right to request information about any data we have about you (which is minimal by design).\",\n      \"**Deletion**: You can request deletion of any information we might have about you.\",\n      \"**Opt-Out**: You can opt out of analytics cookies at any time through our cookie preferences.\",\n      \"**Data Portability**: You can request a copy of any data we have about you in a portable format.\",\n      \"**No Account Required**: We don't require accounts or registration, further protecting your privacy.\"\n    ]\n  },\n  {\n    icon: Globe,\n    title: \"Third-Party Services\",\n    content: [\n      \"**Analytics**: We use privacy-focused analytics services that don't track individual users or use cookies for tracking.\",\n      \"**CDN**: We use content delivery networks to serve our website faster, but they don't have access to your processed files.\",\n      \"**No Advertising**: We don't use any advertising networks or tracking pixels.\",\n      \"**No Social Media Tracking**: We don't use social media plugins that could track your activity.\"\n    ]\n  },\n  {\n    icon: FileText,\n    title: \"Data Security\",\n    content: [\n      \"**HTTPS Only**: Our entire website is served over HTTPS, ensuring encrypted connections.\",\n      \"**Browser Sandbox**: File processing happens within your browser's security sandbox, isolated from other websites.\",\n      \"**No Data Transmission**: Since files aren't uploaded, there's no risk of interception during transmission.\",\n      \"**Open Source Libraries**: We use well-maintained, open-source libraries for file processing.\"\n    ]\n  },\n  {\n    icon: Mail,\n    title: \"Contact & Updates\",\n    content: [\n      \"**Privacy Questions**: For any privacy-related questions or concerns, contact us at privacy@altaftoolshub.com\",\n      \"**Policy Updates**: We'll notify users of any significant changes to this privacy policy through a prominent notice on our website.\",\n      \"**Response Time**: We aim to respond to all privacy-related inquiries within 48 hours.\",\n      \"**Transparency Reports**: We commit to transparency about any data requests we receive (though we have no user data to share).\"\n    ]\n  }\n];\n\nexport default function PrivacyPolicy() {\n  useSEO({\n    title: \"Privacy Policy - AltafToolsHub | Your Privacy is Our Priority\",\n    description: \"Learn how AltafToolsHub protects your privacy with 100% client-side file processing. No uploads, no tracking, complete privacy.\",\n    path: \"/privacy\"\n  });\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"max-w-4xl mx-auto\"\n        >\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-2xl bg-gradient-to-br from-purple-500 to-blue-500 mb-6\">\n              <Shield className=\"w-10 h-10 text-white\" />\n            </div>\n            <h1 className=\"text-4xl sm:text-5xl font-bold mb-4\">Privacy Policy</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Your privacy matters. Learn how we protect it.\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Last updated: January 2024\n            </p>\n          </div>\n\n          {/* Key Privacy Features */}\n          <Card className=\"glass mb-8 p-6 border-2 border-primary/20\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 text-center\">\n              <div>\n                <div className=\"text-3xl font-bold gradient-text mb-2\">100%</div>\n                <p className=\"text-sm text-muted-foreground\">Client-side processing</p>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold gradient-text mb-2\">0</div>\n                <p className=\"text-sm text-muted-foreground\">Files uploaded to servers</p>\n              </div>\n              <div>\n                <div className=\"text-3xl font-bold gradient-text mb-2\">Never</div>\n                <p className=\"text-sm text-muted-foreground\">Your data leaves your device</p>\n              </div>\n            </div>\n          </Card>\n\n          {/* Privacy Policy Sections */}\n          <div className=\"space-y-8\">\n            {sections.map((section, index) => {\n              const Icon = section.icon;\n              return (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                >\n                  <Card className=\"glass p-6 hover:shadow-xl transition-shadow duration-300\">\n                    <div className=\"flex items-start gap-4\">\n                      <div className=\"p-3 rounded-lg bg-primary/10 shrink-0\">\n                        <Icon className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h2 className=\"text-2xl font-semibold mb-4\">{section.title}</h2>\n                        <div className=\"space-y-3\">\n                          {section.content.map((paragraph, pIndex) => (\n                            <p \n                              key={pIndex} \n                              className=\"text-muted-foreground leading-relaxed\"\n                              dangerouslySetInnerHTML={{ \n                                __html: paragraph\n                                  .replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"text-foreground font-medium\">$1</strong>')\n                              }}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </div>\n\n          {/* GDPR Compliance Notice */}\n          <Card className=\"glass mt-8 p-6 bg-primary/5 border-primary/20\">\n            <h3 className=\"text-xl font-semibold mb-3\">GDPR Compliance</h3>\n            <p className=\"text-muted-foreground leading-relaxed\">\n              AltafToolsHub is fully compliant with the General Data Protection Regulation (GDPR). \n              We respect the privacy rights of all users, regardless of location. Our client-side \n              processing approach means we collect minimal data by design, giving you complete control \n              over your information.\n            </p>\n          </Card>\n\n          {/* Contact Section */}\n          <div className=\"text-center mt-12 p-8 rounded-2xl bg-gradient-to-br from-primary/10 to-primary/5\">\n            <Mail className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n            <h3 className=\"text-2xl font-semibold mb-2\">Questions About Privacy?</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              We're here to help with any privacy concerns you may have.\n            </p>\n            <a \n              href=\"mailto:privacy@altaftoolshub.com\" \n              className=\"text-primary hover:underline font-medium\"\n              data-testid=\"link-privacy-email\"\n            >\n              privacy@altaftoolshub.com\n            </a>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":10182},"client/src/pages/qr-generator.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { QrCode, Download, Copy, Palette, Zap, Shield, Check, X, RefreshCw, ArrowLeft } from \"lucide-react\";\nimport QRCode from \"qrcode\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO, { toolFAQs } from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\nimport { WhyUseSection, UseCasesSection, ComparisonSection, HowItWorksSection, commonFeatures } from \"@/components/seo/tool-features\";\nimport { ToolFAQ, generateQRGeneratorFAQs } from \"@/components/seo/tool-faq\";\nimport { Store, Share2, Wifi, Calendar, MapPin, CreditCard, Type, Settings as SettingsIcon } from \"lucide-react\";\n\ntype QRSize = \"small\" | \"medium\" | \"large\";\n\nconst sizeMap: Record<QRSize, number> = {\n  small: 200,\n  medium: 300,\n  large: 400\n};\n\nexport default function QRGenerator() {\n  // Generate structured data for SEO\n  const howToSchema = generateHowToSchema({\n    name: \"How to Generate QR Codes Online\",\n    description: \"Create custom QR codes for text, URLs, and more with customizable colors and sizes\",\n    totalTime: \"PT30S\",\n    steps: [\n      { name: \"Enter Data\", text: \"Type or paste the text, URL, or data for your QR code\" },\n      { name: \"Customize Design\", text: \"Choose size and colors for your QR code\" },\n      { name: \"Generate QR Code\", text: \"QR code generates automatically as you type\" },\n      { name: \"Download\", text: \"Download your QR code as a PNG image\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"QR Code Generator - AltafToolsHub\",\n    description: \"Free QR code generator with custom colors and sizes. Create QR codes for URLs, text, WiFi, and more. 100% browser-based.\",\n    applicationCategory: \"BusinessApplication\",\n    url: \"https://www.altaftoolshub.com/qr-generator\",\n    aggregateRating: { ratingValue: 4.9, ratingCount: 2156, bestRating: 5 },\n    featureList: [\n      \"Generate QR codes for any text or URL\",\n      \"Custom foreground and background colors\",\n      \"Three size options (200px, 300px, 400px)\",\n      \"Real-time QR generation as you type\",\n      \"Download as PNG image\",\n      \"100% client-side processing\",\n      \"No watermarks or limits\"\n    ],\n    datePublished: \"2024-01-01\",\n    dateModified: \"2025-01-17\"\n  });\n\n  useSEO({\n    title: \"Free QR Code Generator - Create Custom QR Codes Online | AltafToolsHub\",\n    description: \"Free online QR code generator. Create custom QR codes from text, URLs, emails, phone numbers. Customize colors and sizes. 100% client-side for privacy.\",\n    path: \"/qr-generator\",\n    keywords: \"qr code generator, create qr code, free qr generator, online qr code, custom qr code, qr code maker, generate qr code, qr code creator, qr code 2025, ai qr generator\",\n    ogImage: \"https://www.altaftoolshub.com/og-qr-generator.png\",\n    structuredData: [howToSchema, softwareSchema],\n    additionalMetaTags: [\n      { name: \"application-name\", content: \"QR Code Generator - AltafToolsHub\" },\n      { property: \"article:section\", content: \"Utility Tools\" },\n      { property: \"article:tag\", content: \"QR Code Generation\" },\n      { property: \"article:tag\", content: \"Marketing Tools\" },\n      { property: \"article:tag\", content: \"Business Tools\" }\n    ]\n  });\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [text, setText] = useState(\"\");\n  const [size, setSize] = useState<QRSize>(\"medium\");\n  const [fgColor, setFgColor] = useState(\"#000000\");\n  const [bgColor, setBgColor] = useState(\"#ffffff\");\n  const [qrDataUrl, setQrDataUrl] = useState<string | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { toast } = useToast();\n\n  // Generate QR code whenever input changes\n  useEffect(() => {\n    if (!text.trim()) {\n      setQrDataUrl(null);\n      return;\n    }\n\n    const generateQR = async () => {\n      setIsGenerating(true);\n      try {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        await QRCode.toCanvas(canvas, text, {\n          width: sizeMap[size],\n          color: {\n            dark: fgColor,\n            light: bgColor\n          },\n          margin: 2,\n          errorCorrectionLevel: 'M'\n        });\n\n        const dataUrl = canvas.toDataURL('image/png');\n        setQrDataUrl(dataUrl);\n      } catch (error) {\n        console.error('Error generating QR code:', error);\n        toast({\n          title: \"Generation Failed\",\n          description: \"Failed to generate QR code. Please try again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setIsGenerating(false);\n      }\n    };\n\n    const debounceTimer = setTimeout(generateQR, 300);\n    return () => clearTimeout(debounceTimer);\n  }, [text, size, fgColor, bgColor]);\n\n  const handleDownload = () => {\n    if (!qrDataUrl) return;\n\n    const link = document.createElement('a');\n    link.download = `qr-code-${Date.now()}.png`;\n    link.href = qrDataUrl;\n    link.click();\n\n    toast({\n      title: \"Downloaded!\",\n      description: \"QR code has been downloaded successfully.\",\n    });\n  };\n\n  const handleCopyImage = async () => {\n    if (!qrDataUrl) return;\n\n    try {\n      const blob = await (await fetch(qrDataUrl)).blob();\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          'image/png': blob\n        })\n      ]);\n      \n      toast({\n        title: \"Copied!\",\n        description: \"QR code copied to clipboard.\",\n      });\n    } catch (error) {\n      // Fallback: copy data URL as text\n      await navigator.clipboard.writeText(qrDataUrl);\n      toast({\n        title: \"Copied!\",\n        description: \"QR code data copied to clipboard.\",\n      });\n    }\n  };\n\n  const handleReset = () => {\n    setText(\"\");\n    setSize(\"medium\");\n    setFgColor(\"#000000\");\n    setBgColor(\"#ffffff\");\n    setQrDataUrl(null);\n  };\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"QR Code Generator\"\n        description=\"Generate QR codes instantly from text or URLs with customizable colors and sizes\"\n        category=\"UtilitiesApplication\"\n        faqs={toolFAQs[\"qr-generator\"]}\n        rating={{ value: 4.9, count: 456 }}\n      />\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <Breadcrumbs items={[{ name: \"QR Generator\", url: \"/qr-generator\" }]} />\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\" \n            data-testid=\"button-back\"\n            onClick={() => {\n              window.location.href = '/';\n              setTimeout(() => {\n                const toolsSection = document.getElementById('tools-section');\n                if (toolsSection) {\n                  toolsSection.scrollIntoView({ behavior: 'smooth' });\n                }\n              }, 100);\n            }}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Tools\n          </Button>\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-gradient-to-br from-indigo-500 to-purple-600 mb-4\">\n            <QrCode className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-4xl font-bold mb-4\">QR Code Generator</h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Generate QR codes instantly from any text or URL. Customize colors and sizes, all processed securely in your browser.\n          </p>\n        </div>\n\n        {/* Privacy Notice */}\n        <PrivacyNotice message=\"QR codes are generated locally. Your data remains completely private.\" />\n\n        {/* Features */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Card className=\"p-4 glass\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center\">\n                <Shield className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">100% Private</h3>\n                <p className=\"text-sm text-muted-foreground\">Generated in your browser</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4 glass\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center\">\n                <Zap className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Instant Generation</h3>\n                <p className=\"text-sm text-muted-foreground\">Real-time QR codes</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4 glass\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-cyan-500 to-teal-500 flex items-center justify-center\">\n                <Palette className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Customizable</h3>\n                <p className=\"text-sm text-muted-foreground\">Colors and sizes</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Input Section */}\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">QR Code Content</h2>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"qr-text\">Text or URL</Label>\n                <Textarea\n                  id=\"qr-text\"\n                  placeholder=\"Enter text, URL, or any data to encode...\"\n                  value={text}\n                  onChange={(e) => setText(e.target.value)}\n                  className=\"mt-2 min-h-[120px]\"\n                  data-testid=\"input-qr-text\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {text.length} characters\n                </p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"qr-size\">Size</Label>\n                <Select value={size} onValueChange={(v) => setSize(v as QRSize)}>\n                  <SelectTrigger id=\"qr-size\" className=\"mt-2\" data-testid=\"select-qr-size\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"small\">Small (200x200)</SelectItem>\n                    <SelectItem value=\"medium\">Medium (300x300)</SelectItem>\n                    <SelectItem value=\"large\">Large (400x400)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"fg-color\">Foreground Color</Label>\n                  <div className=\"flex gap-2 mt-2\">\n                    <Input\n                      id=\"fg-color\"\n                      type=\"color\"\n                      value={fgColor}\n                      onChange={(e) => setFgColor(e.target.value)}\n                      className=\"w-16 h-10 p-1 cursor-pointer\"\n                      data-testid=\"input-fg-color\"\n                    />\n                    <Input\n                      type=\"text\"\n                      value={fgColor}\n                      onChange={(e) => setFgColor(e.target.value)}\n                      placeholder=\"#000000\"\n                      className=\"flex-1\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"bg-color\">Background Color</Label>\n                  <div className=\"flex gap-2 mt-2\">\n                    <Input\n                      id=\"bg-color\"\n                      type=\"color\"\n                      value={bgColor}\n                      onChange={(e) => setBgColor(e.target.value)}\n                      className=\"w-16 h-10 p-1 cursor-pointer\"\n                      data-testid=\"input-bg-color\"\n                    />\n                    <Input\n                      type=\"text\"\n                      value={bgColor}\n                      onChange={(e) => setBgColor(e.target.value)}\n                      placeholder=\"#ffffff\"\n                      className=\"flex-1\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Button\n                onClick={handleReset}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-reset-qr\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Reset All\n              </Button>\n            </div>\n          </Card>\n\n          {/* Output Section */}\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Generated QR Code</h2>\n            \n            <div className=\"flex flex-col items-center\">\n              {text.trim() ? (\n                <>\n                  <div className=\"relative mb-6\">\n                    <canvas\n                      ref={canvasRef}\n                      className=\"border rounded-lg shadow-lg\"\n                      style={{\n                        maxWidth: '100%',\n                        height: 'auto',\n                        display: isGenerating ? 'none' : 'block'\n                      }}\n                    />\n                    {isGenerating && (\n                      <div className=\"flex items-center justify-center w-full h-64 border rounded-lg\">\n                        <div className=\"text-center\">\n                          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n                          <p className=\"text-muted-foreground\">Generating QR code...</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {qrDataUrl && !isGenerating && (\n                    <div className=\"flex gap-4 w-full\">\n                      <Button\n                        onClick={handleDownload}\n                        className=\"flex-1\"\n                        data-testid=\"button-download-qr\"\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download PNG\n                      </Button>\n                      <Button\n                        onClick={handleCopyImage}\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        data-testid=\"button-copy-qr\"\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copy Image\n                      </Button>\n                    </div>\n                  )}\n                </>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-64 text-center\">\n                  <QrCode className=\"w-16 h-16 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    Enter text or URL to generate QR code\n                  </p>\n                </div>\n              )}\n            </div>\n          </Card>\n        </div>\n\n        {/* Tips Section */}\n        <Card className=\"mt-8 p-6 bg-gradient-to-br from-primary/5 to-primary/10\">\n          <h3 className=\"text-lg font-semibold mb-3\">Pro Tips</h3>\n          <ul className=\"space-y-2\">\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">QR codes can store URLs, text, WiFi credentials, contact info, and more</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Higher error correction allows QR codes to work even when partially damaged</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Use high contrast colors for better scanning reliability</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Test your QR code with different devices before sharing</span>\n            </li>\n          </ul>\n        </Card>\n      </div>\n\n      {/* SEO Content Sections */}\n      <HowItWorksSection\n        toolName=\"QR Code Generator\"\n        steps={[\n          {\n            number: 1,\n            title: \"Enter Your Data\",\n            description: \"Type or paste any text, URL, email, or phone number into the input field.\",\n            icon: Type\n          },\n          {\n            number: 2,\n            title: \"Customize Appearance\",\n            description: \"Choose size and colors to match your brand or preference.\",\n            icon: Palette\n          },\n          {\n            number: 3,\n            title: \"Download QR Code\",\n            description: \"Save your QR code as a high-quality PNG image for any use.\",\n            icon: Download\n          }\n        ]}\n      />\n\n      <WhyUseSection\n        toolName=\"QR Code Generator\"\n        benefits={[\n          \"Generate unlimited QR codes without any restrictions or watermarks\",\n          \"Real-time generation - see your QR code update as you type\",\n          \"Custom colors to match your brand or design requirements\",\n          \"Three size options for different use cases and resolutions\",\n          \"Works with any QR scanner app on smartphones and tablets\",\n          \"100% browser-based - no data sent to servers\",\n          \"No registration, email, or personal information required\",\n          \"QR codes never expire and work forever\"\n        ]}\n        features={[\n          commonFeatures.privacy,\n          commonFeatures.instant,\n          commonFeatures.free,\n          {\n            icon: Palette,\n            title: \"Custom Colors\",\n            description: \"Match your brand with custom foreground and background colors.\"\n          }\n        ]}\n      />\n\n      <UseCasesSection\n        useCases={[\n          {\n            title: \"Business Cards\",\n            description: \"Add QR codes to business cards for instant contact sharing.\",\n            icon: CreditCard,\n            example: \"Link to your digital vCard or LinkedIn profile\"\n          },\n          {\n            title: \"Restaurant Menus\",\n            description: \"Create contactless digital menus for restaurants and cafes.\",\n            icon: Store,\n            example: \"QR code linking to online menu or ordering system\"\n          },\n          {\n            title: \"WiFi Sharing\",\n            description: \"Share WiFi credentials without revealing the password.\",\n            icon: Wifi,\n            example: \"Generate WiFi QR for guests and customers\"\n          },\n          {\n            title: \"Event Management\",\n            description: \"Use QR codes for event tickets, check-ins, and information.\",\n            icon: Calendar,\n            example: \"Event registration and attendance tracking\"\n          },\n          {\n            title: \"Marketing Campaigns\",\n            description: \"Track campaign performance with unique QR codes.\",\n            icon: Share2,\n            example: \"Print ads, flyers, and promotional materials\"\n          },\n          {\n            title: \"Location Sharing\",\n            description: \"Share locations for meetups, stores, or events.\",\n            icon: MapPin,\n            example: \"Google Maps links for easy navigation\"\n          }\n        ]}\n      />\n\n      <ComparisonSection\n        toolName=\"QR Generator\"\n        comparisons={[\n          { feature: \"Data Privacy\", ourTool: \"100% client-side\", others: \"Server processing\", highlight: true },\n          { feature: \"Generation Speed\", ourTool: \"Real-time\", others: \"Submit and wait\" },\n          { feature: \"Custom Colors\", ourTool: \"Full RGB control\", others: \"Limited presets\" },\n          { feature: \"Size Options\", ourTool: \"3 sizes\", others: \"Fixed size\" },\n          { feature: \"Usage Limits\", ourTool: \"Unlimited\", others: \"10-50 per day\" },\n          { feature: \"Registration\", ourTool: false, others: \"Email required\" },\n          { feature: \"Watermarks\", ourTool: false, others: \"On free tier\" },\n          { feature: \"QR Code Expiry\", ourTool: \"Never expires\", others: \"May expire\" },\n          { feature: \"Download Format\", ourTool: \"PNG\", others: \"PNG, paid for SVG\" },\n          { feature: \"Cost\", ourTool: \"Free forever\", others: \"$5-20/month\" }\n        ]}\n      />\n\n      <ToolFAQ \n        faqs={generateQRGeneratorFAQs()}\n        toolName=\"QR Code Generator\"\n        toolPath=\"/qr-generator\"\n      />\n    </div>\n  );\n}","size_bytes":21431},"client/src/pages/terms-conditions.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { ScrollText, Shield, AlertCircle, Users, Globe, Scale, Ban, Mail } from \"lucide-react\";\nimport { useSEO } from \"@/hooks/use-seo\";\nimport { motion } from \"framer-motion\";\n\nconst sections = [\n  {\n    icon: ScrollText,\n    title: \"Terms of Service\",\n    content: [\n      \"Welcome to AltafToolsHub. These Terms and Conditions (\\\"Terms\\\") govern your use of our website and services.\",\n      \"By accessing or using AltafToolsHub, you agree to be bound by these Terms. If you disagree with any part of these terms, you may not access our services.\",\n      \"Our services are provided \\\"as is\\\" for personal and commercial use, subject to the restrictions outlined in these Terms.\"\n    ]\n  },\n  {\n    icon: Shield,\n    title: \"Service Description\",\n    content: [\n      \"**Client-Side Processing**: AltafToolsHub provides browser-based file manipulation tools that process files entirely on your device. No files are uploaded to our servers.\",\n      \"**Free to Use**: All tools are currently provided free of charge for both personal and commercial use.\",\n      \"**No Registration Required**: You can use our services without creating an account or providing personal information.\",\n      \"**Service Availability**: While we strive for 100% uptime, we cannot guarantee uninterrupted access to our services.\"\n    ]\n  },\n  {\n    icon: Users,\n    title: \"User Responsibilities\",\n    content: [\n      \"**Legal Use Only**: You agree to use our services only for lawful purposes and in accordance with these Terms.\",\n      \"**File Ownership**: You must own or have the necessary rights to any files you process using our tools.\",\n      \"**Data Backup**: You are responsible for maintaining backups of your files. We are not liable for any data loss.\",\n      \"**Security**: You are responsible for the security of your device and files. Ensure you're using our services on secure, malware-free systems.\"\n    ]\n  },\n  {\n    icon: Ban,\n    title: \"Prohibited Uses\",\n    content: [\n      \"You may not use our services to:\",\n      \"• Process files containing illegal, harmful, or malicious content\",\n      \"• Violate any applicable laws or regulations\",\n      \"• Infringe upon intellectual property rights of others\",\n      \"• Attempt to reverse engineer, decompile, or hack our services\",\n      \"• Use automated systems or bots to access our services in a manner that impairs performance\",\n      \"• Misrepresent the source or ownership of processed files\"\n    ]\n  },\n  {\n    icon: AlertCircle,\n    title: \"Limitation of Liability\",\n    content: [\n      \"**No Warranties**: Our services are provided \\\"as is\\\" without any warranties, express or implied.\",\n      \"**Data Loss**: We are not responsible for any data loss or corruption that may occur during file processing.\",\n      \"**Indirect Damages**: We shall not be liable for any indirect, incidental, special, or consequential damages.\",\n      \"**Maximum Liability**: Our total liability shall not exceed the amount you paid for using our services (which is currently zero).\",\n      \"**Force Majeure**: We are not liable for any failure to perform due to circumstances beyond our reasonable control.\"\n    ]\n  },\n  {\n    icon: Globe,\n    title: \"Intellectual Property\",\n    content: [\n      \"**Our Content**: All content on AltafToolsHub, including text, graphics, logos, and software, is our property or licensed to us.\",\n      \"**Your Files**: You retain all rights to the files you process. We do not claim any ownership of your content.\",\n      \"**Feedback**: Any feedback or suggestions you provide may be used by us without compensation or attribution.\",\n      \"**Open Source**: Some components of our service use open-source software, subject to their respective licenses.\"\n    ]\n  },\n  {\n    icon: Scale,\n    title: \"Privacy & Data Protection\",\n    content: [\n      \"**Privacy First**: We process all files locally in your browser. Your files never leave your device.\",\n      \"**No Data Collection**: We don't collect, store, or have access to the contents of your files.\",\n      \"**Analytics**: We use privacy-focused analytics to improve our services. No personal data is collected.\",\n      \"**Compliance**: We comply with GDPR and other applicable data protection regulations.\",\n      \"For more details, please refer to our Privacy Policy.\"\n    ]\n  },\n  {\n    icon: Mail,\n    title: \"Changes & Contact\",\n    content: [\n      \"**Terms Updates**: We reserve the right to modify these Terms at any time. Significant changes will be notified on our website.\",\n      \"**Continued Use**: Your continued use of our services after changes constitutes acceptance of the new Terms.\",\n      \"**Severability**: If any provision of these Terms is found invalid, the remaining provisions shall continue in effect.\",\n      \"**Contact Us**: For questions about these Terms, contact us at legal@altaftoolshub.com\",\n      \"**Governing Law**: These Terms are governed by the laws of the jurisdiction where we operate.\"\n    ]\n  }\n];\n\nconst faqs = [\n  {\n    question: \"Can I use AltafToolsHub for commercial purposes?\",\n    answer: \"Yes, our tools are free for both personal and commercial use. However, you must ensure you have the rights to process the files you're working with.\"\n  },\n  {\n    question: \"What happens to my files after processing?\",\n    answer: \"Your files are processed entirely in your browser and never leave your device. Once you close the tab or navigate away, all file data is automatically cleared from memory.\"\n  },\n  {\n    question: \"Are there any file size limits?\",\n    answer: \"File size limits depend on your device's available memory since all processing happens locally. Generally, files up to several hundred MB can be processed on most modern devices.\"\n  },\n  {\n    question: \"Do you store or have access to my files?\",\n    answer: \"No. All file processing happens in your browser using client-side JavaScript. We have no access to your files and cannot see, store, or retrieve them.\"\n  }\n];\n\nexport default function TermsConditions() {\n  useSEO({\n    title: \"Terms & Conditions - AltafToolsHub | Service Agreement\",\n    description: \"Read our terms of service for using AltafToolsHub's privacy-focused file tools. Understand your rights and responsibilities.\",\n    path: \"/terms\"\n  });\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"max-w-4xl mx-auto\"\n        >\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-2xl bg-gradient-to-br from-blue-500 to-cyan-500 mb-6\">\n              <ScrollText className=\"w-10 h-10 text-white\" />\n            </div>\n            <h1 className=\"text-4xl sm:text-5xl font-bold mb-4\">Terms & Conditions</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Please read these terms carefully before using our services\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Effective Date: January 1, 2024\n            </p>\n          </div>\n\n          {/* Quick Summary */}\n          <Card className=\"glass mb-8 p-6 border-2 border-primary/20\">\n            <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-primary\" />\n              Quick Summary\n            </h2>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-primary mt-1\">✓</span>\n                <span>Free to use for personal and commercial purposes</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-primary mt-1\">✓</span>\n                <span>All processing happens in your browser - we never see your files</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-primary mt-1\">✓</span>\n                <span>You retain all rights to your files</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-primary mt-1\">✓</span>\n                <span>Service provided \"as is\" without warranties</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-primary mt-1\">✓</span>\n                <span>We respect your privacy and comply with data protection laws</span>\n              </li>\n            </ul>\n          </Card>\n\n          {/* Terms Sections */}\n          <div className=\"space-y-8\">\n            {sections.map((section, index) => {\n              const Icon = section.icon;\n              return (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                >\n                  <Card className=\"glass p-6 hover:shadow-xl transition-shadow duration-300\">\n                    <div className=\"flex items-start gap-4\">\n                      <div className=\"p-3 rounded-lg bg-primary/10 shrink-0\">\n                        <Icon className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h2 className=\"text-2xl font-semibold mb-4\">{section.title}</h2>\n                        <div className=\"space-y-3\">\n                          {section.content.map((paragraph, pIndex) => (\n                            <p \n                              key={pIndex} \n                              className=\"text-muted-foreground leading-relaxed\"\n                              dangerouslySetInnerHTML={{ \n                                __html: paragraph\n                                  .replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"text-foreground font-medium\">$1</strong>')\n                                  .replace(/^• /gm, '<span class=\"ml-4\">• </span>')\n                              }}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </div>\n\n          {/* FAQs Section */}\n          <div className=\"mt-12\">\n            <h2 className=\"text-2xl font-semibold mb-6 text-center\">Frequently Asked Questions</h2>\n            <div className=\"space-y-4\">\n              {faqs.map((faq, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.8 + index * 0.1 }}\n                >\n                  <Card className=\"glass p-6\">\n                    <h3 className=\"font-semibold mb-2\">{faq.question}</h3>\n                    <p className=\"text-muted-foreground\">{faq.answer}</p>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n\n          {/* Acceptance Notice */}\n          <Card className=\"glass mt-8 p-6 bg-primary/5 border-primary/20\">\n            <h3 className=\"text-xl font-semibold mb-3\">Acceptance of Terms</h3>\n            <p className=\"text-muted-foreground leading-relaxed\">\n              By using AltafToolsHub, you acknowledge that you have read, understood, and agree to be \n              bound by these Terms and Conditions. If you do not agree with any part of these terms, \n              please do not use our services. We reserve the right to update these terms at any time, \n              and your continued use constitutes acceptance of any changes.\n            </p>\n          </Card>\n\n          {/* Contact Section */}\n          <div className=\"text-center mt-12 p-8 rounded-2xl bg-gradient-to-br from-primary/10 to-primary/5\">\n            <Scale className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n            <h3 className=\"text-2xl font-semibold mb-2\">Legal Questions?</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Contact our legal team for any questions about these terms.\n            </p>\n            <a \n              href=\"mailto:legal@altaftoolshub.com\" \n              className=\"text-primary hover:underline font-medium\"\n              data-testid=\"link-legal-email\"\n            >\n              legal@altaftoolshub.com\n            </a>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":12779},"client/src/pages/word-counter.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { \n  FileText, Trash2, Copy, Download, Clock, \n  Type, Hash, AlignLeft, BookOpen, Check, ArrowLeft \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO, { toolFAQs } from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\nimport { WhyUseSection, UseCasesSection, ComparisonSection, HowItWorksSection, commonFeatures } from \"@/components/seo/tool-features\";\nimport { ToolFAQ, generateWordCounterFAQs } from \"@/components/seo/tool-faq\";\nimport { PenTool, FileCheck, MessageSquare, Gauge, ScrollText, Edit3 } from \"lucide-react\";\n\ninterface TextStats {\n  words: number;\n  characters: number;\n  charactersNoSpaces: number;\n  sentences: number;\n  paragraphs: number;\n  readingTime: number; // in minutes\n}\n\ninterface StatCardProps {\n  icon: React.ElementType;\n  label: string;\n  value: number | string;\n  color: string;\n}\n\nconst StatCard = ({ icon: Icon, label, value, color }: StatCardProps) => (\n  <Card className=\"p-4 glass\">\n    <div className=\"flex items-center gap-3\">\n      <div className={cn(\"w-10 h-10 rounded-lg flex items-center justify-center\", color)}>\n        <Icon className=\"w-5 h-5 text-white\" />\n      </div>\n      <div>\n        <p className=\"text-sm text-muted-foreground\">{label}</p>\n        <p className=\"text-2xl font-bold\">{value}</p>\n      </div>\n    </div>\n  </Card>\n);\n\nexport default function WordCounter() {\n  // Generate structured data for SEO\n  const howToSchema = generateHowToSchema({\n    name: \"How to Count Words and Characters Online\",\n    description: \"Count words, characters, sentences, and get reading time estimates instantly\",\n    totalTime: \"PT5S\",\n    steps: [\n      { name: \"Enter Text\", text: \"Type or paste your text into the text area\" },\n      { name: \"View Statistics\", text: \"See real-time word and character counts\" },\n      { name: \"Check Reading Time\", text: \"View estimated reading time for your content\" },\n      { name: \"Export Results\", text: \"Copy statistics or download as text file\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"Word Counter - AltafToolsHub\",\n    description: \"Real-time word counter with character count, sentence analysis, and reading time. Perfect for writers and students. 100% browser-based.\",\n    applicationCategory: \"UtilitiesApplication\",\n    url: \"https://www.altaftoolshub.com/word-counter\",\n    aggregateRating: { ratingValue: 4.8, ratingCount: 2876, bestRating: 5 },\n    featureList: [\n      \"Real-time word counting\",\n      \"Character count with and without spaces\",\n      \"Sentence and paragraph counting\",\n      \"Reading time estimation\",\n      \"Character limit tracking\",\n      \"Export to text file\",\n      \"100% client-side processing\"\n    ],\n    datePublished: \"2024-01-01\",\n    dateModified: \"2025-01-17\"\n  });\n\n  useSEO({\n    title: \"Free Word Counter Tool - Count Words, Characters & More | AltafToolsHub\",\n    description: \"Free online word counter. Count words, characters, sentences, paragraphs instantly. Get reading time estimates. 100% client-side processing for privacy.\",\n    path: \"/word-counter\",\n    keywords: \"word counter, character counter, text counter, word count tool, character count tool, reading time calculator, online word counter, free text analyzer, word counter 2025, ai writing tool\",\n    ogImage: \"https://www.altaftoolshub.com/og-word-counter.png\",\n    structuredData: [howToSchema, softwareSchema],\n    additionalMetaTags: [\n      { name: \"application-name\", content: \"Word Counter - AltafToolsHub\" },\n      { property: \"article:section\", content: \"Text Tools\" },\n      { property: \"article:tag\", content: \"Text Analysis\" },\n      { property: \"article:tag\", content: \"Writing Tools\" },\n      { property: \"article:tag\", content: \"SEO Tools\" }\n    ]\n  });\n\n  const [text, setText] = useState(\"\");\n  const [stats, setStats] = useState<TextStats>({\n    words: 0,\n    characters: 0,\n    charactersNoSpaces: 0,\n    sentences: 0,\n    paragraphs: 0,\n    readingTime: 0\n  });\n  const [characterLimit, setCharacterLimit] = useState<number | null>(null);\n  const [customLimit, setCustomLimit] = useState(\"280\"); // Twitter default\n  const { toast } = useToast();\n\n  const calculateStats = useCallback((inputText: string): TextStats => {\n    if (!inputText) {\n      return {\n        words: 0,\n        characters: 0,\n        charactersNoSpaces: 0,\n        sentences: 0,\n        paragraphs: 0,\n        readingTime: 0\n      };\n    }\n\n    // Characters\n    const characters = inputText.length;\n    const charactersNoSpaces = inputText.replace(/\\s/g, \"\").length;\n\n    // Words - improved regex to handle various word boundaries\n    const words = inputText\n      .trim()\n      .split(/\\s+/)\n      .filter(word => word.length > 0).length;\n\n    // Sentences - count by sentence-ending punctuation\n    const sentenceRegex = /[.!?]+[\\s\\n]+|[.!?]+$/g;\n    const sentenceMatches = inputText.match(sentenceRegex);\n    const sentences = sentenceMatches ? sentenceMatches.length : (inputText.trim() ? 1 : 0);\n\n    // Paragraphs - count by line breaks\n    const paragraphs = inputText\n      .split(/\\n\\n+/)\n      .filter(para => para.trim().length > 0).length;\n\n    // Reading time (average 200 words per minute)\n    const readingTime = Math.ceil(words / 200);\n\n    return {\n      words,\n      characters,\n      charactersNoSpaces,\n      sentences,\n      paragraphs: paragraphs || (inputText.trim() ? 1 : 0),\n      readingTime\n    };\n  }, []);\n\n  // Update stats when text changes\n  useEffect(() => {\n    const newStats = calculateStats(text);\n    setStats(newStats);\n  }, [text, calculateStats]);\n\n  const handleClear = () => {\n    setText(\"\");\n    toast({\n      title: \"Cleared\",\n      description: \"Text has been cleared.\",\n    });\n  };\n\n  const handleCopy = async () => {\n    if (!text) {\n      toast({\n        title: \"Nothing to Copy\",\n        description: \"Please enter some text first.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Text copied to clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy text. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleExport = () => {\n    if (!text) {\n      toast({\n        title: \"Nothing to Export\",\n        description: \"Please enter some text first.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const statsText = `\nText Statistics\n===============\nWords: ${stats.words}\nCharacters: ${stats.characters}\nCharacters (no spaces): ${stats.charactersNoSpaces}\nSentences: ${stats.sentences}\nParagraphs: ${stats.paragraphs}\nReading Time: ${stats.readingTime} minute(s)\n\nOriginal Text:\n==============\n${text}\n    `.trim();\n\n    const blob = new Blob([statsText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `text-stats-${Date.now()}.txt`;\n    link.click();\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Exported!\",\n      description: \"Text and statistics exported successfully.\",\n    });\n  };\n\n  const setPresetLimit = (limit: number | null) => {\n    setCharacterLimit(limit);\n    if (limit) {\n      setCustomLimit(limit.toString());\n    }\n  };\n\n  const characterPercentage = characterLimit \n    ? Math.min((stats.characters / characterLimit) * 100, 100)\n    : 0;\n\n  const isOverLimit = characterLimit && stats.characters > characterLimit;\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"Word Counter\"\n        description=\"Count words, characters, sentences and get reading time estimates instantly\"\n        category=\"UtilitiesApplication\"\n        faqs={toolFAQs[\"word-counter\"]}\n        rating={{ value: 4.7, count: 298 }}\n      />\n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <Breadcrumbs items={[{ name: \"Word Counter\", url: \"/word-counter\" }]} />\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\" \n            data-testid=\"button-back\"\n            onClick={() => {\n              window.location.href = '/';\n              setTimeout(() => {\n                const toolsSection = document.getElementById('tools-section');\n                if (toolsSection) {\n                  toolsSection.scrollIntoView({ behavior: 'smooth' });\n                }\n              }, 100);\n            }}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Tools\n          </Button>\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-2xl bg-gradient-to-br from-blue-500 to-purple-600 mb-4\">\n            <FileText className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-4xl font-bold mb-4\">Word Counter</h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Count words, characters, sentences, and more. Get instant reading time estimates and character limit checks.\n          </p>\n        </div>\n\n        {/* Privacy Notice */}\n        <PrivacyNotice message=\"Text analysis happens in your browser. Your content is never transmitted.\" />\n\n        {/* Main Statistics */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8\">\n          <StatCard\n            icon={Type}\n            label=\"Words\"\n            value={stats.words.toLocaleString()}\n            color=\"bg-gradient-to-br from-purple-500 to-blue-500\"\n          />\n          <StatCard\n            icon={Hash}\n            label=\"Characters\"\n            value={stats.characters.toLocaleString()}\n            color=\"bg-gradient-to-br from-blue-500 to-cyan-500\"\n          />\n          <StatCard\n            icon={Hash}\n            label=\"No Spaces\"\n            value={stats.charactersNoSpaces.toLocaleString()}\n            color=\"bg-gradient-to-br from-cyan-500 to-teal-500\"\n          />\n          <StatCard\n            icon={AlignLeft}\n            label=\"Sentences\"\n            value={stats.sentences.toLocaleString()}\n            color=\"bg-gradient-to-br from-teal-500 to-green-500\"\n          />\n          <StatCard\n            icon={BookOpen}\n            label=\"Paragraphs\"\n            value={stats.paragraphs.toLocaleString()}\n            color=\"bg-gradient-to-br from-green-500 to-emerald-500\"\n          />\n          <StatCard\n            icon={Clock}\n            label=\"Read Time\"\n            value={`${stats.readingTime} min`}\n            color=\"bg-gradient-to-br from-emerald-500 to-cyan-500\"\n          />\n        </div>\n\n        {/* Character Limit Section */}\n        <Card className=\"p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">Character Limit Checker</h2>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex flex-wrap gap-2\">\n              <Button\n                variant={characterLimit === 280 ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setPresetLimit(280)}\n                data-testid=\"button-limit-twitter\"\n              >\n                Twitter (280)\n              </Button>\n              <Button\n                variant={characterLimit === 160 ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setPresetLimit(160)}\n                data-testid=\"button-limit-sms\"\n              >\n                SMS (160)\n              </Button>\n              <Button\n                variant={characterLimit === 2200 ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setPresetLimit(2200)}\n                data-testid=\"button-limit-linkedin\"\n              >\n                LinkedIn (2200)\n              </Button>\n              <Button\n                variant={characterLimit === 500 ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setPresetLimit(500)}\n                data-testid=\"button-limit-meta\"\n              >\n                Meta Desc (500)\n              </Button>\n              <div className=\"flex gap-2 items-center\">\n                <input\n                  type=\"number\"\n                  value={customLimit}\n                  onChange={(e) => setCustomLimit(e.target.value)}\n                  className=\"w-24 px-2 py-1 border rounded text-sm\"\n                  placeholder=\"Custom\"\n                  data-testid=\"input-custom-limit\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setPresetLimit(parseInt(customLimit) || null)}\n                  data-testid=\"button-set-custom\"\n                >\n                  Set\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setPresetLimit(null)}\n                  data-testid=\"button-clear-limit\"\n                >\n                  Clear\n                </Button>\n              </div>\n            </div>\n\n            {characterLimit && (\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Character Usage\n                  </span>\n                  <span className={cn(\n                    \"text-sm font-medium\",\n                    isOverLimit ? \"text-red-500\" : \"text-green-500\"\n                  )}>\n                    {stats.characters} / {characterLimit}\n                  </span>\n                </div>\n                <Progress \n                  value={characterPercentage} \n                  className={cn(\n                    \"h-2\",\n                    isOverLimit && \"[&>div]:bg-red-500\"\n                  )}\n                />\n                {isOverLimit && (\n                  <p className=\"text-sm text-red-500\">\n                    ⚠️ Over limit by {stats.characters - characterLimit} characters\n                  </p>\n                )}\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Text Input Section */}\n        <Card className=\"p-6 mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold\">Enter Your Text</h2>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleCopy}\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={!text}\n                data-testid=\"button-copy-text\"\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Copy\n              </Button>\n              <Button\n                onClick={handleExport}\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={!text}\n                data-testid=\"button-export-text\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              <Button\n                onClick={handleClear}\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={!text}\n                data-testid=\"button-clear-text\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Clear\n              </Button>\n            </div>\n          </div>\n          \n          <Textarea\n            placeholder=\"Start typing or paste your text here...\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            className=\"min-h-[400px] font-mono\"\n            data-testid=\"textarea-input\"\n          />\n        </Card>\n\n        {/* Tips Section */}\n        <Card className=\"p-6 bg-gradient-to-br from-primary/5 to-primary/10\">\n          <h3 className=\"text-lg font-semibold mb-3\">Writing Tips</h3>\n          <ul className=\"space-y-2\">\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Average reading speed is 200-250 words per minute</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Optimal sentence length is 15-20 words for readability</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Paragraphs should typically be 3-5 sentences long</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <Check className=\"w-5 h-5 text-green-500 mt-0.5\" />\n              <span className=\"text-sm\">Use the character limit checker for social media posts</span>\n            </li>\n          </ul>\n        </Card>\n      </div>\n\n      {/* SEO Content Sections */}\n      <HowItWorksSection\n        toolName=\"Word Counter\"\n        steps={[\n          {\n            number: 1,\n            title: \"Enter Your Text\",\n            description: \"Type directly or paste your content into the text area.\",\n            icon: Edit3\n          },\n          {\n            number: 2,\n            title: \"View Real-Time Stats\",\n            description: \"See word count, characters, sentences, and paragraphs instantly.\",\n            icon: Gauge\n          },\n          {\n            number: 3,\n            title: \"Check Reading Time\",\n            description: \"Get estimated reading time based on average reading speed.\",\n            icon: Clock\n          }\n        ]}\n      />\n\n      <WhyUseSection\n        toolName=\"Word Counter\"\n        benefits={[\n          \"Real-time counting as you type or paste text\",\n          \"Comprehensive statistics: words, characters, sentences, paragraphs\",\n          \"Reading time estimation based on 200 WPM average\",\n          \"Character limit checker for social media posts\",\n          \"Export statistics and text to file\",\n          \"100% privacy - text never leaves your browser\",\n          \"No limits on text length or usage\",\n          \"Works offline once the page is loaded\"\n        ]}\n        features={[\n          commonFeatures.privacy,\n          commonFeatures.instant,\n          commonFeatures.free,\n          {\n            icon: Type,\n            title: \"Real-Time Analysis\",\n            description: \"Statistics update instantly as you type or edit.\"\n          }\n        ]}\n      />\n\n      <UseCasesSection\n        useCases={[\n          {\n            title: \"Academic Writing\",\n            description: \"Meet word count requirements for essays, papers, and assignments.\",\n            icon: BookOpen,\n            example: \"Check if your 2,000-word essay meets requirements\"\n          },\n          {\n            title: \"SEO Content\",\n            description: \"Optimize article length for search engine rankings.\",\n            icon: FileCheck,\n            example: \"Ensure blog posts are 1,500+ words for better SEO\"\n          },\n          {\n            title: \"Social Media\",\n            description: \"Stay within character limits for Twitter, LinkedIn, and other platforms.\",\n            icon: MessageSquare,\n            example: \"Keep tweets under 280 characters\"\n          },\n          {\n            title: \"Content Planning\",\n            description: \"Estimate reading time for blog posts and articles.\",\n            icon: ScrollText,\n            example: \"Check if article is a 5-minute read\"\n          },\n          {\n            title: \"Creative Writing\",\n            description: \"Track progress on novels, stories, and creative projects.\",\n            icon: PenTool,\n            example: \"Monitor daily writing goals and word counts\"\n          },\n          {\n            title: \"Professional Documents\",\n            description: \"Ensure reports and proposals meet length requirements.\",\n            icon: FileText,\n            example: \"Verify executive summary is under 500 words\"\n          }\n        ]}\n      />\n\n      <ComparisonSection\n        toolName=\"Word Counter\"\n        comparisons={[\n          { feature: \"Privacy\", ourTool: \"100% client-side\", others: \"May store text\", highlight: true },\n          { feature: \"Real-Time Counting\", ourTool: \"Instant\", others: \"Click to count\" },\n          { feature: \"Statistics Provided\", ourTool: \"6 metrics\", others: \"2-3 metrics\" },\n          { feature: \"Reading Time\", ourTool: true, others: \"Premium feature\" },\n          { feature: \"Character Limits\", ourTool: \"Customizable\", others: \"Fixed presets\" },\n          { feature: \"Text Length Limit\", ourTool: \"Unlimited\", others: \"10,000 words\" },\n          { feature: \"Export Options\", ourTool: \"Text file\", others: \"PDF (paid)\" },\n          { feature: \"Registration\", ourTool: false, others: \"For history\" },\n          { feature: \"Works Offline\", ourTool: true, others: false },\n          { feature: \"Cost\", ourTool: \"Free forever\", others: \"Freemium\" }\n        ]}\n      />\n\n      <ToolFAQ \n        faqs={generateWordCounterFAQs()}\n        toolName=\"Word Counter\"\n        toolPath=\"/word-counter\"\n      />\n    </div>\n  );\n}","size_bytes":21656},"client/src/components/seo/breadcrumbs.tsx":{"content":"import { Link } from \"wouter\";\nimport { ChevronRight, Home } from \"lucide-react\";\nimport { useEffect } from \"react\";\nimport { generateBreadcrumbSchema } from \"@/hooks/use-seo\";\n\ninterface BreadcrumbItem {\n  name: string;\n  url: string;\n}\n\ninterface BreadcrumbsProps {\n  items: BreadcrumbItem[];\n}\n\nexport default function Breadcrumbs({ items }: BreadcrumbsProps) {\n  const allItems = [\n    { name: \"Home\", url: \"/\" },\n    ...items\n  ];\n\n  useEffect(() => {\n    // Add breadcrumb structured data\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.textContent = JSON.stringify(generateBreadcrumbSchema(allItems));\n    script.id = 'breadcrumb-schema';\n    \n    // Remove existing breadcrumb schema if exists\n    const existing = document.getElementById('breadcrumb-schema');\n    if (existing) {\n      existing.remove();\n    }\n    \n    document.head.appendChild(script);\n\n    return () => {\n      const element = document.getElementById('breadcrumb-schema');\n      if (element) {\n        element.remove();\n      }\n    };\n  }, [items]);\n\n  return (\n    <nav \n      aria-label=\"Breadcrumb\" \n      className=\"mb-6\"\n      data-testid=\"nav-breadcrumb\"\n    >\n      <ol \n        className=\"flex items-center space-x-2 text-sm\"\n        itemScope \n        itemType=\"https://schema.org/BreadcrumbList\"\n      >\n        {allItems.map((item, index) => (\n          <li \n            key={item.url}\n            className=\"flex items-center\"\n            itemProp=\"itemListElement\" \n            itemScope \n            itemType=\"https://schema.org/ListItem\"\n          >\n            {index > 0 && (\n              <ChevronRight className=\"w-4 h-4 mx-2 text-muted-foreground\" />\n            )}\n            {index === allItems.length - 1 ? (\n              <span \n                className=\"text-muted-foreground font-medium\"\n                itemProp=\"name\"\n                data-testid={`breadcrumb-current-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {item.name}\n              </span>\n            ) : (\n              <Link \n                href={item.url}\n                className=\"text-primary hover:text-primary/80 transition-colors flex items-center gap-1\"\n                itemProp=\"item\"\n                data-testid={`breadcrumb-link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {index === 0 && <Home className=\"w-4 h-4\" />}\n                <span itemProp=\"name\">{item.name}</span>\n              </Link>\n            )}\n            <meta itemProp=\"position\" content={String(index + 1)} />\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n}","size_bytes":2651},"client/src/components/seo/tool-seo.tsx":{"content":"import { useEffect } from \"react\";\nimport { generateWebApplicationSchema, generateFAQSchema } from \"@/hooks/use-seo\";\n\ninterface ToolSEOProps {\n  toolName: string;\n  description: string;\n  category: string;\n  faqs?: { question: string; answer: string }[];\n  rating?: { value: number; count: number };\n}\n\nexport default function ToolSEO({ \n  toolName, \n  description, \n  category,\n  faqs,\n  rating\n}: ToolSEOProps) {\n  useEffect(() => {\n    const schemas = [];\n    \n    // Add WebApplication schema\n    schemas.push(generateWebApplicationSchema({\n      name: toolName,\n      description: description,\n      applicationCategory: category,\n      aggregateRating: rating ? {\n        ratingValue: rating.value,\n        ratingCount: rating.count\n      } : undefined\n    }));\n    \n    // Add FAQ schema if FAQs are provided\n    if (faqs && faqs.length > 0) {\n      schemas.push(generateFAQSchema(faqs));\n    }\n    \n    // Create script element for structured data\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.textContent = JSON.stringify(schemas);\n    script.id = 'tool-schema';\n    \n    // Remove existing schema if exists\n    const existing = document.getElementById('tool-schema');\n    if (existing) {\n      existing.remove();\n    }\n    \n    document.head.appendChild(script);\n    \n    return () => {\n      const element = document.getElementById('tool-schema');\n      if (element) {\n        element.remove();\n      }\n    };\n  }, [toolName, description, category, faqs, rating]);\n  \n  return null;\n}\n\n// Predefined FAQs for each tool\nexport const toolFAQs = {\n  \"compress-pdf\": [\n    {\n      question: \"How does the PDF compression work?\",\n      answer: \"Our PDF compressor uses advanced algorithms to reduce file size while maintaining quality. It optimizes images, removes redundant data, and applies smart compression techniques. All processing happens in your browser for complete privacy.\"\n    },\n    {\n      question: \"Can I compress PDF to a specific size?\",\n      answer: \"Yes! You can choose target sizes from 10KB to 5MB. Our intelligent algorithm adjusts compression parameters to achieve your desired file size while preserving maximum quality.\"\n    },\n    {\n      question: \"Is my PDF file secure during compression?\",\n      answer: \"Absolutely! All compression happens directly in your browser. Your files never leave your device or get uploaded to any server, ensuring 100% privacy and security.\"\n    },\n    {\n      question: \"What's the maximum file size I can compress?\",\n      answer: \"You can compress PDF files up to 100MB in size. Larger files may take longer to process depending on your device's performance.\"\n    }\n  ],\n  \"unlock-pdf\": [\n    {\n      question: \"How do I unlock a password-protected PDF?\",\n      answer: \"Simply upload your password-protected PDF file and enter the password. Our tool will remove the password protection and create an unlocked version you can download.\"\n    },\n    {\n      question: \"Is it safe to unlock PDFs with this tool?\",\n      answer: \"Yes, it's completely safe. All processing happens in your browser locally. Neither your file nor your password is sent to any server, ensuring complete privacy.\"\n    },\n    {\n      question: \"Will unlocking affect the PDF quality?\",\n      answer: \"No, unlocking a PDF maintains the original quality. The tool simply removes the password protection without altering the content or quality of your document.\"\n    },\n    {\n      question: \"What types of PDF passwords can be removed?\",\n      answer: \"Our tool can remove user passwords (open passwords) that prevent opening the PDF. You need to know the password to unlock the file.\"\n    }\n  ],\n  \"jpg-to-pdf\": [\n    {\n      question: \"How many images can I convert to PDF at once?\",\n      answer: \"You can convert multiple JPG, PNG, and other image formats to a single PDF. The only limit is your browser's memory capacity.\"\n    },\n    {\n      question: \"Can I adjust the page layout and orientation?\",\n      answer: \"Yes! You can choose from various page sizes (A4, Letter, Legal), orientations (Portrait, Landscape), and layout options (one per page, multiple per page).\"\n    },\n    {\n      question: \"Will my images be compressed during conversion?\",\n      answer: \"You control the quality! Choose from low, medium, high, or maximum quality settings to balance file size and image quality according to your needs.\"\n    },\n    {\n      question: \"Is the conversion process secure?\",\n      answer: \"100% secure! All conversion happens in your browser. Your images are never uploaded to any server, ensuring complete privacy.\"\n    }\n  ],\n  \"qr-generator\": [\n    {\n      question: \"What can I encode in a QR code?\",\n      answer: \"You can encode any text, URLs, email addresses, phone numbers, WiFi credentials, or plain text messages up to 2,953 characters.\"\n    },\n    {\n      question: \"Can I customize the QR code appearance?\",\n      answer: \"Yes! You can customize the foreground and background colors, and choose from three different sizes (small, medium, large) for your QR codes.\"\n    },\n    {\n      question: \"Are the generated QR codes permanent?\",\n      answer: \"Yes, once generated and downloaded, your QR codes are permanent and will work forever. They don't expire or require any online service to function.\"\n    },\n    {\n      question: \"What format are the QR codes saved in?\",\n      answer: \"QR codes are generated as high-quality PNG images that can be used for both digital and print purposes.\"\n    }\n  ],\n  \"password-generator\": [\n    {\n      question: \"How secure are the generated passwords?\",\n      answer: \"Our passwords use cryptographically secure random generation. They're created using your browser's secure random number generator, ensuring maximum unpredictability.\"\n    },\n    {\n      question: \"What makes a strong password?\",\n      answer: \"A strong password is at least 12 characters long and includes a mix of uppercase letters, lowercase letters, numbers, and symbols. Our generator helps you create passwords meeting these criteria.\"\n    },\n    {\n      question: \"Are generated passwords stored anywhere?\",\n      answer: \"No, passwords are generated locally in your browser and are never stored or transmitted. The history feature only stores passwords temporarily in your browser session.\"\n    },\n    {\n      question: \"Can I customize password requirements?\",\n      answer: \"Yes! You can adjust length (4-128 characters) and choose which character types to include: uppercase, lowercase, numbers, and symbols.\"\n    }\n  ],\n  \"word-counter\": [\n    {\n      question: \"What does the word counter tool count?\",\n      answer: \"Our tool counts words, characters (with and without spaces), sentences, paragraphs, and provides estimated reading and speaking times.\"\n    },\n    {\n      question: \"How accurate is the reading time estimate?\",\n      answer: \"Reading time is calculated at 200 words per minute (average adult reading speed). Speaking time uses 150 words per minute (average presentation speed).\"\n    },\n    {\n      question: \"Can I count words in different languages?\",\n      answer: \"Yes! The word counter works with any language that uses space-separated words, including English, Spanish, French, German, and many others.\"\n    },\n    {\n      question: \"Is there a limit to how much text I can analyze?\",\n      answer: \"There's no hard limit, but very large texts (over 100,000 words) may slow down your browser. The tool handles typical documents and articles with ease.\"\n    }\n  ]\n};","size_bytes":7532},"client/src/components/privacy-notice.tsx":{"content":"import { Shield } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PrivacyNoticeProps {\n  message: string;\n  className?: string;\n}\n\nexport default function PrivacyNotice({ message, className }: PrivacyNoticeProps) {\n  return (\n    <Alert \n      className={cn(\n        \"mb-8 border-teal-200 dark:border-teal-800 bg-teal-50/50 dark:bg-teal-950/30\",\n        className\n      )}\n      data-testid=\"privacy-notice\"\n    >\n      <Shield className=\"h-5 w-5 text-teal-600 dark:text-teal-400\" />\n      <AlertDescription className=\"text-teal-900 dark:text-teal-100 font-medium ml-2\">\n        {message}\n      </AlertDescription>\n    </Alert>\n  );\n}","size_bytes":717},"client/src/components/scroll-to-top.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function ScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  return null;\n}","size_bytes":233},"client/src/components/seo/tool-faq.tsx":{"content":"import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Card } from \"@/components/ui/card\";\nimport { HelpCircle, MessageSquare } from \"lucide-react\";\nimport { generateFAQSchema } from \"@/hooks/use-seo\";\nimport { useEffect } from \"react\";\n\nexport interface FAQ {\n  question: string;\n  answer: string;\n  category?: string;\n}\n\ninterface ToolFAQProps {\n  faqs: FAQ[];\n  toolName: string;\n  toolPath: string;\n}\n\nexport function ToolFAQ({ faqs, toolName, toolPath }: ToolFAQProps) {\n  // Add FAQ structured data\n  useEffect(() => {\n    const faqSchema = generateFAQSchema(faqs);\n    \n    // Remove existing FAQ schema for this page\n    const existingScript = document.querySelector(`script[data-faq-path=\"${toolPath}\"]`);\n    if (existingScript) {\n      existingScript.remove();\n    }\n    \n    // Add new FAQ schema\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.setAttribute('data-faq-path', toolPath);\n    script.textContent = JSON.stringify(faqSchema);\n    document.head.appendChild(script);\n    \n    return () => {\n      const scriptToRemove = document.querySelector(`script[data-faq-path=\"${toolPath}\"]`);\n      if (scriptToRemove) {\n        scriptToRemove.remove();\n      }\n    };\n  }, [faqs, toolPath]);\n\n  // Group FAQs by category if categories exist\n  const groupedFAQs = faqs.reduce((acc, faq) => {\n    const category = faq.category || \"General\";\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(faq);\n    return acc;\n  }, {} as Record<string, FAQ[]>);\n\n  const categories = Object.keys(groupedFAQs);\n  const hasCategories = categories.some(cat => cat !== \"General\");\n\n  return (\n    <section className=\"py-12 border-t\" data-testid=\"section-faq\">\n      <article className=\"container mx-auto px-4 max-w-4xl\">\n        <header className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center gap-2 mb-4\">\n            <HelpCircle className=\"w-6 h-6 text-primary\" />\n            <h2 className=\"text-3xl font-bold\" data-testid=\"heading-faq\">\n              Frequently Asked Questions\n            </h2>\n          </div>\n          <p className=\"text-lg text-muted-foreground\">\n            Everything you need to know about our {toolName}\n          </p>\n        </header>\n\n        {hasCategories ? (\n          <div className=\"space-y-8\">\n            {categories.map((category) => (\n              <div key={category}>\n                <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                  <MessageSquare className=\"w-5 h-5 text-primary\" />\n                  {category}\n                </h3>\n                <Accordion type=\"single\" collapsible className=\"space-y-4\">\n                  {groupedFAQs[category].map((faq, index) => (\n                    <AccordionItem\n                      key={index}\n                      value={`${category}-${index}`}\n                      className=\"border rounded-lg px-4\"\n                      data-testid={`faq-item-${category}-${index}`}\n                    >\n                      <AccordionTrigger className=\"text-left hover:no-underline\">\n                        <span className=\"font-medium\">{faq.question}</span>\n                      </AccordionTrigger>\n                      <AccordionContent className=\"text-muted-foreground\">\n                        {faq.answer}\n                      </AccordionContent>\n                    </AccordionItem>\n                  ))}\n                </Accordion>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <Accordion type=\"single\" collapsible className=\"space-y-4\">\n            {faqs.map((faq, index) => (\n              <AccordionItem\n                key={index}\n                value={`faq-${index}`}\n                className=\"border rounded-lg px-4\"\n                data-testid={`faq-item-${index}`}\n              >\n                <AccordionTrigger className=\"text-left hover:no-underline\">\n                  <span className=\"font-medium\">{faq.question}</span>\n                </AccordionTrigger>\n                <AccordionContent className=\"text-muted-foreground\">\n                  {faq.answer}\n                </AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        )}\n\n        <Card className=\"mt-8 p-6 bg-primary/5 border-primary/20\">\n          <div className=\"text-center\">\n            <h3 className=\"font-semibold mb-2\">Still have questions?</h3>\n            <p className=\"text-muted-foreground\">\n              Feel free to explore our tool or check our{\" \"}\n              <a href=\"/privacy-policy\" className=\"text-primary hover:underline\">\n                Privacy Policy\n              </a>{\" \"}\n              to learn more about how we protect your data.\n            </p>\n          </div>\n        </Card>\n      </article>\n    </section>\n  );\n}\n\n// Common FAQs that can be reused across different tools\nexport const commonFAQs = {\n  privacy: {\n    question: \"Is my data safe when using this tool?\",\n    answer: \"Absolutely! All processing happens directly in your browser using JavaScript. Your files never leave your device and are never uploaded to any server. This means complete privacy and security for your sensitive documents.\",\n    category: \"Privacy & Security\"\n  },\n  free: {\n    question: \"Is this tool really free? Are there any hidden costs?\",\n    answer: \"Yes, our tool is 100% free with no hidden costs, subscriptions, or premium tiers. We believe in providing accessible tools for everyone. There are no watermarks, no file limits, and no registration required.\",\n    category: \"Pricing\"\n  },\n  offline: {\n    question: \"Can I use this tool offline?\",\n    answer: \"Once the page is loaded in your browser, the tool works entirely offline. You don't need an active internet connection to process your files, as all the processing happens locally on your device.\",\n    category: \"Technical\"\n  },\n  fileSize: {\n    question: \"What's the maximum file size I can process?\",\n    answer: \"The file size limit depends on your device's available memory since processing happens in your browser. Most modern devices can easily handle files up to 100MB. For larger files, the processing might take a bit longer but will still work.\",\n    category: \"Technical\"\n  },\n  browsers: {\n    question: \"Which browsers are supported?\",\n    answer: \"Our tool works on all modern browsers including Chrome, Firefox, Safari, Edge, and Opera. For the best experience, we recommend using the latest version of your preferred browser.\",\n    category: \"Technical\"\n  },\n  mobileSupport: {\n    question: \"Does this work on mobile devices?\",\n    answer: \"Yes! Our tool is fully responsive and works on smartphones and tablets. However, for processing large files or batch operations, we recommend using a desktop computer for better performance.\",\n    category: \"Technical\"\n  },\n  dataStorage: {\n    question: \"Do you store my files or data?\",\n    answer: \"No, we never store your files or data. Everything is processed in your browser's memory and is automatically cleared when you close the tab or navigate away from the page. Your privacy is our top priority.\",\n    category: \"Privacy & Security\"\n  },\n  quality: {\n    question: \"Will the quality of my files be affected?\",\n    answer: \"We use advanced algorithms to maintain the highest possible quality while processing your files. For tools that involve compression or conversion, you often have control over quality settings to balance between file size and quality.\",\n    category: \"Quality\"\n  },\n  batch: {\n    question: \"Can I process multiple files at once?\",\n    answer: \"Yes, many of our tools support batch processing, allowing you to process multiple files simultaneously. This saves time and makes it easy to handle large projects efficiently.\",\n    category: \"Features\"\n  },\n  speed: {\n    question: \"How fast is the processing?\",\n    answer: \"Processing speed depends on your device's performance and file size. Since everything happens locally in your browser, there's no upload/download time. Most files are processed within seconds.\",\n    category: \"Performance\"\n  }\n};\n\n// Tool-specific FAQ generators\nexport function generatePDFCompressFAQs(): FAQ[] {\n  return [\n    {\n      question: \"How does PDF compression work without losing quality?\",\n      answer: \"Our PDF compressor uses intelligent algorithms to reduce file size by optimizing images, removing redundant data, and streamlining the PDF structure. We carefully balance compression to maintain readability while achieving your target file size.\",\n      category: \"How It Works\"\n    },\n    {\n      question: \"Can I compress PDF to exactly 100KB, 50KB, or any specific size?\",\n      answer: \"Yes! Our unique feature allows you to set specific target sizes from 10KB to 5MB. The algorithm automatically adjusts compression parameters to achieve your exact target size, perfect for meeting upload requirements.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How much can PDF file size be reduced?\",\n      answer: \"Typical reduction ranges from 50% to 95% depending on the original PDF content. PDFs with high-resolution images see the most reduction, while text-only PDFs have less compression potential.\",\n      category: \"Performance\"\n    },\n    {\n      question: \"Can I compress a password-protected PDF?\",\n      answer: \"Currently, you'll need to unlock password-protected PDFs first using our PDF Unlock tool, then compress them. This ensures the security of your documents while giving you full control over the process.\",\n      category: \"Features\"\n    },\n    {\n      question: \"What compression levels are available?\",\n      answer: \"You can choose from multiple target sizes: 10KB, 20KB, 50KB, 100KB, 150KB, 200KB, 300KB, 500KB, 1MB, 2MB, 5MB, or maximum compression. Each level uses different optimization strategies.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Will compressing my PDF affect text searchability?\",\n      answer: \"No, text remains searchable after compression. We preserve the text layer of your PDF, ensuring that you can still search, select, and copy text from the compressed document.\",\n      category: \"Quality\"\n    },\n    {\n      question: \"Can I compress scanned PDFs?\",\n      answer: \"Yes, scanned PDFs can be compressed effectively. Since scanned documents are essentially images, our tool optimizes image quality and resolution to achieve significant size reduction while maintaining legibility.\",\n      category: \"Features\"\n    },\n    {\n      question: \"What's the difference between this and other PDF compressors?\",\n      answer: \"Unlike others, we offer: 1) Specific target size selection, 2) 100% client-side processing for privacy, 3) No file uploads to servers, 4) No watermarks or limits, 5) Works offline once loaded.\",\n      category: \"Comparison\"\n    },\n    {\n      question: \"Can I compress multiple PDFs at once?\",\n      answer: \"Currently, you can process one PDF at a time for optimal compression quality. However, you can quickly process multiple files sequentially without any daily limits or restrictions.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Why choose browser-based compression over desktop software?\",\n      answer: \"Browser-based compression offers instant access without installation, works on any device, updates automatically, and most importantly, keeps your files completely private by processing them locally.\",\n      category: \"Comparison\"\n    },\n    {\n      question: \"How do you compress PDFs for email attachments?\",\n      answer: \"Most email services limit attachments to 25MB. Select a target size like 5MB or 2MB to ensure your PDF fits within email limits while maintaining good quality for viewing.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"What happens to image quality during compression?\",\n      answer: \"Images are intelligently compressed using advanced algorithms. Higher compression levels reduce image resolution more aggressively, but we optimize to maintain text clarity and essential visual details.\",\n      category: \"Quality\"\n    },\n    {\n      question: \"Can I compress PDFs with forms and interactive elements?\",\n      answer: \"Yes, form fields and interactive elements are preserved during compression. The functionality remains intact while the file size is reduced through optimization of other elements.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Is there an API available for bulk compression?\",\n      answer: \"Since our tool runs entirely in the browser for privacy, there's no server API. However, the compression logic is client-side JavaScript, making it possible to integrate into your own applications.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"How long does compression take?\",\n      answer: \"Most PDFs compress in 5-30 seconds depending on size and your device's performance. Since there's no upload/download time, it's often faster than server-based alternatives.\",\n      category: \"Performance\"\n    },\n    commonFAQs.privacy,\n    commonFAQs.free,\n    commonFAQs.fileSize,\n    commonFAQs.browsers,\n    commonFAQs.speed,\n    commonFAQs.offline,\n    commonFAQs.dataStorage,\n    commonFAQs.mobileSupport\n  ];\n}\n\nexport function generatePDFUnlockFAQs(): FAQ[] {\n  return [\n    {\n      question: \"Is it legal to unlock a PDF?\",\n      answer: \"It's legal to unlock PDFs that you own or have permission to modify. This tool is intended for legitimate use cases like recovering access to your own documents or removing passwords from files you have authorization to edit.\",\n      category: \"Legal\"\n    },\n    {\n      question: \"What types of PDF passwords can be removed?\",\n      answer: \"Our tool can remove user passwords (open passwords) that prevent you from opening the PDF, provided you know the password. We do not support cracking or bypassing passwords - you must know the correct password to unlock the file.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Can this tool crack or hack PDF passwords?\",\n      answer: \"No, this is not a password cracking tool. You must know the correct password to unlock the PDF. We provide a legitimate service for removing known passwords from your own documents.\",\n      category: \"Security\"\n    },\n    {\n      question: \"Will unlocking affect the PDF content or quality?\",\n      answer: \"No, unlocking only removes the password protection. The content, formatting, and quality of your PDF remain exactly the same. All text, images, and formatting are preserved.\",\n      category: \"Quality\"\n    },\n    {\n      question: \"Can I re-protect the PDF after unlocking?\",\n      answer: \"Yes, after unlocking, you can use any PDF editor to add new password protection if needed. This gives you the flexibility to change passwords or adjust security settings.\",\n      category: \"Features\"\n    },\n    {\n      question: \"What if I forgot my PDF password?\",\n      answer: \"This tool requires you to know the password to unlock the PDF. If you've forgotten the password, you'll need to contact the document owner or use password recovery methods appropriate for your situation.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Can I unlock PDFs with printing or copying restrictions?\",\n      answer: \"Yes, when you unlock a PDF with the correct password, all restrictions including printing, copying, and editing limitations are removed along with the password protection.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How secure is the unlocking process?\",\n      answer: \"Extremely secure. Your password and PDF never leave your browser. All processing happens locally on your device, ensuring your sensitive documents and passwords remain completely private.\",\n      category: \"Security\"\n    },\n    {\n      question: \"What encryption types are supported?\",\n      answer: \"We support standard PDF encryption methods used by Adobe Acrobat and other PDF creators, including 128-bit and 256-bit AES encryption.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"Can I unlock bank statements or financial documents?\",\n      answer: \"Yes, many banks password-protect statements for security. As long as you know the password (often your account number or date of birth), you can safely unlock them using our tool.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"Why would I need to unlock my own PDF?\",\n      answer: \"Common reasons include: changing forgotten passwords, removing outdated protection from old documents, enabling editing or printing, or simplifying document sharing within your organization.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"Does this work with digitally signed PDFs?\",\n      answer: \"You can unlock digitally signed PDFs, but note that removing password protection may invalidate certain types of digital signatures that depend on document security settings.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Can I unlock PDFs on my phone or tablet?\",\n      answer: \"Yes, our tool works on all devices with a modern web browser. However, for large PDFs, desktop computers typically provide better performance.\",\n      category: \"Compatibility\"\n    },\n    {\n      question: \"What's the maximum PDF size I can unlock?\",\n      answer: \"The size limit depends on your device's available memory. Most devices can handle PDFs up to 100MB easily. Larger files may take longer but will still work.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"How is this different from PDF password removers?\",\n      answer: \"Our tool is unique because: 1) It's 100% browser-based, 2) No file uploads to servers, 3) Requires knowing the password (ethical approach), 4) Instant processing, 5) Completely free with no limits.\",\n      category: \"Comparison\"\n    },\n    commonFAQs.privacy,\n    commonFAQs.dataStorage,\n    commonFAQs.free,\n    commonFAQs.browsers,\n    commonFAQs.offline,\n    commonFAQs.speed,\n    commonFAQs.mobileSupport\n  ];\n}\n\nexport function generateJPGtoPDFFAQs(): FAQ[] {\n  return [\n    {\n      question: \"What image formats are supported besides JPG?\",\n      answer: \"Our converter supports all major image formats including JPG, PNG, WebP, GIF, BMP, and TIFF. You can even mix different formats in a single PDF conversion.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Can I arrange the order of images in the PDF?\",\n      answer: \"Yes, you can arrange images in any order before conversion. Simply drag and drop to reorder, or remove images you don't want to include in the final PDF.\",\n      category: \"Features\"\n    },\n    {\n      question: \"What page sizes and orientations are available?\",\n      answer: \"We offer standard page sizes (A4, Letter, Legal, A3, A5) in both portrait and landscape orientations. You can also choose different layout options like multiple images per page.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How is image quality preserved during conversion?\",\n      answer: \"We offer quality settings from low to maximum. Higher quality settings preserve original image detail but result in larger file sizes. You can balance quality and file size based on your needs.\",\n      category: \"Quality\"\n    },\n    {\n      question: \"Can I add multiple images to a single page?\",\n      answer: \"Yes, you can choose layouts with 1, 2, 4, or 6 images per page. This is perfect for creating photo albums, contact sheets, or saving paper when printing.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How do I convert photos from my phone to PDF?\",\n      answer: \"Simply open our tool on your phone's browser, tap to select photos from your gallery, arrange them as needed, and convert. The PDF downloads directly to your phone.\",\n      category: \"Mobile\"\n    },\n    {\n      question: \"What's the maximum number of images I can convert at once?\",\n      answer: \"There's no hard limit on the number of images. You can convert hundreds of images at once, though processing time increases with more images. Your device's memory is the only constraint.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"Can I create a photo album or portfolio PDF?\",\n      answer: \"Absolutely! Our tool is perfect for creating photo albums and portfolios. Choose high quality settings, arrange photos in order, and select an appropriate layout for professional-looking results.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"Will EXIF data and metadata be preserved?\",\n      answer: \"Image metadata is not transferred to the PDF for privacy reasons. The PDF will contain the visual content only, without camera information, location data, or other metadata.\",\n      category: \"Privacy\"\n    },\n    {\n      question: \"Can I add margins or borders to images?\",\n      answer: \"Images are automatically centered on pages with appropriate margins. While you can't customize margins directly, different page sizes and layouts provide various spacing options.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How do I convert scanned documents to PDF?\",\n      answer: \"If you have scanned document images (JPG/PNG), simply upload them in the correct order. Choose 'one per page' layout and high quality for best readability of text in scanned documents.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"What's the best setting for printing photos?\",\n      answer: \"For printing, use maximum quality settings and choose the page size that matches your printer paper (usually A4 or Letter). This ensures photos print at the highest possible resolution.\",\n      category: \"Printing\"\n    },\n    {\n      question: \"Can I convert screenshots to PDF?\",\n      answer: \"Yes, screenshots in PNG or JPG format convert perfectly to PDF. This is useful for creating documentation, tutorials, or compiling multiple screenshots into a single document.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"How does this compare to phone scanning apps?\",\n      answer: \"Unlike scanning apps, we don't require app installation, don't access your phone's data, process everything locally for privacy, and work on any device with a browser. Plus, it's completely free.\",\n      category: \"Comparison\"\n    },\n    {\n      question: \"Can I compress the PDF after conversion?\",\n      answer: \"Yes! After creating your PDF, you can use our PDF Compressor tool to reduce file size if needed. This two-step process gives you maximum control over quality and size.\",\n      category: \"Features\"\n    },\n    commonFAQs.privacy,\n    commonFAQs.batch,\n    commonFAQs.free,\n    commonFAQs.mobileSupport,\n    commonFAQs.speed,\n    commonFAQs.offline,\n    commonFAQs.browsers,\n    commonFAQs.dataStorage\n  ];\n}\n\nexport function generateQRGeneratorFAQs(): FAQ[] {\n  return [\n    {\n      question: \"What types of data can I encode in a QR code?\",\n      answer: \"You can encode any text data including URLs, plain text, email addresses, phone numbers, WiFi credentials, vCards, SMS messages, and more. The QR code will work with any QR scanner app.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Can I customize the QR code colors?\",\n      answer: \"Yes, you can customize both the foreground (pattern) and background colors. However, ensure good contrast for reliable scanning - dark patterns on light backgrounds work best.\",\n      category: \"Customization\"\n    },\n    {\n      question: \"What sizes are available for QR codes?\",\n      answer: \"We offer three sizes: Small (200x200px), Medium (300x300px), and Large (400x400px). All sizes maintain the same data capacity and scanning reliability.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How much data can a QR code hold?\",\n      answer: \"QR codes can hold up to 4,296 alphanumeric characters or 2,953 bytes of binary data. For URLs, we recommend keeping them under 1,000 characters for best scanning performance.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"Do QR codes expire?\",\n      answer: \"The QR codes themselves never expire. However, if you encode a URL that later becomes invalid, the QR code will still scan but lead to a broken link.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"How do I create a WiFi QR code?\",\n      answer: \"Enter your WiFi credentials in this format: WIFI:T:WPA;S:NetworkName;P:Password;; Replace NetworkName and Password with your actual credentials. Guests can then scan to connect automatically.\",\n      category: \"How To\"\n    },\n    {\n      question: \"Can I track QR code scans?\",\n      answer: \"Our tool doesn't track scans directly. For tracking, encode a URL that goes through a URL shortener or analytics service that provides scan statistics.\",\n      category: \"Analytics\"\n    },\n    {\n      question: \"What's the best format for business cards?\",\n      answer: \"For business cards, use Medium size (300x300px) with high contrast colors. Encode a vCard or link to your digital business card for maximum information in minimal space.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"Can QR codes work when printed small?\",\n      answer: \"Yes, but maintain a minimum size of 2x2 cm (0.8x0.8 inches) for reliable scanning. The more data encoded, the larger the QR code should be for easy scanning.\",\n      category: \"Printing\"\n    },\n    {\n      question: \"What's error correction in QR codes?\",\n      answer: \"Error correction allows QR codes to be scanned even when partially damaged or obscured. Our generator uses Medium error correction (15% damage tolerance) for optimal balance.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"Can I create dynamic QR codes?\",\n      answer: \"We generate static QR codes where the data is fixed. For dynamic QR codes (where you can change the destination), encode a redirect URL that you control.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How do I test if my QR code works?\",\n      answer: \"Test with multiple devices and QR scanner apps. Most phone cameras now have built-in QR scanning. Ensure good lighting and hold the camera steady for best results.\",\n      category: \"Testing\"\n    },\n    {\n      question: \"Can I add a logo to my QR code?\",\n      answer: \"Currently, we focus on clean, reliable QR codes without logos. Adding logos can reduce scan reliability. For branding, consider placing your logo near the QR code instead.\",\n      category: \"Customization\"\n    },\n    {\n      question: \"What's the difference between QR codes and barcodes?\",\n      answer: \"QR codes store data in 2D (both horizontally and vertically), holding much more information than 1D barcodes. QR codes can store URLs, text, and other data types, while barcodes typically store product numbers.\",\n      category: \"Comparison\"\n    },\n    {\n      question: \"Can I use generated QR codes commercially?\",\n      answer: \"Yes, all QR codes generated with our tool are free to use for any purpose, including commercial use, marketing campaigns, and products. There are no licensing restrictions or watermarks.\",\n      category: \"Legal\"\n    },\n    commonFAQs.privacy,\n    commonFAQs.free,\n    commonFAQs.offline,\n    commonFAQs.browsers,\n    commonFAQs.speed,\n    commonFAQs.dataStorage,\n    commonFAQs.mobileSupport\n  ];\n}\n\nexport function generatePasswordGeneratorFAQs(): FAQ[] {\n  return [\n    {\n      question: \"How random are the generated passwords?\",\n      answer: \"We use cryptographically secure random number generation (crypto.getRandomValues) to ensure truly random, unpredictable passwords that meet the highest security standards.\",\n      category: \"Security\"\n    },\n    {\n      question: \"What makes a password strong?\",\n      answer: \"Strong passwords are long (12+ characters), use a mix of uppercase, lowercase, numbers, and symbols, avoid common patterns, and are unique for each account. Our strength meter evaluates these factors.\",\n      category: \"Security\"\n    },\n    {\n      question: \"What's the ideal password length?\",\n      answer: \"Security experts recommend at least 12-16 characters for important accounts. Longer passwords (20+ characters) provide even better security. Length is more important than complexity for password strength.\",\n      category: \"Security\"\n    },\n    {\n      question: \"Can I customize password requirements?\",\n      answer: \"Yes, you can adjust length (4-50 characters) and choose which character types to include: uppercase, lowercase, numbers, and symbols. This helps meet specific website or application requirements.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Is it safe to generate passwords online?\",\n      answer: \"Yes, our generator is completely safe because it runs entirely in your browser. No passwords are sent to any server, stored, or logged. Each password is generated locally on your device.\",\n      category: \"Security\"\n    },\n    {\n      question: \"Should I use the same password for multiple accounts?\",\n      answer: \"Never use the same password for multiple accounts. If one account is compromised, all accounts with the same password become vulnerable. Generate unique passwords for each account.\",\n      category: \"Security\"\n    },\n    {\n      question: \"How do I create memorable but secure passwords?\",\n      answer: \"Use passphrases: combine 4-6 random words with numbers and symbols. For example: 'Coffee#Laptop7$Mountain!Beach'. These are easier to remember than random characters but equally secure.\",\n      category: \"Tips\"\n    },\n    {\n      question: \"What's two-factor authentication and why use it?\",\n      answer: \"Two-factor authentication (2FA) adds an extra security layer beyond passwords. Even if your password is compromised, attackers can't access your account without the second factor (usually a phone app or SMS code).\",\n      category: \"Security\"\n    },\n    {\n      question: \"Can password generators be hacked?\",\n      answer: \"Our generator cannot be hacked to reveal generated passwords because nothing is stored or transmitted. Each password exists only in your browser's memory and disappears when you navigate away.\",\n      category: \"Security\"\n    },\n    {\n      question: \"Why avoid dictionary words in passwords?\",\n      answer: \"Hackers use dictionary attacks that try common words and phrases. Random character combinations are exponentially harder to crack than dictionary words, even with substitutions like @ for 'a'.\",\n      category: \"Security\"\n    },\n    {\n      question: \"How should I store my generated passwords?\",\n      answer: \"We recommend using a reputable password manager like Bitwarden, 1Password, or LastPass. Never write passwords in plain text files or sticky notes. Password managers encrypt your data for security.\",\n      category: \"Security\"\n    },\n    {\n      question: \"How often should I change my passwords?\",\n      answer: \"Change passwords immediately if there's a security breach. Otherwise, security experts now recommend using strong, unique passwords rather than frequent changes, unless required by your organization.\",\n      category: \"Security\"\n    },\n    {\n      question: \"What are the most common password mistakes?\",\n      answer: \"Common mistakes include: using personal information (birthdays, names), simple patterns (123456, qwerty), reusing passwords, short passwords (<8 characters), and writing passwords in unsecure places.\",\n      category: \"Tips\"\n    },\n    {\n      question: \"Can I generate passwords for specific requirements?\",\n      answer: \"Yes! Adjust the settings to meet specific requirements. For example, some sites don't allow symbols - just uncheck that option. Need exactly 8 characters? Set the slider to 8.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How does the password strength meter work?\",\n      answer: \"Our strength meter analyzes length, character variety, and patterns. It checks for uppercase, lowercase, numbers, symbols, and common patterns to give you real-time feedback on password security.\",\n      category: \"Features\"\n    },\n    commonFAQs.privacy,\n    commonFAQs.free,\n    commonFAQs.offline,\n    commonFAQs.browsers,\n    commonFAQs.mobileSupport,\n    commonFAQs.speed\n  ];\n}\n\nexport function generateWordCounterFAQs(): FAQ[] {\n  return [\n    {\n      question: \"What text statistics are calculated?\",\n      answer: \"We calculate words, characters (with and without spaces), sentences, paragraphs, and estimated reading time. These metrics help you understand and optimize your content for different purposes.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How is reading time calculated?\",\n      answer: \"Reading time is estimated based on an average reading speed of 200 words per minute. This is a standard rate for general comprehension, though actual speed varies by reader and content complexity.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"Can I count words in different languages?\",\n      answer: \"Yes, our word counter works with any language that uses space-separated words. For languages like Chinese or Japanese, character count may be more relevant than word count.\",\n      category: \"Features\"\n    },\n    {\n      question: \"Does it count words in real-time?\",\n      answer: \"Yes, all statistics update instantly as you type or paste text. This gives you immediate feedback without needing to click any buttons or wait for processing.\",\n      category: \"Features\"\n    },\n    {\n      question: \"What's the maximum text length supported?\",\n      answer: \"There's no hard limit on text length. The tool can handle documents with hundreds of thousands of words, though very large texts might cause slight delays in real-time counting.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"How accurate is the word count?\",\n      answer: \"Our word counter is highly accurate, using advanced algorithms to properly identify word boundaries, handle hyphenated words, and distinguish between actual words and formatting.\",\n      category: \"Accuracy\"\n    },\n    {\n      question: \"Can I check character limits for social media?\",\n      answer: \"Yes! We have preset limits for Twitter (280), LinkedIn (2200), SMS (160), and meta descriptions (500). You can also set custom character limits for any platform.\",\n      category: \"Features\"\n    },\n    {\n      question: \"What's the difference between characters with and without spaces?\",\n      answer: \"'Characters with spaces' includes all characters including spaces and line breaks. 'Without spaces' counts only letters, numbers, and punctuation - useful for platforms that don't count spaces.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"How does sentence counting work?\",\n      answer: \"Sentences are identified by ending punctuation (periods, exclamation marks, question marks). The algorithm handles abbreviations and decimal numbers intelligently to avoid false sentence breaks.\",\n      category: \"Technical\"\n    },\n    {\n      question: \"Can I use this for academic papers?\",\n      answer: \"Absolutely! It's perfect for essays, research papers, and assignments with specific word count requirements. The tool helps you meet minimum or maximum word limits accurately.\",\n      category: \"Use Cases\"\n    },\n    {\n      question: \"Is this tool good for SEO content?\",\n      answer: \"Yes! SEO experts recommend 1,500+ words for comprehensive articles. Our tool helps you reach optimal content length while tracking readability through sentence and paragraph counts.\",\n      category: \"SEO\"\n    },\n    {\n      question: \"Can I count words in copied text from PDFs or websites?\",\n      answer: \"Yes, simply copy text from any source and paste it into our tool. Formatting is automatically cleaned up, giving you accurate counts regardless of the source.\",\n      category: \"Features\"\n    },\n    {\n      question: \"How do I write to a specific word count?\",\n      answer: \"Type or paste your content and watch the real-time counter. The tool shows your progress, making it easy to add or trim content to reach your target word count.\",\n      category: \"Tips\"\n    },\n    {\n      question: \"What's the ideal blog post length?\",\n      answer: \"For SEO, aim for 1,500-2,500 words for comprehensive coverage. However, quality matters more than quantity. Use our tool to ensure you're providing enough detail without unnecessary padding.\",\n      category: \"SEO\"\n    },\n    {\n      question: \"Can I export word count statistics?\",\n      answer: \"You can export your text with statistics to a text file. This includes all counts and the original text, useful for documentation or record-keeping.\",\n      category: \"Features\"\n    },\n    commonFAQs.privacy,\n    commonFAQs.free,\n    commonFAQs.offline,\n    commonFAQs.mobileSupport,\n    commonFAQs.browsers,\n    commonFAQs.speed,\n    commonFAQs.dataStorage\n  ];\n}","size_bytes":36783},"client/src/components/seo/tool-features.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Check, Zap, Shield, Globe, RefreshCw, Clock, Sparkles, Server } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Feature {\n  icon: React.ElementType;\n  title: string;\n  description: string;\n  highlight?: boolean;\n}\n\ninterface WhyUseSectionProps {\n  toolName: string;\n  benefits: string[];\n  features: Feature[];\n}\n\nexport function WhyUseSection({ toolName, benefits, features }: WhyUseSectionProps) {\n  return (\n    <section className=\"py-12 border-t\" data-testid=\"section-why-use\">\n      <article className=\"container mx-auto px-4 max-w-6xl\">\n        <header>\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"heading-why-use\">\n            Why Choose Our {toolName}?\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Experience the perfect combination of security, speed, and simplicity\n          </p>\n        </header>\n        \n        <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n          <div>\n            <h3 className=\"text-xl font-semibold mb-4\">Key Benefits</h3>\n            <ul className=\"space-y-3\">\n              {benefits.map((benefit, index) => (\n                <li key={index} className=\"flex items-start gap-3\" data-testid={`benefit-${index}`}>\n                  <Check className=\"w-5 h-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                  <span className=\"text-muted-foreground\">{benefit}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-xl font-semibold mb-4\">Core Features</h3>\n            <div className=\"grid gap-4\">\n              {features.map((feature, index) => {\n                const Icon = feature.icon;\n                return (\n                  <Card \n                    key={index} \n                    className={cn(\n                      \"p-4 transition-all hover:shadow-md\",\n                      feature.highlight && \"border-primary\"\n                    )}\n                    data-testid={`feature-card-${index}`}\n                  >\n                    <div className=\"flex gap-3\">\n                      <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center\">\n                        <Icon className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-1\">{feature.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                      </div>\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </article>\n    </section>\n  );\n}\n\ninterface UseCase {\n  title: string;\n  description: string;\n  icon: React.ElementType;\n  example?: string;\n}\n\ninterface UseCasesSectionProps {\n  useCases: UseCase[];\n}\n\nexport function UseCasesSection({ useCases }: UseCasesSectionProps) {\n  return (\n    <section className=\"py-12 bg-muted/30\" data-testid=\"section-use-cases\">\n      <article className=\"container mx-auto px-4 max-w-6xl\">\n        <header>\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"heading-use-cases\">\n            Real-World Use Cases\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Discover how professionals use our tools to streamline their workflow\n          </p>\n        </header>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {useCases.map((useCase, index) => {\n            const Icon = useCase.icon;\n            return (\n              <Card key={index} className=\"p-6\" data-testid={`use-case-${index}`}>\n                <div className=\"w-12 h-12 rounded-lg bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center mb-4\">\n                  <Icon className=\"w-6 h-6 text-primary\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">{useCase.title}</h3>\n                <p className=\"text-muted-foreground mb-3\">{useCase.description}</p>\n                {useCase.example && (\n                  <p className=\"text-sm text-primary italic\">Example: {useCase.example}</p>\n                )}\n              </Card>\n            );\n          })}\n        </div>\n      </article>\n    </section>\n  );\n}\n\ninterface ComparisonItem {\n  feature: string;\n  ourTool: boolean | string;\n  others: boolean | string;\n  highlight?: boolean;\n}\n\ninterface ComparisonSectionProps {\n  toolName: string;\n  comparisons: ComparisonItem[];\n}\n\nexport function ComparisonSection({ toolName, comparisons }: ComparisonSectionProps) {\n  return (\n    <section className=\"py-12\" data-testid=\"section-comparison\">\n      <article className=\"container mx-auto px-4 max-w-6xl\">\n        <header>\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"heading-comparison\">\n            {toolName} vs. Traditional Tools\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            See why privacy-first, browser-based processing is the future\n          </p>\n        </header>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full border-collapse\">\n            <thead>\n              <tr>\n                <th className=\"text-left p-4 border-b font-semibold\">Feature</th>\n                <th className=\"text-center p-4 border-b font-semibold text-primary\">\n                  Our {toolName}\n                </th>\n                <th className=\"text-center p-4 border-b font-semibold text-muted-foreground\">\n                  Traditional Tools\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {comparisons.map((item, index) => (\n                <tr \n                  key={index} \n                  className={cn(\n                    \"hover:bg-muted/50 transition-colors\",\n                    item.highlight && \"bg-primary/5\"\n                  )}\n                  data-testid={`comparison-row-${index}`}\n                >\n                  <td className=\"p-4 border-b\">{item.feature}</td>\n                  <td className=\"text-center p-4 border-b\">\n                    {typeof item.ourTool === 'boolean' ? (\n                      item.ourTool ? (\n                        <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                      ) : (\n                        <span className=\"text-muted-foreground\">—</span>\n                      )\n                    ) : (\n                      <span className=\"text-primary font-medium\">{item.ourTool}</span>\n                    )}\n                  </td>\n                  <td className=\"text-center p-4 border-b\">\n                    {typeof item.others === 'boolean' ? (\n                      item.others ? (\n                        <Check className=\"w-5 h-5 text-green-500 mx-auto\" />\n                      ) : (\n                        <span className=\"text-red-500\">✕</span>\n                      )\n                    ) : (\n                      <span className=\"text-muted-foreground\">{item.others}</span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        <div className=\"mt-8 p-6 bg-primary/5 rounded-lg border border-primary/20\">\n          <div className=\"flex items-start gap-3\">\n            <Shield className=\"w-5 h-5 text-primary mt-0.5\" />\n            <div>\n              <h3 className=\"font-semibold mb-2\">Privacy First, Always</h3>\n              <p className=\"text-muted-foreground\">\n                Unlike traditional online tools that upload your files to their servers, \n                our {toolName} processes everything locally in your browser. Your sensitive \n                data never leaves your device, ensuring complete privacy and security.\n              </p>\n            </div>\n          </div>\n        </div>\n      </article>\n    </section>\n  );\n}\n\ninterface HowItWorksStep {\n  number: number;\n  title: string;\n  description: string;\n  icon?: React.ElementType;\n}\n\ninterface HowItWorksSectionProps {\n  steps: HowItWorksStep[];\n  toolName: string;\n}\n\nexport function HowItWorksSection({ steps, toolName }: HowItWorksSectionProps) {\n  return (\n    <section className=\"py-12 bg-muted/30\" data-testid=\"section-how-it-works\">\n      <article className=\"container mx-auto px-4 max-w-6xl\">\n        <header>\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"heading-how-it-works\">\n            How Our {toolName} Works\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Simple, secure, and straightforward - get results in seconds\n          </p>\n        </header>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {steps.map((step, index) => {\n            const Icon = step.icon;\n            return (\n              <div \n                key={index} \n                className=\"relative\"\n                data-testid={`step-${step.number}`}\n              >\n                {index < steps.length - 1 && (\n                  <div className=\"hidden lg:block absolute top-8 left-full w-full h-0.5 bg-gradient-to-r from-primary/20 to-transparent z-0\" />\n                )}\n                \n                <Card className=\"p-6 relative z-10 hover:shadow-md transition-shadow\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold flex-shrink-0\">\n                      {step.number}\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">{step.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n                      {Icon && (\n                        <div className=\"mt-3\">\n                          <Icon className=\"w-5 h-5 text-primary\" />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"mt-8 text-center\">\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-green-500/10 text-green-600 dark:text-green-400 rounded-full\">\n            <Zap className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Processing time: Less than 5 seconds</span>\n          </div>\n        </div>\n      </article>\n    </section>\n  );\n}\n\n// Pre-defined common features for reuse across tools\nexport const commonFeatures = {\n  privacy: {\n    icon: Shield,\n    title: \"100% Privacy Guaranteed\",\n    description: \"All processing happens in your browser. Files never uploaded to servers.\",\n    highlight: true\n  },\n  speed: {\n    icon: Zap,\n    title: \"Lightning Fast\",\n    description: \"Instant processing with no upload delays or server wait times.\"\n  },\n  free: {\n    icon: Sparkles,\n    title: \"Completely Free\",\n    description: \"No limits, no watermarks, no subscriptions. Free forever.\"\n  },\n  noInstall: {\n    icon: Globe,\n    title: \"No Installation\",\n    description: \"Works directly in your browser. No software to download or install.\"\n  },\n  offline: {\n    icon: Server,\n    title: \"Works Offline\",\n    description: \"Once loaded, works without internet connection.\"\n  },\n  instant: {\n    icon: Clock,\n    title: \"Instant Results\",\n    description: \"Get your processed files immediately, no waiting.\"\n  },\n  batch: {\n    icon: RefreshCw,\n    title: \"Batch Processing\",\n    description: \"Process multiple files at once for efficiency.\"\n  }\n};","size_bytes":11746},"client/src/lib/password-enhancements.ts":{"content":"// Smart password generation enhancements\n// Memorable passwords, passphrases, and use-case suggestions\n\n// Common word lists for passphrase generation (client-side)\nconst ADJECTIVES = [\n  'ancient', 'brave', 'clever', 'daring', 'elegant', 'fierce', 'golden', 'happy',\n  'infinite', 'jolly', 'keen', 'lively', 'mighty', 'noble', 'orange', 'peaceful',\n  'quiet', 'rapid', 'silver', 'timeless', 'unique', 'valiant', 'wise', 'yellow',\n  'zealous', 'bright', 'cosmic', 'dynamic', 'eternal', 'frozen', 'gentle', 'hidden',\n  'crystal', 'electric', 'mystic', 'ocean', 'thunder', 'shadow', 'lunar', 'solar'\n];\n\nconst NOUNS = [\n  'anchor', 'bridge', 'castle', 'dragon', 'eagle', 'forest', 'galaxy', 'harbor',\n  'island', 'jungle', 'knight', 'lighthouse', 'mountain', 'nebula', 'ocean', 'phoenix',\n  'quest', 'river', 'sunset', 'tower', 'universe', 'valley', 'warrior', 'zenith',\n  'arrow', 'beacon', 'compass', 'diamond', 'ember', 'falcon', 'glacier', 'horizon',\n  'comet', 'storm', 'star', 'moon', 'thunder', 'crystal', 'phoenix', 'titan'\n];\n\nconst VERBS = [\n  'dance', 'explore', 'fly', 'guard', 'hunt', 'inspire', 'jump', 'kindle',\n  'launch', 'master', 'navigate', 'overcome', 'protect', 'quest', 'rescue', 'soar',\n  'travel', 'unite', 'venture', 'wander', 'excel', 'yield', 'zoom', 'achieve',\n  'believe', 'create', 'discover', 'embrace', 'flourish', 'gather', 'harness'\n];\n\n// Use case specific configurations\nexport interface PasswordUseCase {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  recommendations: {\n    minLength: number;\n    includeUppercase: boolean;\n    includeLowercase: boolean;\n    includeNumbers: boolean;\n    includeSymbols: boolean;\n    memorableOption?: boolean;\n  };\n  tips: string[];\n}\n\nexport const USE_CASES: PasswordUseCase[] = [\n  {\n    id: 'email',\n    name: 'Email Account',\n    description: 'For personal or work email accounts',\n    icon: 'Mail',\n    recommendations: {\n      minLength: 12,\n      includeUppercase: true,\n      includeLowercase: true,\n      includeNumbers: true,\n      includeSymbols: false,\n      memorableOption: true\n    },\n    tips: [\n      'Use a unique password for each email account',\n      'Consider using a passphrase for easier memorization',\n      'Enable two-factor authentication when available'\n    ]\n  },\n  {\n    id: 'banking',\n    name: 'Banking & Finance',\n    description: 'For online banking and financial services',\n    icon: 'CreditCard',\n    recommendations: {\n      minLength: 16,\n      includeUppercase: true,\n      includeLowercase: true,\n      includeNumbers: true,\n      includeSymbols: true,\n      memorableOption: false\n    },\n    tips: [\n      'Use maximum security for financial accounts',\n      'Never reuse banking passwords elsewhere',\n      'Store securely in a password manager',\n      'Change regularly (every 3-6 months)'\n    ]\n  },\n  {\n    id: 'social',\n    name: 'Social Media',\n    description: 'For social networking accounts',\n    icon: 'Users',\n    recommendations: {\n      minLength: 10,\n      includeUppercase: true,\n      includeLowercase: true,\n      includeNumbers: true,\n      includeSymbols: false,\n      memorableOption: true\n    },\n    tips: [\n      'Different password for each platform',\n      'Be aware of account recovery options',\n      'Review privacy settings regularly'\n    ]\n  },\n  {\n    id: 'work',\n    name: 'Work/Corporate',\n    description: 'For professional and corporate accounts',\n    icon: 'Briefcase',\n    recommendations: {\n      minLength: 14,\n      includeUppercase: true,\n      includeLowercase: true,\n      includeNumbers: true,\n      includeSymbols: true,\n      memorableOption: false\n    },\n    tips: [\n      'Follow company password policies',\n      'Never share work passwords',\n      'Use VPN when accessing remotely'\n    ]\n  },\n  {\n    id: 'shopping',\n    name: 'Online Shopping',\n    description: 'For e-commerce and shopping sites',\n    icon: 'ShoppingCart',\n    recommendations: {\n      minLength: 12,\n      includeUppercase: true,\n      includeLowercase: true,\n      includeNumbers: true,\n      includeSymbols: false,\n      memorableOption: true\n    },\n    tips: [\n      'Use unique passwords for sites with payment info',\n      'Consider using virtual credit cards',\n      'Check for secure connection (HTTPS)'\n    ]\n  },\n  {\n    id: 'gaming',\n    name: 'Gaming',\n    description: 'For gaming accounts and platforms',\n    icon: 'Gamepad2',\n    recommendations: {\n      minLength: 12,\n      includeUppercase: true,\n      includeLowercase: true,\n      includeNumbers: true,\n      includeSymbols: false,\n      memorableOption: true\n    },\n    tips: [\n      'Protect accounts with valuable items/progress',\n      'Enable Steam Guard or similar features',\n      'Be cautious of phishing attempts'\n    ]\n  },\n  {\n    id: 'sensitive',\n    name: 'Highly Sensitive',\n    description: 'For cryptocurrency, medical, or government services',\n    icon: 'ShieldCheck',\n    recommendations: {\n      minLength: 20,\n      includeUppercase: true,\n      includeLowercase: true,\n      includeNumbers: true,\n      includeSymbols: true,\n      memorableOption: false\n    },\n    tips: [\n      'Use maximum possible security',\n      'Consider hardware security keys',\n      'Enable all available security features',\n      'Use a reputable password manager'\n    ]\n  }\n];\n\n// Generate a memorable passphrase\nexport function generatePassphrase(wordCount: number = 4, includeNumbers: boolean = true): string {\n  const words: string[] = [];\n  \n  // Pattern: Adjective + Noun + Verb + Noun\n  if (wordCount >= 4) {\n    words.push(ADJECTIVES[Math.floor(Math.random() * ADJECTIVES.length)]);\n    words.push(NOUNS[Math.floor(Math.random() * NOUNS.length)]);\n    words.push(VERBS[Math.floor(Math.random() * VERBS.length)]);\n    words.push(NOUNS[Math.floor(Math.random() * NOUNS.length)]);\n  } else if (wordCount === 3) {\n    words.push(ADJECTIVES[Math.floor(Math.random() * ADJECTIVES.length)]);\n    words.push(NOUNS[Math.floor(Math.random() * NOUNS.length)]);\n    words.push(VERBS[Math.floor(Math.random() * VERBS.length)]);\n  } else {\n    for (let i = 0; i < wordCount; i++) {\n      const lists = [ADJECTIVES, NOUNS, VERBS];\n      const list = lists[Math.floor(Math.random() * lists.length)];\n      words.push(list[Math.floor(Math.random() * list.length)]);\n    }\n  }\n  \n  // Capitalize first letter of each word\n  const capitalizedWords = words.map(word => \n    word.charAt(0).toUpperCase() + word.slice(1)\n  );\n  \n  // Add numbers if requested\n  if (includeNumbers) {\n    const randomNum = Math.floor(Math.random() * 100);\n    capitalizedWords.push(randomNum.toString());\n  }\n  \n  // Join with hyphens for readability\n  return capitalizedWords.join('-');\n}\n\n// Generate a pronounceable password\nexport function generatePronounceable(length: number = 12): string {\n  const consonants = 'bcdfghjklmnpqrstvwxyz';\n  const vowels = 'aeiou';\n  const numbers = '0123456789';\n  let password = '';\n  \n  // Start with a capital letter\n  password += consonants.charAt(Math.floor(Math.random() * consonants.length)).toUpperCase();\n  \n  // Alternate between consonants and vowels for pronounceability\n  for (let i = 1; i < length - 2; i++) {\n    if (i % 2 === 0) {\n      password += consonants.charAt(Math.floor(Math.random() * consonants.length));\n    } else {\n      password += vowels.charAt(Math.floor(Math.random() * vowels.length));\n    }\n  }\n  \n  // Add two numbers at the end\n  password += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  password += numbers.charAt(Math.floor(Math.random() * numbers.length));\n  \n  return password;\n}\n\n// Generate password patterns for memorization\nexport function generatePattern(baseWord: string): string[] {\n  const patterns: string[] = [];\n  \n  // Pattern 1: Leetspeak\n  const leetspeak = baseWord\n    .replace(/a/gi, '4')\n    .replace(/e/gi, '3')\n    .replace(/i/gi, '1')\n    .replace(/o/gi, '0')\n    .replace(/s/gi, '5');\n  patterns.push(leetspeak + '!');\n  \n  // Pattern 2: First letter caps + year\n  const currentYear = new Date().getFullYear();\n  patterns.push(baseWord.charAt(0).toUpperCase() + baseWord.slice(1) + currentYear);\n  \n  // Pattern 3: Reverse + special char\n  const reversed = baseWord.split('').reverse().join('');\n  patterns.push(reversed + '@123');\n  \n  // Pattern 4: Alternating caps\n  const alternating = baseWord.split('').map((char, i) => \n    i % 2 === 0 ? char.toUpperCase() : char.toLowerCase()\n  ).join('');\n  patterns.push(alternating + '#99');\n  \n  return patterns;\n}\n\n// Password strength explanation\nexport function explainStrength(password: string): {\n  score: number;\n  level: 'weak' | 'medium' | 'strong' | 'very-strong';\n  feedback: string[];\n  positives: string[];\n  suggestions: string[];\n} {\n  let score = 0;\n  const feedback: string[] = [];\n  const positives: string[] = [];\n  const suggestions: string[] = [];\n  \n  // Length scoring\n  if (password.length >= 20) {\n    score += 3;\n    positives.push('Excellent length (20+ characters)');\n  } else if (password.length >= 16) {\n    score += 2;\n    positives.push('Great length (16+ characters)');\n  } else if (password.length >= 12) {\n    score += 1;\n    positives.push('Good length (12+ characters)');\n  } else if (password.length >= 8) {\n    feedback.push('Minimum acceptable length');\n  } else {\n    feedback.push('Too short (less than 8 characters)');\n    suggestions.push('Increase length to at least 12 characters');\n  }\n  \n  // Character variety\n  const hasUpper = /[A-Z]/.test(password);\n  const hasLower = /[a-z]/.test(password);\n  const hasNumber = /[0-9]/.test(password);\n  const hasSymbol = /[!@#$%^&*()_+\\-=\\[\\]{}|;:,.<>?]/.test(password);\n  \n  if (hasUpper) {\n    score += 1;\n    positives.push('Contains uppercase letters');\n  } else {\n    suggestions.push('Add uppercase letters');\n  }\n  \n  if (hasLower) {\n    score += 1;\n    positives.push('Contains lowercase letters');\n  } else {\n    suggestions.push('Add lowercase letters');\n  }\n  \n  if (hasNumber) {\n    score += 1;\n    positives.push('Contains numbers');\n  } else {\n    suggestions.push('Add numbers');\n  }\n  \n  if (hasSymbol) {\n    score += 2;\n    positives.push('Contains special characters');\n  } else {\n    suggestions.push('Add special characters for extra security');\n  }\n  \n  // Pattern detection\n  if (/(.)\\1{2,}/.test(password)) {\n    feedback.push('Contains repeated characters');\n    suggestions.push('Avoid repeating characters');\n    score -= 1;\n  }\n  \n  if (/^[A-Z][a-z]+[0-9]+$/.test(password)) {\n    feedback.push('Follows a common pattern');\n    suggestions.push('Avoid predictable patterns');\n    score -= 1;\n  }\n  \n  if (/123|abc|qwerty|password/i.test(password)) {\n    feedback.push('Contains common sequences');\n    suggestions.push('Avoid common words or sequences');\n    score -= 2;\n  }\n  \n  // Determine level\n  let level: 'weak' | 'medium' | 'strong' | 'very-strong';\n  if (score >= 8) level = 'very-strong';\n  else if (score >= 6) level = 'strong';\n  else if (score >= 4) level = 'medium';\n  else level = 'weak';\n  \n  return {\n    score,\n    level,\n    feedback,\n    positives,\n    suggestions\n  };\n}\n\n// Memory techniques for passwords\nexport function getMemoryTips(password: string): string[] {\n  const tips: string[] = [];\n  \n  // Check if it's a passphrase\n  if (password.includes('-') || password.includes(' ')) {\n    tips.push('Create a mental image or story with the words');\n    tips.push('Use the first letter of each word as a memory aid');\n    tips.push('Associate each word with a personal memory');\n  } else {\n    tips.push('Break the password into chunks of 3-4 characters');\n    tips.push('Create a pattern or rhythm when typing');\n    tips.push('Associate numbers with dates or ages');\n    \n    if (/[!@#$%^&*]/.test(password)) {\n      tips.push('Remember special characters by their keyboard position');\n    }\n  }\n  \n  tips.push('Practice typing it several times to build muscle memory');\n  tips.push('Write it down temporarily and store securely until memorized');\n  \n  return tips;\n}\n\n// Generate alternative passwords based on a theme\nexport function generateThemePasswords(theme: string): string[] {\n  const alternatives: string[] = [];\n  const cleanTheme = theme.toLowerCase().replace(/[^a-z]/g, '');\n  \n  if (cleanTheme.length < 3) return alternatives;\n  \n  // Generate variations\n  alternatives.push(...generatePattern(cleanTheme));\n  \n  // Add passphrase version\n  const passphrase = generatePassphrase(3, true);\n  alternatives.push(passphrase);\n  \n  // Add pronounceable version\n  const pronounceable = generatePronounceable(14);\n  alternatives.push(pronounceable);\n  \n  return alternatives.slice(0, 5);\n}","size_bytes":12591},"client/src/lib/pdf-compress.ts":{"content":"import { PDFDocument, rgb } from 'pdf-lib';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Configure PDF.js worker - use local worker for privacy and offline capability\npdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.mjs';\n\ninterface CompressionParams {\n  jpegQuality: number;\n  scale: number;\n  onProgress?: (progress: number, message: string) => void;\n}\n\ninterface PageImage {\n  dataUrl: string;\n  width: number;\n  height: number;\n}\n\ninterface CachedPage {\n  canvas: HTMLCanvasElement;\n  width: number;\n  height: number;\n}\n\n// Utility function to convert data URL to Uint8Array\nfunction dataURLtoUint8Array(dataURL: string): Uint8Array {\n  // Remove the data URL prefix to get base64 string\n  const base64String = dataURL.split(',')[1];\n  \n  // Decode base64 to binary string\n  const binaryString = atob(base64String);\n  \n  // Convert binary string to Uint8Array\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  \n  return bytes;\n}\n\n// Convert canvas to JPEG with specific quality\nfunction canvasToJPEG(canvas: HTMLCanvasElement, quality: number): Promise<string> {\n  return new Promise((resolve) => {\n    canvas.toBlob(\n      (blob) => {\n        if (!blob) {\n          resolve(canvas.toDataURL('image/jpeg', quality));\n          return;\n        }\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsDataURL(blob);\n      },\n      'image/jpeg',\n      quality\n    );\n  });\n}\n\n// Render PDF pages to canvases at base resolution (cached for reuse)\nasync function renderPagesToCanvases(\n  pdfBytes: ArrayBuffer,\n  scale: number,\n  onProgress?: (progress: number, message: string) => void\n): Promise<CachedPage[]> {\n  const loadingTask = pdfjsLib.getDocument({ data: pdfBytes });\n  const pdf = await loadingTask.promise;\n  const numPages = pdf.numPages;\n  const cachedPages: CachedPage[] = [];\n\n  // Enhance render scale for better quality (render at higher resolution)\n  const enhancedScale = scale * 1.5; // Render at 1.5x the target scale for better quality\n\n  for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n    if (onProgress) {\n      const progress = Math.round((pageNum / numPages) * 30);\n      onProgress(progress, `Rendering page ${pageNum} of ${numPages}`);\n    }\n\n    const page = await pdf.getPage(pageNum);\n    const viewport = page.getViewport({ scale: enhancedScale });\n\n    // Create canvas\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    if (!context) throw new Error('Failed to get canvas context');\n\n    canvas.width = viewport.width;\n    canvas.height = viewport.height;\n\n    // Render page to canvas\n    const renderContext = {\n      canvasContext: context,\n      viewport: viewport,\n      canvas: canvas,\n    };\n    await page.render(renderContext).promise;\n\n    cachedPages.push({\n      canvas,\n      width: viewport.width,\n      height: viewport.height,\n    });\n  }\n\n  return cachedPages;\n}\n\n// Convert cached canvases to images with specific quality\nasync function convertCanvasesToImages(\n  cachedPages: CachedPage[],\n  quality: number,\n  onProgress?: (progress: number, message: string) => void\n): Promise<PageImage[]> {\n  const pageImages: PageImage[] = [];\n  \n  for (let i = 0; i < cachedPages.length; i++) {\n    if (onProgress) {\n      const progress = 30 + Math.round((i / cachedPages.length) * 20);\n      onProgress(progress, `Compressing page ${i + 1} of ${cachedPages.length}`);\n    }\n    \n    // Convert to JPEG with quality\n    const dataUrl = await canvasToJPEG(cachedPages[i].canvas, quality);\n    \n    // Adjust dimensions to account for enhanced render scale\n    // Since we rendered at 1.5x scale, we need to scale down dimensions\n    pageImages.push({\n      dataUrl,\n      width: cachedPages[i].width / 1.5, // Scale back down\n      height: cachedPages[i].height / 1.5, // Scale back down\n    });\n  }\n  \n  return pageImages;\n}\n\n// Create PDF from images\nasync function createPDFFromImages(\n  images: PageImage[],\n  onProgress?: (progress: number, message: string) => void\n): Promise<Uint8Array> {\n  const pdfDoc = await PDFDocument.create();\n  \n  for (let i = 0; i < images.length; i++) {\n    if (onProgress) {\n      const progress = 50 + Math.round((i / images.length) * 40);\n      onProgress(progress, `Building PDF page ${i + 1} of ${images.length}`);\n    }\n\n    const imageData = images[i].dataUrl;\n    \n    // Convert data URL to Uint8Array for pdf-lib\n    const imageBytes = dataURLtoUint8Array(imageData);\n    \n    // Embed image\n    let embeddedImage;\n    if (imageData.startsWith('data:image/jpeg')) {\n      embeddedImage = await pdfDoc.embedJpg(imageBytes);\n    } else if (imageData.startsWith('data:image/png')) {\n      embeddedImage = await pdfDoc.embedPng(imageBytes);\n    } else {\n      throw new Error('Unsupported image format');\n    }\n\n    // Create page with image dimensions\n    const page = pdfDoc.addPage([images[i].width, images[i].height]);\n    \n    // Draw image on page\n    page.drawImage(embeddedImage, {\n      x: 0,\n      y: 0,\n      width: images[i].width,\n      height: images[i].height,\n    });\n  }\n\n  // Save with optimization\n  const pdfBytes = await pdfDoc.save({\n    useObjectStreams: true,\n    addDefaultPage: false,\n    objectsPerTick: 50,\n    updateFieldAppearances: false,\n  });\n\n  if (onProgress) {\n    onProgress(95, 'Finalizing compression...');\n  }\n\n  return pdfBytes;\n}\n\n// Simple compression using PDF.js and canvas with caching\nexport async function compressPDFSimple(\n  pdfBytes: ArrayBuffer,\n  params: CompressionParams,\n  cachedPages?: CachedPage[]\n): Promise<{ blob: Blob; cachedPages?: CachedPage[] }> {\n  console.log('Starting canvas-based PDF compression with params:', params);\n  \n  try {\n    // Use cached pages if available, otherwise render them\n    let pagesToUse = cachedPages;\n    if (!pagesToUse) {\n      pagesToUse = await renderPagesToCanvases(\n        pdfBytes,\n        params.scale,\n        params.onProgress\n      );\n    }\n    \n    // Convert canvases to images with specified quality\n    const images = await convertCanvasesToImages(\n      pagesToUse,\n      params.jpegQuality,\n      params.onProgress\n    );\n    \n    // Create new PDF from images\n    const compressedBytes = await createPDFFromImages(images, params.onProgress);\n    \n    console.log('Compression complete. Original size:', pdfBytes.byteLength, 'Compressed size:', compressedBytes.length);\n    \n    return { \n      blob: new Blob([compressedBytes], { type: 'application/pdf' }),\n      cachedPages: pagesToUse\n    };\n  } catch (error) {\n    console.error('Error in canvas-based PDF compression:', error);\n    \n    // Fallback to basic pdf-lib compression\n    try {\n      const pdfDoc = await PDFDocument.load(pdfBytes);\n      \n      // Remove metadata\n      pdfDoc.setTitle('');\n      pdfDoc.setAuthor('');\n      pdfDoc.setSubject('');\n      pdfDoc.setKeywords([]);\n      pdfDoc.setProducer('Compressed');\n      pdfDoc.setCreator('PDF Compressor');\n      \n      // Get pages for potential scaling\n      const pages = pdfDoc.getPages();\n      if (params.scale !== 1) {\n        pages.forEach(page => {\n          const { width, height } = page.getSize();\n          page.setSize(width * params.scale, height * params.scale);\n          page.scale(params.scale, params.scale);\n        });\n      }\n      \n      const fallbackBytes = await pdfDoc.save({\n        useObjectStreams: false,\n        addDefaultPage: false,\n        objectsPerTick: 10,\n        updateFieldAppearances: false,\n      });\n      \n      return { blob: new Blob([fallbackBytes], { type: 'application/pdf' }) };\n    } catch (fallbackError) {\n      console.error('Fallback also failed:', fallbackError);\n      throw error;\n    }\n  }\n}\n\n// Advanced compression with binary search for target size\nexport async function compressPDFAdvanced(\n  pdfBytes: ArrayBuffer,\n  params: CompressionParams\n): Promise<Blob> {\n  // For advanced compression, use moderate quality reduction to preserve readability\n  const advancedParams = {\n    ...params,\n    jpegQuality: Math.max(params.jpegQuality * 0.85, 0.6), // Never go below 60% quality\n    scale: Math.max(params.scale * 0.9, 0.75), // Maintain at least 75% scale\n  };\n  \n  const result = await compressPDFSimple(pdfBytes, advancedParams);\n  return result.blob;\n}\n\n// Binary search to find optimal compression parameters for target size\nexport async function compressToTargetSize(\n  pdfBytes: ArrayBuffer,\n  targetSize: number,\n  onProgress?: (progress: number, message: string) => void\n): Promise<{ blob: Blob; quality: number; scale: number; attempts: number }> {\n  // Calculate compression ratio to determine quality range\n  const originalSize = pdfBytes.byteLength;\n  const compressionRatio = targetSize / originalSize;\n  \n  // Adaptive quality ranges based on compression ratio\n  let minQuality: number;\n  let maxQuality: number;\n  let minScale: number;\n  let maxScale: number;\n  \n  if (compressionRatio > 0.5) {\n    // Target is > 50% of original (light compression)\n    minQuality = 0.85;\n    maxQuality = 0.98;\n    minScale = 0.9;\n    maxScale = 1.1; // Allow slight upscaling for quality\n  } else if (compressionRatio > 0.25) {\n    // Target is 25-50% of original (moderate compression)\n    minQuality = 0.7;\n    maxQuality = 0.92;\n    minScale = 0.8;\n    maxScale = 1.0;\n  } else if (compressionRatio > 0.1) {\n    // Target is 10-25% of original (significant compression)\n    minQuality = 0.6;\n    maxQuality = 0.85;\n    minScale = 0.7;\n    maxScale = 0.95;\n  } else {\n    // Target is < 10% of original (extreme compression)\n    minQuality = 0.5; // Never go below 50% quality\n    maxQuality = 0.8;\n    minScale = 0.6;\n    maxScale = 0.9;\n  }\n  \n  let attempts = 0;\n  const maxAttempts = 15;\n  const tolerance = 0.08; // 8% tolerance for better quality\n  \n  let bestResult: { blob: Blob; quality: number; scale: number; size: number } | null = null;\n  let lastResult: Blob | null = null;\n  let cachedPages: CachedPage[] | undefined = undefined;\n  \n  while (attempts < maxAttempts) {\n    attempts++;\n    \n    // Calculate current parameters\n    const quality = (minQuality + maxQuality) / 2;\n    const scale = (minScale + maxScale) / 2;\n    \n    if (onProgress) {\n      const overallProgress = Math.round(10 + (attempts / maxAttempts) * 80);\n      onProgress(overallProgress, `Optimizing compression... Attempt ${attempts}/${maxAttempts}`);\n    }\n    \n    // Compress with current parameters, reusing cached pages\n    const params: CompressionParams = {\n      jpegQuality: quality,\n      scale: scale,\n      onProgress: (progress, message) => {\n        if (onProgress) {\n          // Scale progress for this attempt\n          const attemptProgress = Math.round(10 + ((attempts - 1) / maxAttempts) * 80 + (progress / 100) * (80 / maxAttempts));\n          onProgress(attemptProgress, message);\n        }\n      }\n    };\n    \n    const result = await compressPDFSimple(pdfBytes, params, cachedPages);\n    const compressedBlob = result.blob;\n    \n    // Cache the rendered pages for reuse (only on first attempt)\n    if (!cachedPages && result.cachedPages) {\n      cachedPages = result.cachedPages;\n    }\n    \n    const currentSize = compressedBlob.size;\n    \n    // Update best result if this is closer to target\n    if (!bestResult || Math.abs(currentSize - targetSize) < Math.abs(bestResult.size - targetSize)) {\n      bestResult = { blob: compressedBlob, quality, scale, size: currentSize };\n    }\n    \n    // Check if we're close enough to target\n    // For larger files, prioritize quality over exact size match\n    const effectiveTolerance = compressionRatio > 0.5 ? 0.15 : tolerance; // 15% tolerance for light compression\n    if (Math.abs(currentSize - targetSize) <= targetSize * effectiveTolerance) {\n      console.log(`Target achieved in ${attempts} attempts. Target: ${targetSize}, Achieved: ${currentSize}`);\n      return { blob: compressedBlob, quality, scale, attempts };\n    }\n    \n    // Adjust parameters based on result\n    if (currentSize > targetSize) {\n      // File is too large, reduce quality/scale\n      // For light compression, be more conservative with quality reduction\n      const qualityStep = compressionRatio > 0.5 ? 0.02 : 0.05;\n      const scaleStep = compressionRatio > 0.5 ? 0.02 : 0.05;\n      \n      if (quality > minQuality + qualityStep) {\n        maxQuality = quality;\n      }\n      if (scale > minScale + scaleStep) {\n        maxScale = scale;\n      }\n    } else {\n      // File is too small, increase quality/scale\n      const qualityStep = compressionRatio > 0.5 ? 0.02 : 0.05;\n      const scaleStep = compressionRatio > 0.5 ? 0.02 : 0.05;\n      \n      if (quality < maxQuality - qualityStep) {\n        minQuality = quality;\n      }\n      if (scale < maxScale - scaleStep) {\n        minScale = scale;\n      }\n    }\n    \n    // Check if we've converged\n    if (maxQuality - minQuality < 0.02 && maxScale - minScale < 0.02) {\n      console.log(`Converged after ${attempts} attempts`);\n      break;\n    }\n    \n    lastResult = compressedBlob;\n  }\n  \n  // Return best result found\n  if (bestResult) {\n    console.log(`Best result after ${attempts} attempts. Target: ${targetSize}, Achieved: ${bestResult.size}`);\n    return { blob: bestResult.blob, quality: bestResult.quality, scale: bestResult.scale, attempts };\n  }\n  \n  // Fallback to last result\n  if (lastResult) {\n    return { blob: lastResult, quality: (minQuality + maxQuality) / 2, scale: (minScale + maxScale) / 2, attempts };\n  }\n  \n  throw new Error('Failed to compress PDF to target size');\n}","size_bytes":13622},"client/src/lib/smart-file-namer.ts":{"content":"// Smart File Namer - AI-powered file naming suggestions\n// Generates descriptive file names based on content, operation, and date\n\ninterface FileNameOptions {\n  originalName: string;\n  operation?: 'compress' | 'convert' | 'merge' | 'split' | 'unlock' | 'watermark';\n  fileType?: string;\n  size?: number;\n  pageCount?: number;\n  quality?: string;\n  date?: Date;\n  customPrefix?: string;\n}\n\ninterface SmartFileName {\n  suggested: string;\n  variations: string[];\n  description: string;\n}\n\n// Common descriptive words for different operations\nconst OPERATION_DESCRIPTORS = {\n  compress: ['compressed', 'reduced', 'optimized', 'small', 'compact', 'mini'],\n  convert: ['converted', 'transformed', 'changed', 'formatted'],\n  merge: ['merged', 'combined', 'joined', 'unified'],\n  split: ['split', 'divided', 'separated', 'extracted'],\n  unlock: ['unlocked', 'decrypted', 'opened', 'accessible'],\n  watermark: ['watermarked', 'branded', 'marked', 'stamped']\n};\n\nconst SIZE_DESCRIPTORS = {\n  tiny: ['tiny', 'mini', 'micro'],\n  small: ['small', 'compact', 'light'],\n  medium: ['medium', 'standard', 'regular'],\n  large: ['large', 'full', 'complete'],\n  huge: ['huge', 'maximum', 'ultra']\n};\n\nconst QUALITY_DESCRIPTORS = {\n  low: ['basic', 'draft', 'eco'],\n  medium: ['standard', 'normal', 'balanced'],\n  high: ['high', 'premium', 'quality'],\n  maximum: ['maximum', 'best', 'ultra', 'pro']\n};\n\nexport function generateSmartFileName(options: FileNameOptions): SmartFileName {\n  const {\n    originalName,\n    operation,\n    fileType,\n    size,\n    pageCount,\n    quality,\n    date = new Date(),\n    customPrefix\n  } = options;\n\n  // Extract base name without extension\n  const baseName = originalName.replace(/\\.[^/.]+$/, '');\n  const extension = originalName.split('.').pop() || 'pdf';\n  \n  // Clean the base name (remove special characters, limit length)\n  const cleanBaseName = cleanFileName(baseName);\n  \n  // Generate date strings\n  const dateStr = formatDate(date);\n  const timeStr = formatTime(date);\n  \n  // Generate size descriptor\n  const sizeDescriptor = getSizeDescriptor(size);\n  \n  // Generate operation descriptor\n  const operationDescriptor = operation ? OPERATION_DESCRIPTORS[operation][0] : '';\n  \n  // Generate quality descriptor\n  const qualityDescriptor = quality ? getQualityDescriptor(quality) : '';\n  \n  // Build suggested name variations\n  const variations: string[] = [];\n  \n  // Pattern 1: [operation]_[basename]_[date].[ext]\n  if (operation) {\n    variations.push(`${operationDescriptor}_${cleanBaseName}_${dateStr}.${extension}`);\n  }\n  \n  // Pattern 2: [basename]_[size]_[date].[ext]\n  if (sizeDescriptor) {\n    variations.push(`${cleanBaseName}_${sizeDescriptor}_${dateStr}.${extension}`);\n  }\n  \n  // Pattern 3: [date]_[basename]_[operation].[ext]\n  if (operation) {\n    variations.push(`${dateStr}_${cleanBaseName}_${operationDescriptor}.${extension}`);\n  }\n  \n  // Pattern 4: [basename]_[quality]_v[time].[ext]\n  if (qualityDescriptor) {\n    variations.push(`${cleanBaseName}_${qualityDescriptor}_v${timeStr}.${extension}`);\n  }\n  \n  // Pattern 5: [custom]_[basename]_[date].[ext]\n  if (customPrefix) {\n    variations.push(`${customPrefix}_${cleanBaseName}_${dateStr}.${extension}`);\n  }\n  \n  // Pattern 6: Simple with operation\n  if (operation) {\n    variations.push(`${cleanBaseName}_${operationDescriptor}.${extension}`);\n  }\n  \n  // Pattern 7: With page count\n  if (pageCount !== undefined) {\n    variations.push(`${cleanBaseName}_${pageCount}pages_${dateStr}.${extension}`);\n  }\n  \n  // Pattern 8: Descriptive with all info\n  if (operation && sizeDescriptor) {\n    variations.push(`${operationDescriptor}_${sizeDescriptor}_${cleanBaseName}.${extension}`);\n  }\n  \n  // Remove duplicates and limit to 5 variations\n  const uniqueVariations = [...new Set(variations)].slice(0, 5);\n  \n  // Select the best suggestion based on available info\n  let suggested = uniqueVariations[0] || `${cleanBaseName}_${dateStr}.${extension}`;\n  \n  // Generate description\n  const description = generateDescription(options, suggested);\n  \n  return {\n    suggested,\n    variations: uniqueVariations,\n    description\n  };\n}\n\nfunction cleanFileName(name: string): string {\n  // Remove special characters except underscore and hyphen\n  let clean = name.replace(/[^a-zA-Z0-9_-]/g, '_');\n  \n  // Remove multiple underscores\n  clean = clean.replace(/_+/g, '_');\n  \n  // Remove leading/trailing underscores\n  clean = clean.replace(/^_+|_+$/g, '');\n  \n  // Limit length to 30 characters\n  if (clean.length > 30) {\n    clean = clean.substring(0, 30);\n  }\n  \n  // If empty, use default\n  if (!clean) {\n    clean = 'document';\n  }\n  \n  return clean.toLowerCase();\n}\n\nfunction formatDate(date: Date): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}${month}${day}`;\n}\n\nfunction formatTime(date: Date): string {\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  return `${hours}${minutes}`;\n}\n\nfunction getSizeDescriptor(size?: number): string {\n  if (!size) return '';\n  \n  const sizeInMB = size / (1024 * 1024);\n  \n  if (sizeInMB < 0.5) return SIZE_DESCRIPTORS.tiny[0];\n  if (sizeInMB < 2) return SIZE_DESCRIPTORS.small[0];\n  if (sizeInMB < 10) return SIZE_DESCRIPTORS.medium[0];\n  if (sizeInMB < 50) return SIZE_DESCRIPTORS.large[0];\n  return SIZE_DESCRIPTORS.huge[0];\n}\n\nfunction getQualityDescriptor(quality: string): string {\n  const lowerQuality = quality.toLowerCase();\n  \n  if (lowerQuality.includes('low') || lowerQuality.includes('basic')) {\n    return QUALITY_DESCRIPTORS.low[0];\n  }\n  if (lowerQuality.includes('high') || lowerQuality.includes('premium')) {\n    return QUALITY_DESCRIPTORS.high[0];\n  }\n  if (lowerQuality.includes('max') || lowerQuality.includes('best')) {\n    return QUALITY_DESCRIPTORS.maximum[0];\n  }\n  \n  return QUALITY_DESCRIPTORS.medium[0];\n}\n\nfunction generateDescription(options: FileNameOptions, fileName: string): string {\n  const parts: string[] = [];\n  \n  if (options.operation) {\n    parts.push(`${options.operation} file`);\n  }\n  \n  if (options.size) {\n    const sizeInMB = (options.size / (1024 * 1024)).toFixed(2);\n    parts.push(`${sizeInMB}MB`);\n  }\n  \n  if (options.pageCount) {\n    parts.push(`${options.pageCount} pages`);\n  }\n  \n  if (options.quality) {\n    parts.push(`${options.quality} quality`);\n  }\n  \n  const date = options.date || new Date();\n  parts.push(`created ${date.toLocaleDateString()}`);\n  \n  return `${fileName} - ${parts.join(', ')}`;\n}\n\n// Function to suggest file names based on content analysis\nexport function suggestFileNameFromContent(\n  content: string,\n  fileType: string = 'pdf'\n): string[] {\n  const suggestions: string[] = [];\n  const words = content.toLowerCase().split(/\\s+/);\n  const date = new Date();\n  const dateStr = formatDate(date);\n  \n  // Find common document types\n  const documentTypes = {\n    invoice: ['invoice', 'bill', 'payment', 'amount', 'total'],\n    report: ['report', 'analysis', 'summary', 'findings', 'conclusion'],\n    contract: ['agreement', 'contract', 'terms', 'conditions', 'party'],\n    letter: ['dear', 'sincerely', 'regards', 'letter', 'yours'],\n    resume: ['resume', 'cv', 'experience', 'education', 'skills'],\n    presentation: ['slide', 'presentation', 'agenda', 'overview', 'objectives'],\n    manual: ['manual', 'guide', 'instructions', 'steps', 'procedure'],\n    receipt: ['receipt', 'purchase', 'transaction', 'paid', 'order']\n  };\n  \n  // Detect document type\n  let detectedType = 'document';\n  let maxMatches = 0;\n  \n  for (const [type, keywords] of Object.entries(documentTypes)) {\n    const matches = keywords.filter(keyword => words.includes(keyword)).length;\n    if (matches > maxMatches) {\n      maxMatches = matches;\n      detectedType = type;\n    }\n  }\n  \n  // Generate suggestions based on detected type\n  suggestions.push(`${detectedType}_${dateStr}.${fileType}`);\n  \n  // Find potential title (first line or heading)\n  const lines = content.split('\\n').filter(line => line.trim());\n  if (lines.length > 0) {\n    const potentialTitle = cleanFileName(lines[0].substring(0, 50));\n    if (potentialTitle && potentialTitle !== 'document') {\n      suggestions.push(`${potentialTitle}_${dateStr}.${fileType}`);\n    }\n  }\n  \n  // Find dates in content\n  const datePattern = /\\b(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2,4})\\b/g;\n  const foundDates = content.match(datePattern);\n  if (foundDates && foundDates.length > 0) {\n    const contentDate = foundDates[0].replace(/[\\/\\-]/g, '');\n    suggestions.push(`${detectedType}_${contentDate}.${fileType}`);\n  }\n  \n  // Find potential ID or reference numbers\n  const refPattern = /\\b([A-Z]{2,}[\\d]{3,})\\b/g;\n  const refs = content.match(refPattern);\n  if (refs && refs.length > 0) {\n    suggestions.push(`${detectedType}_${refs[0].toLowerCase()}.${fileType}`);\n  }\n  \n  // Add generic suggestion\n  suggestions.push(`${detectedType}_edited_${dateStr}.${fileType}`);\n  \n  // Return unique suggestions\n  return [...new Set(suggestions)].slice(0, 5);\n}\n\n// Function to batch rename multiple files\nexport function batchRenameFiles(\n  files: { name: string; size?: number }[],\n  operation?: string\n): { original: string; suggested: string }[] {\n  const date = new Date();\n  const results: { original: string; suggested: string }[] = [];\n  \n  files.forEach((file, index) => {\n    const smartName = generateSmartFileName({\n      originalName: file.name,\n      operation: operation as any,\n      size: file.size,\n      date\n    });\n    \n    // Add index if multiple files\n    let suggested = smartName.suggested;\n    if (files.length > 1) {\n      const ext = suggested.split('.').pop();\n      const base = suggested.replace(/\\.[^/.]+$/, '');\n      suggested = `${base}_${index + 1}.${ext}`;\n    }\n    \n    results.push({\n      original: file.name,\n      suggested\n    });\n  });\n  \n  return results;\n}\n\n// Export function to add smart naming to existing file download\nexport function enhanceDownloadName(\n  originalName: string,\n  blob: Blob,\n  operation?: string\n): string {\n  const smartName = generateSmartFileName({\n    originalName,\n    operation: operation as any,\n    size: blob.size,\n    date: new Date()\n  });\n  \n  return smartName.suggested;\n}","size_bytes":10295},"client/src/lib/text-enhancement.ts":{"content":"// Text enhancement utilities - all client-side processing\n// No external APIs - uses built-in browser capabilities and simple algorithms\n\ninterface TextAnalysis {\n  wordCount: number;\n  sentenceCount: number;\n  paragraphCount: number;\n  averageWordLength: number;\n  averageSentenceLength: number;\n  readabilityScore: number; // Flesch Reading Ease\n  readabilityLevel: string;\n  commonWords: string[];\n  complexWords: string[];\n  passiveVoices: string[];\n  suggestions: string[];\n}\n\ninterface ToneOptions {\n  formal: boolean;\n  casual: boolean;\n  professional: boolean;\n  friendly: boolean;\n  concise: boolean;\n  detailed: boolean;\n}\n\n// Common words database for readability analysis\nconst COMMON_WORDS = new Set([\n  'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'i',\n  'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at',\n  'this', 'but', 'his', 'by', 'from', 'they', 'we', 'say', 'her', 'she',\n  'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their',\n  'what', 'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which', 'go',\n  'me', 'when', 'make', 'can', 'like', 'time', 'no', 'just', 'him', 'know',\n  'take', 'people', 'into', 'year', 'your', 'good', 'some', 'could', 'them',\n  'see', 'other', 'than', 'then', 'now', 'look', 'only', 'come', 'its', 'over',\n  'think', 'also', 'back', 'after', 'use', 'two', 'how', 'our', 'work',\n  'first', 'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these',\n  'give', 'day', 'most', 'us', 'is', 'was', 'are', 'been', 'has', 'had',\n  'were', 'said', 'did', 'having', 'may', 'keep', 'does', 'let', 'put', 'seem'\n]);\n\n// Transition words for better flow\nconst TRANSITION_WORDS = {\n  addition: ['furthermore', 'moreover', 'additionally', 'besides', 'also'],\n  contrast: ['however', 'nevertheless', 'although', 'whereas', 'while'],\n  cause: ['therefore', 'consequently', 'thus', 'hence', 'accordingly'],\n  example: ['for instance', 'for example', 'specifically', 'namely', 'such as'],\n  conclusion: ['in conclusion', 'to summarize', 'overall', 'finally', 'ultimately']\n};\n\n// Passive voice indicators\nconst PASSIVE_INDICATORS = [\n  'was', 'were', 'been', 'being', 'is', 'are', 'am'\n];\n\nconst PAST_PARTICIPLES = [\n  'given', 'taken', 'made', 'done', 'written', 'seen', 'known',\n  'shown', 'told', 'sent', 'received', 'found', 'used', 'needed'\n];\n\nexport function analyzeText(text: string): TextAnalysis {\n  const words = text.match(/\\b\\w+\\b/g) || [];\n  const sentences = text.match(/[.!?]+/g) || [];\n  const paragraphs = text.split(/\\n\\n+/);\n  \n  const wordCount = words.length;\n  const sentenceCount = Math.max(sentences.length, 1);\n  const paragraphCount = paragraphs.filter(p => p.trim().length > 0).length;\n  \n  const averageWordLength = wordCount > 0 \n    ? words.reduce((sum, word) => sum + word.length, 0) / wordCount \n    : 0;\n    \n  const averageSentenceLength = sentenceCount > 0 \n    ? wordCount / sentenceCount \n    : 0;\n\n  // Calculate Flesch Reading Ease score\n  const syllableCount = countSyllables(text);\n  const readabilityScore = calculateFleschScore(\n    wordCount,\n    sentenceCount,\n    syllableCount\n  );\n  \n  const readabilityLevel = getReadabilityLevel(readabilityScore);\n  \n  // Find common and complex words\n  const commonWords: string[] = [];\n  const complexWords: string[] = [];\n  \n  words.forEach(word => {\n    const lowerWord = word.toLowerCase();\n    if (COMMON_WORDS.has(lowerWord)) {\n      if (!commonWords.includes(lowerWord)) commonWords.push(lowerWord);\n    } else if (word.length > 8 || countSyllablesInWord(word) > 3) {\n      if (!complexWords.includes(word)) complexWords.push(word);\n    }\n  });\n\n  // Detect passive voice\n  const passiveVoices = detectPassiveVoice(text);\n  \n  // Generate suggestions\n  const suggestions = generateSuggestions({\n    readabilityScore,\n    averageSentenceLength,\n    complexWords,\n    passiveVoices,\n    paragraphCount,\n    wordCount\n  });\n\n  return {\n    wordCount,\n    sentenceCount,\n    paragraphCount,\n    averageWordLength,\n    averageSentenceLength,\n    readabilityScore,\n    readabilityLevel,\n    commonWords: commonWords.slice(0, 10),\n    complexWords: complexWords.slice(0, 10),\n    passiveVoices: passiveVoices.slice(0, 5),\n    suggestions\n  };\n}\n\nfunction countSyllables(text: string): number {\n  const words = text.match(/\\b\\w+\\b/g) || [];\n  return words.reduce((total, word) => total + countSyllablesInWord(word), 0);\n}\n\nfunction countSyllablesInWord(word: string): number {\n  word = word.toLowerCase();\n  let count = 0;\n  let previousWasVowel = false;\n  \n  for (let i = 0; i < word.length; i++) {\n    const isVowel = /[aeiouy]/.test(word[i]);\n    if (isVowel && !previousWasVowel) {\n      count++;\n    }\n    previousWasVowel = isVowel;\n  }\n  \n  // Adjust for silent e\n  if (word.endsWith('e') && count > 1) {\n    count--;\n  }\n  \n  // Ensure at least one syllable\n  return Math.max(count, 1);\n}\n\nfunction calculateFleschScore(words: number, sentences: number, syllables: number): number {\n  if (words === 0 || sentences === 0) return 0;\n  \n  const avgSentenceLength = words / sentences;\n  const avgSyllablesPerWord = syllables / words;\n  \n  // Flesch Reading Ease formula\n  const score = 206.835 - (1.015 * avgSentenceLength) - (84.6 * avgSyllablesPerWord);\n  \n  // Clamp between 0 and 100\n  return Math.max(0, Math.min(100, score));\n}\n\nfunction getReadabilityLevel(score: number): string {\n  if (score >= 90) return 'Very Easy (5th grade)';\n  if (score >= 80) return 'Easy (6th grade)';\n  if (score >= 70) return 'Fairly Easy (7th grade)';\n  if (score >= 60) return 'Standard (8-9th grade)';\n  if (score >= 50) return 'Fairly Difficult (10-12th grade)';\n  if (score >= 30) return 'Difficult (College)';\n  return 'Very Difficult (Graduate)';\n}\n\nfunction detectPassiveVoice(text: string): string[] {\n  const sentences = text.match(/[^.!?]+[.!?]+/g) || [];\n  const passiveSentences: string[] = [];\n  \n  sentences.forEach(sentence => {\n    const words = sentence.toLowerCase().split(/\\s+/);\n    \n    for (let i = 0; i < words.length - 1; i++) {\n      // Check for \"to be\" verb followed by past participle\n      if (PASSIVE_INDICATORS.includes(words[i])) {\n        const nextWord = words[i + 1];\n        if (nextWord && (\n          nextWord.endsWith('ed') || \n          nextWord.endsWith('en') ||\n          PAST_PARTICIPLES.includes(nextWord)\n        )) {\n          passiveSentences.push(sentence.trim());\n          break;\n        }\n      }\n    }\n  });\n  \n  return passiveSentences;\n}\n\nfunction generateSuggestions(analysis: any): string[] {\n  const suggestions: string[] = [];\n  \n  // Readability suggestions\n  if (analysis.readabilityScore < 30) {\n    suggestions.push('Consider using shorter sentences and simpler words to improve readability');\n  } else if (analysis.readabilityScore < 60) {\n    suggestions.push('Good readability for educated audiences. Consider simplifying for broader appeal');\n  }\n  \n  // Sentence length suggestions\n  if (analysis.averageSentenceLength > 25) {\n    suggestions.push('Your sentences are quite long. Try breaking them into shorter, clearer statements');\n  } else if (analysis.averageSentenceLength < 10) {\n    suggestions.push('Your sentences are very short. Consider combining some for better flow');\n  }\n  \n  // Complex words suggestions\n  if (analysis.complexWords.length > 5) {\n    suggestions.push(`Consider simplifying complex words like: ${analysis.complexWords.slice(0, 3).join(', ')}`);\n  }\n  \n  // Passive voice suggestions\n  if (analysis.passiveVoices.length > 2) {\n    suggestions.push('Reduce passive voice usage for more direct, engaging writing');\n  }\n  \n  // Paragraph suggestions\n  if (analysis.wordCount > 200 && analysis.paragraphCount < 2) {\n    suggestions.push('Consider breaking your text into paragraphs for better readability');\n  }\n  \n  // Add transition words suggestion\n  const hasTransitions = Object.values(TRANSITION_WORDS).flat().some(word => \n    analysis.text?.toLowerCase().includes(word)\n  );\n  \n  if (!hasTransitions && analysis.sentenceCount > 5) {\n    suggestions.push('Add transition words to improve flow between sentences');\n  }\n  \n  return suggestions;\n}\n\nexport function enhanceText(text: string, tone: ToneOptions): string {\n  let enhanced = text;\n  \n  // Apply tone adjustments\n  if (tone.formal) {\n    enhanced = makeFormal(enhanced);\n  } else if (tone.casual) {\n    enhanced = makeCasual(enhanced);\n  }\n  \n  if (tone.concise) {\n    enhanced = makeConcise(enhanced);\n  } else if (tone.detailed) {\n    enhanced = makeDetailed(enhanced);\n  }\n  \n  if (tone.professional) {\n    enhanced = makeProfessional(enhanced);\n  } else if (tone.friendly) {\n    enhanced = makeFriendly(enhanced);\n  }\n  \n  return enhanced;\n}\n\nfunction makeFormal(text: string): string {\n  const replacements: { [key: string]: string } = {\n    \"can't\": \"cannot\",\n    \"won't\": \"will not\",\n    \"don't\": \"do not\",\n    \"doesn't\": \"does not\",\n    \"isn't\": \"is not\",\n    \"aren't\": \"are not\",\n    \"wasn't\": \"was not\",\n    \"weren't\": \"were not\",\n    \"haven't\": \"have not\",\n    \"hasn't\": \"has not\",\n    \"hadn't\": \"had not\",\n    \"shouldn't\": \"should not\",\n    \"wouldn't\": \"would not\",\n    \"couldn't\": \"could not\",\n    \"didn't\": \"did not\",\n    \"i'm\": \"I am\",\n    \"you're\": \"you are\",\n    \"we're\": \"we are\",\n    \"they're\": \"they are\",\n    \"it's\": \"it is\",\n    \"that's\": \"that is\",\n    \"there's\": \"there is\",\n    \"here's\": \"here is\",\n    \"what's\": \"what is\",\n    \"who's\": \"who is\",\n    \"let's\": \"let us\",\n    \"gonna\": \"going to\",\n    \"wanna\": \"want to\",\n    \"gotta\": \"have to\",\n    \"yeah\": \"yes\",\n    \"yep\": \"yes\",\n    \"nope\": \"no\",\n    \"ok\": \"acceptable\",\n    \"okay\": \"acceptable\",\n    \"a lot\": \"numerous\",\n    \"lots of\": \"many\",\n    \"really\": \"significantly\",\n    \"very\": \"extremely\",\n    \"pretty\": \"quite\",\n    \"kind of\": \"somewhat\",\n    \"sort of\": \"somewhat\"\n  };\n  \n  let formal = text;\n  Object.entries(replacements).forEach(([informal, formalWord]) => {\n    const regex = new RegExp(`\\\\b${informal}\\\\b`, 'gi');\n    formal = formal.replace(regex, formalWord);\n  });\n  \n  // Capitalize first letter of sentences\n  formal = formal.replace(/(^|\\. )([a-z])/g, (match, p1, p2) => p1 + p2.toUpperCase());\n  \n  return formal;\n}\n\nfunction makeCasual(text: string): string {\n  const replacements: { [key: string]: string } = {\n    \"cannot\": \"can't\",\n    \"will not\": \"won't\",\n    \"do not\": \"don't\",\n    \"does not\": \"doesn't\",\n    \"is not\": \"isn't\",\n    \"are not\": \"aren't\",\n    \"have not\": \"haven't\",\n    \"has not\": \"hasn't\",\n    \"therefore\": \"so\",\n    \"however\": \"but\",\n    \"perhaps\": \"maybe\",\n    \"utilize\": \"use\",\n    \"implement\": \"do\",\n    \"facilitate\": \"help\",\n    \"demonstrate\": \"show\",\n    \"indicate\": \"show\",\n    \"subsequently\": \"then\",\n    \"nevertheless\": \"still\",\n    \"furthermore\": \"also\",\n    \"moreover\": \"also\",\n    \"consequently\": \"so\"\n  };\n  \n  let casual = text;\n  Object.entries(replacements).forEach(([formal, casualWord]) => {\n    const regex = new RegExp(`\\\\b${formal}\\\\b`, 'gi');\n    casual = casual.replace(regex, casualWord);\n  });\n  \n  return casual;\n}\n\nfunction makeConcise(text: string): string {\n  // Remove redundant phrases\n  const redundancies: { [key: string]: string } = {\n    \"in order to\": \"to\",\n    \"due to the fact that\": \"because\",\n    \"in spite of the fact that\": \"although\",\n    \"at this point in time\": \"now\",\n    \"at the present time\": \"now\",\n    \"in the near future\": \"soon\",\n    \"in the event that\": \"if\",\n    \"for the purpose of\": \"to\",\n    \"with regard to\": \"about\",\n    \"in regards to\": \"about\",\n    \"as a matter of fact\": \"actually\",\n    \"each and every\": \"every\",\n    \"first and foremost\": \"first\",\n    \"absolutely essential\": \"essential\",\n    \"completely eliminate\": \"eliminate\",\n    \"future plans\": \"plans\",\n    \"past history\": \"history\",\n    \"revert back\": \"revert\",\n    \"brief summary\": \"summary\",\n    \"end result\": \"result\",\n    \"free gift\": \"gift\",\n    \"in my opinion\": \"\",\n    \"it is important to note that\": \"\",\n    \"it should be noted that\": \"\",\n    \"it goes without saying\": \"\"\n  };\n  \n  let concise = text;\n  Object.entries(redundancies).forEach(([verbose, simple]) => {\n    const regex = new RegExp(verbose, 'gi');\n    concise = concise.replace(regex, simple);\n  });\n  \n  // Remove extra spaces\n  concise = concise.replace(/\\s+/g, ' ').trim();\n  \n  return concise;\n}\n\nfunction makeDetailed(text: string): string {\n  // Add clarifying phrases where appropriate\n  let detailed = text;\n  \n  // Add examples after general statements\n  detailed = detailed.replace(\n    /\\b(such as|including|like)\\b/gi,\n    '$1, for example,'\n  );\n  \n  // Expand abbreviations\n  const abbreviations: { [key: string]: string } = {\n    \"etc\": \"and so forth\",\n    \"e.g.\": \"for example\",\n    \"i.e.\": \"that is\",\n    \"vs\": \"versus\",\n    \"approx\": \"approximately\"\n  };\n  \n  Object.entries(abbreviations).forEach(([abbr, full]) => {\n    const regex = new RegExp(`\\\\b${abbr}\\\\b`, 'gi');\n    detailed = detailed.replace(regex, full);\n  });\n  \n  return detailed;\n}\n\nfunction makeProfessional(text: string): string {\n  let professional = makeFormal(text);\n  \n  // Replace casual business terms\n  const businessTerms: { [key: string]: string } = {\n    \"deal with\": \"address\",\n    \"figure out\": \"determine\",\n    \"get\": \"obtain\",\n    \"give\": \"provide\",\n    \"help\": \"assist\",\n    \"let\": \"allow\",\n    \"make\": \"create\",\n    \"need\": \"require\",\n    \"show\": \"demonstrate\",\n    \"start\": \"initiate\",\n    \"stop\": \"discontinue\",\n    \"talk about\": \"discuss\",\n    \"think about\": \"consider\",\n    \"try\": \"attempt\",\n    \"use\": \"utilize\",\n    \"want\": \"require\"\n  };\n  \n  Object.entries(businessTerms).forEach(([casual, prof]) => {\n    const regex = new RegExp(`\\\\b${casual}\\\\b`, 'gi');\n    professional = professional.replace(regex, prof);\n  });\n  \n  return professional;\n}\n\nfunction makeFriendly(text: string): string {\n  let friendly = text;\n  \n  // Add friendly phrases\n  if (!friendly.toLowerCase().includes('thank')) {\n    friendly = `Thank you for your interest! ${friendly}`;\n  }\n  \n  // Replace formal phrases with friendly ones\n  const friendlyPhrases: { [key: string]: string } = {\n    \"it is required\": \"we need\",\n    \"you must\": \"please\",\n    \"failure to\": \"if you don't\",\n    \"mandatory\": \"important\",\n    \"prohibited\": \"please don't\",\n    \"shall\": \"will\",\n    \"pursuant to\": \"according to\",\n    \"prior to\": \"before\",\n    \"subsequent to\": \"after\"\n  };\n  \n  Object.entries(friendlyPhrases).forEach(([formal, friendlyPhrase]) => {\n    const regex = new RegExp(formal, 'gi');\n    friendly = friendly.replace(regex, friendlyPhrase);\n  });\n  \n  return friendly;\n}\n\nexport function checkGrammar(text: string): string[] {\n  const issues: string[] = [];\n  \n  // Check for common grammar issues\n  const sentences = text.match(/[^.!?]+[.!?]+/g) || [];\n  \n  sentences.forEach(sentence => {\n    // Check for double spaces\n    if (/\\s{2,}/.test(sentence)) {\n      issues.push('Remove double spaces');\n    }\n    \n    // Check for missing capital at start\n    if (sentence.trim() && /^[a-z]/.test(sentence.trim())) {\n      issues.push('Capitalize the first letter of sentences');\n    }\n    \n    // Check for common word confusion\n    const confusions = [\n      { wrong: /\\byour\\s+a\\b/gi, right: \"you're a\" },\n      { wrong: /\\bits\\s+a\\b/gi, right: \"it's a\" },\n      { wrong: /\\btheir\\s+is\\b/gi, right: \"there is\" },\n      { wrong: /\\bthen\\s+I\\b/gi, context: \"Consider 'than I' for comparisons\" },\n      { wrong: /\\beffect\\s+the\\b/gi, context: \"Consider 'affect the' for verb usage\" },\n      { wrong: /\\baccept\\s+for\\b/gi, right: \"except for\" },\n      { wrong: /\\bloose\\s+weight\\b/gi, right: \"lose weight\" },\n      { wrong: /\\bshould\\s+of\\b/gi, right: \"should have\" },\n      { wrong: /\\bcould\\s+of\\b/gi, right: \"could have\" },\n      { wrong: /\\bwould\\s+of\\b/gi, right: \"would have\" }\n    ];\n    \n    confusions.forEach(({ wrong, right, context }) => {\n      if (wrong.test(sentence)) {\n        if (right) {\n          issues.push(`Replace with \"${right}\"`);\n        } else if (context) {\n          issues.push(context);\n        }\n      }\n    });\n    \n    // Check for repeated words\n    const words = sentence.split(/\\s+/);\n    for (let i = 0; i < words.length - 1; i++) {\n      if (words[i].toLowerCase() === words[i + 1].toLowerCase() &&\n          words[i].length > 2) {\n        issues.push(`Repeated word: \"${words[i]}\"`);\n      }\n    }\n  });\n  \n  // Check for missing punctuation at end\n  if (text.trim() && !/[.!?]$/.test(text.trim())) {\n    issues.push('Add punctuation at the end');\n  }\n  \n  return [...new Set(issues)]; // Remove duplicates\n}\n\n// Simple spell check using browser's built-in capabilities\nexport async function checkSpelling(text: string): Promise<string[]> {\n  // This would normally use the browser's spellcheck API if available\n  // For now, return a simple check against common misspellings\n  const commonMisspellings: { [key: string]: string } = {\n    'recieve': 'receive',\n    'beleive': 'believe',\n    'occured': 'occurred',\n    'seperate': 'separate',\n    'untill': 'until',\n    'wich': 'which',\n    'alot': 'a lot',\n    'definately': 'definitely',\n    'occassion': 'occasion',\n    'concious': 'conscious',\n    'experiance': 'experience',\n    'enviroment': 'environment',\n    'goverment': 'government',\n    'necesary': 'necessary',\n    'begining': 'beginning',\n    'accomodate': 'accommodate',\n    'acheive': 'achieve',\n    'adress': 'address',\n    'calender': 'calendar',\n    'collegue': 'colleague',\n    'comming': 'coming',\n    'commitee': 'committee',\n    'completly': 'completely',\n    'concider': 'consider',\n    'dissapear': 'disappear',\n    'finaly': 'finally',\n    'foward': 'forward',\n    'futher': 'further',\n    'happend': 'happened',\n    'harrass': 'harass',\n    'independant': 'independent',\n    'knowlege': 'knowledge',\n    'lenght': 'length',\n    'maintainance': 'maintenance',\n    'mispell': 'misspell',\n    'noticable': 'noticeable',\n    'paralel': 'parallel',\n    'perfer': 'prefer',\n    'publically': 'publicly',\n    'realy': 'really',\n    'refered': 'referred',\n    'rember': 'remember',\n    'resistent': 'resistant',\n    'sence': 'sense',\n    'succesful': 'successful',\n    'suprise': 'surprise',\n    'tommorrow': 'tomorrow',\n    'tounge': 'tongue',\n    'truely': 'truly',\n    'unforseen': 'unforeseen',\n    'unfortunatly': 'unfortunately',\n    'usefull': 'useful',\n    'wierd': 'weird'\n  };\n  \n  const misspellings: string[] = [];\n  const words = text.match(/\\b\\w+\\b/g) || [];\n  \n  words.forEach(word => {\n    const lower = word.toLowerCase();\n    if (commonMisspellings[lower]) {\n      misspellings.push(`\"${word}\" should be \"${commonMisspellings[lower]}\"`);\n    }\n  });\n  \n  return misspellings;\n}","size_bytes":18554},"client/src/pages/extract-text.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { \n  FileText, Copy, Download, ArrowLeft, Upload, Sparkles, \n  Eye, Languages, AlertCircle, Check, Loader2, ScanLine,\n  Image as ImageIcon, Globe, Type, FileOutput\n} from \"lucide-react\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\nimport Tesseract from 'tesseract.js';\n\ninterface ExtractedText {\n  text: string;\n  confidence: number;\n  language: string;\n  wordCount: number;\n}\n\nconst SUPPORTED_LANGUAGES = [\n  { value: 'eng', label: 'English', native: 'English' },\n  { value: 'spa', label: 'Spanish', native: 'Español' },\n  { value: 'fra', label: 'French', native: 'Français' },\n  { value: 'deu', label: 'German', native: 'Deutsch' },\n  { value: 'ita', label: 'Italian', native: 'Italiano' },\n  { value: 'por', label: 'Portuguese', native: 'Português' },\n  { value: 'rus', label: 'Russian', native: 'Русский' },\n  { value: 'jpn', label: 'Japanese', native: '日本語' },\n  { value: 'chi_sim', label: 'Chinese (Simplified)', native: '简体中文' },\n  { value: 'chi_tra', label: 'Chinese (Traditional)', native: '繁體中文' },\n  { value: 'kor', label: 'Korean', native: '한국어' },\n  { value: 'ara', label: 'Arabic', native: 'العربية' },\n  { value: 'hin', label: 'Hindi', native: 'हिन्दी' },\n  { value: 'nld', label: 'Dutch', native: 'Nederlands' },\n  { value: 'pol', label: 'Polish', native: 'Polski' }\n];\n\nexport default function ExtractText() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [language, setLanguage] = useState(\"eng\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [progressStatus, setProgressStatus] = useState(\"\");\n  const [extractedResult, setExtractedResult] = useState<ExtractedText | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // SEO structured data\n  const howToSchema = generateHowToSchema({\n    name: \"How to Extract Text from Images\",\n    description: \"Extract text from images using OCR technology directly in your browser\",\n    totalTime: \"PT30S\",\n    steps: [\n      { name: \"Upload Image\", text: \"Select an image containing text (JPG, PNG, etc.)\" },\n      { name: \"Choose Language\", text: \"Select the language of the text in the image\" },\n      { name: \"Extract Text\", text: \"Click 'Extract Text' and wait for processing\" },\n      { name: \"Copy or Download\", text: \"Copy the extracted text or download as a file\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"Image Text Extractor - AltafToolsHub\",\n    description: \"Free OCR tool to extract text from images. Supports 15+ languages. 100% browser-based processing for complete privacy.\",\n    applicationCategory: \"UtilitiesApplication\",\n    url: \"https://www.altaftoolshub.com/extract-text\",\n    aggregateRating: { ratingValue: 4.8, ratingCount: 892, bestRating: 5 },\n    featureList: [\n      \"Extract text from JPG, PNG, WebP, BMP images\",\n      \"Support for 15+ languages\",\n      \"100% client-side OCR processing\",\n      \"Export as TXT file or copy to clipboard\",\n      \"Confidence score for accuracy\",\n      \"No server uploads required\"\n    ]\n  });\n\n  useSEO({\n    title: \"Extract Text from Images - Free OCR Tool | AltafToolsHub\",\n    description: \"Free online OCR tool to extract text from images. Supports multiple languages. All processing happens in your browser for complete privacy. No uploads required.\",\n    path: \"/extract-text\",\n    keywords: \"ocr, extract text from image, image to text, optical character recognition, text extraction, ocr online, free ocr tool, tesseract ocr, image text reader\",\n    structuredData: [howToSchema, softwareSchema],\n    ogImage: \"https://www.altaftoolshub.com/og-extract-text.png\"\n  });\n\n  const handleFileSelect = useCallback((file: File) => {\n    if (!file.type.startsWith('image/')) {\n      setError('Please select a valid image file (JPG, PNG, WebP, etc.)');\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) { // 10MB limit\n      setError('File size must be less than 10MB');\n      return;\n    }\n\n    setSelectedFile(file);\n    setError(null);\n    setExtractedResult(null);\n\n    // Create image preview\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setImagePreview(e.target?.result as string);\n    };\n    reader.readAsDataURL(file);\n  }, []);\n\n  const extractText = async () => {\n    if (!selectedFile || !imagePreview) return;\n\n    setIsProcessing(true);\n    setProgress(0);\n    setProgressStatus(\"Initializing OCR engine...\");\n    setError(null);\n\n    try {\n      const worker = await Tesseract.createWorker({\n        logger: (m) => {\n          // Update progress based on Tesseract logs\n          if (m.status === 'recognizing text') {\n            const progressPercent = Math.round(m.progress * 100);\n            setProgress(progressPercent);\n            setProgressStatus(`Extracting text... ${progressPercent}%`);\n          } else if (m.status === 'loading language traineddata') {\n            setProgressStatus(`Loading ${language} language model...`);\n            setProgress(20);\n          } else if (m.status === 'initializing tesseract') {\n            setProgressStatus('Initializing OCR engine...');\n            setProgress(10);\n          } else if (m.status === 'initialized tesseract') {\n            setProgressStatus('OCR engine ready...');\n            setProgress(30);\n          }\n        }\n      });\n\n      await worker.loadLanguage(language);\n      await worker.initialize(language);\n      \n      setProgressStatus('Processing image...');\n      const { data } = await worker.recognize(imagePreview);\n      \n      await worker.terminate();\n\n      // Process results\n      const extractedText = data.text.trim();\n      const confidence = Math.round(data.confidence);\n      const wordCount = extractedText.split(/\\s+/).filter(word => word.length > 0).length;\n\n      if (extractedText.length === 0) {\n        setError('No text could be extracted from this image. Please ensure the image contains readable text.');\n        setIsProcessing(false);\n        return;\n      }\n\n      setExtractedResult({\n        text: extractedText,\n        confidence,\n        language,\n        wordCount\n      });\n\n      toast({\n        title: \"Text Extracted Successfully\",\n        description: `Extracted ${wordCount} words with ${confidence}% confidence`,\n      });\n\n    } catch (err) {\n      console.error('OCR Error:', err);\n      setError('Failed to extract text from image. Please try again with a clearer image.');\n      toast({\n        title: \"Extraction Failed\",\n        description: \"Could not extract text from the image. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessing(false);\n      setProgress(0);\n      setProgressStatus(\"\");\n    }\n  };\n\n  const copyToClipboard = async () => {\n    if (!extractedResult) return;\n\n    try {\n      await navigator.clipboard.writeText(extractedResult.text);\n      toast({\n        title: \"Copied!\",\n        description: \"Text copied to clipboard.\",\n      });\n    } catch {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy text. Please try selecting and copying manually.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const downloadText = () => {\n    if (!extractedResult) return;\n\n    const blob = new Blob([extractedResult.text], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `extracted-text-${new Date().toISOString().split('T')[0]}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Downloaded!\",\n      description: \"Text file downloaded successfully.\",\n    });\n  };\n\n  const reset = () => {\n    setSelectedFile(null);\n    setImagePreview(\"\");\n    setExtractedResult(null);\n    setError(null);\n    setProgress(0);\n    setProgressStatus(\"\");\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 90) return \"text-green-500\";\n    if (confidence >= 70) return \"text-yellow-500\";\n    return \"text-orange-500\";\n  };\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"Image Text Extractor\"\n        description=\"Extract text from images using OCR technology\"\n        category=\"UtilitiesApplication\"\n      />\n      \n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <Breadcrumbs items={[{ name: \"Extract Text\", url: \"/extract-text\" }]} />\n        \n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\"\n            onClick={() => {\n              const toolsSection = document.getElementById('tools-section');\n              if (toolsSection) {\n                window.history.pushState({}, '', '/');\n                setTimeout(() => {\n                  toolsSection.scrollIntoView({ behavior: 'smooth' });\n                }, 100);\n              }\n            }}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Tools\n          </Button>\n          \n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-3 rounded-2xl bg-gradient-to-br from-cyan-500 to-blue-500\">\n              <ScanLine className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-4xl font-bold\">Image Text Extractor</h1>\n          </div>\n          \n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Extract text from images using advanced OCR technology. \n            All processing happens in your browser for complete privacy.\n          </p>\n        </div>\n\n        <PrivacyNotice />\n\n        {/* Main Content */}\n        <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n          {/* Input Section */}\n          <div className=\"space-y-6\">\n            {/* File Upload */}\n            {!selectedFile ? (\n              <FileUpload\n                onFileSelect={handleFileSelect}\n                accept=\"image/*\"\n                title=\"Upload your image\"\n                description=\"Drag & drop or click to select an image with text\"\n                className=\"h-[300px]\"\n              />\n            ) : (\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Label className=\"text-lg font-semibold\">Selected Image</Label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={reset}\n                    data-testid=\"button-change-image\"\n                  >\n                    Change Image\n                  </Button>\n                </div>\n                \n                {imagePreview && (\n                  <div className=\"relative rounded-lg overflow-hidden bg-muted\">\n                    <img \n                      src={imagePreview} \n                      alt=\"Selected image\"\n                      className=\"w-full h-[300px] object-contain\"\n                    />\n                    <div className=\"absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded text-xs\">\n                      {(selectedFile.size / 1024).toFixed(1)} KB\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"mt-4 text-sm text-muted-foreground\">\n                  <p data-testid=\"text-filename\">{selectedFile.name}</p>\n                </div>\n              </Card>\n            )}\n\n            {/* Settings */}\n            {selectedFile && (\n              <Card className=\"p-6\">\n                <Label className=\"text-lg font-semibold mb-4 block\">OCR Settings</Label>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"language\" className=\"mb-2 block\">\n                      Text Language\n                    </Label>\n                    <Select\n                      value={language}\n                      onValueChange={setLanguage}\n                      disabled={isProcessing}\n                    >\n                      <SelectTrigger id=\"language\" data-testid=\"select-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {SUPPORTED_LANGUAGES.map(lang => (\n                          <SelectItem key={lang.value} value={lang.value}>\n                            <span className=\"flex items-center gap-2\">\n                              <Globe className=\"w-4 h-4\" />\n                              {lang.label} ({lang.native})\n                            </span>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Select the primary language of the text in your image\n                    </p>\n                  </div>\n\n                  {error && (\n                    <Alert className=\"border-destructive/20 bg-destructive/10\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription data-testid=\"text-error\">\n                        {error}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  <Button\n                    onClick={extractText}\n                    disabled={!selectedFile || isProcessing}\n                    className=\"w-full btn-gradient text-white\"\n                    size=\"lg\"\n                    data-testid=\"button-extract\"\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                        Extracting Text...\n                      </>\n                    ) : (\n                      <>\n                        <Eye className=\"w-5 h-5 mr-2\" />\n                        Extract Text\n                      </>\n                    )}\n                  </Button>\n\n                  {isProcessing && (\n                    <div className=\"space-y-2\">\n                      <Progress value={progress} className=\"h-2\" />\n                      <p className=\"text-sm text-center text-muted-foreground\">\n                        {progressStatus}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </Card>\n            )}\n          </div>\n\n          {/* Output Section */}\n          <div>\n            {extractedResult ? (\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Label className=\"text-lg font-semibold\">Extracted Text</Label>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={copyToClipboard}\n                      data-testid=\"button-copy\"\n                    >\n                      <Copy className=\"w-4 h-4 mr-1\" />\n                      Copy\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={downloadText}\n                      data-testid=\"button-download\"\n                    >\n                      <Download className=\"w-4 h-4 mr-1\" />\n                      Download\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Statistics */}\n                <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                  <div className=\"text-center p-3 rounded-lg bg-muted\">\n                    <div className=\"text-2xl font-bold\" data-testid=\"stat-words\">\n                      {extractedResult.wordCount}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Words</div>\n                  </div>\n                  \n                  <div className=\"text-center p-3 rounded-lg bg-muted\">\n                    <div className={cn(\"text-2xl font-bold\", getConfidenceColor(extractedResult.confidence))}\n                         data-testid=\"stat-confidence\">\n                      {extractedResult.confidence}%\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Confidence</div>\n                  </div>\n                  \n                  <div className=\"text-center p-3 rounded-lg bg-muted\">\n                    <div className=\"text-2xl font-bold\" data-testid=\"stat-chars\">\n                      {extractedResult.text.length}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Characters</div>\n                  </div>\n                </div>\n\n                {/* Extracted Text */}\n                <Textarea\n                  value={extractedResult.text}\n                  readOnly\n                  className=\"min-h-[400px] resize-none font-mono text-sm\"\n                  data-testid=\"textarea-extracted\"\n                />\n\n                <div className=\"mt-4 flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Check className=\"w-4 h-4 text-green-500\" />\n                  <span>Text extracted successfully from image</span>\n                </div>\n              </Card>\n            ) : (\n              <Card className=\"p-6 h-full min-h-[500px] flex items-center justify-center\">\n                <div className=\"text-center text-muted-foreground\">\n                  <FileText className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p className=\"text-lg font-medium mb-2\">No text extracted yet</p>\n                  <p className=\"text-sm\">\n                    Upload an image and click \"Extract Text\" to begin\n                  </p>\n                </div>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <Languages className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Multi-Language Support</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Extract text in 15+ languages including English, Spanish, Chinese, Arabic, and more.\n            </p>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <ScanLine className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Advanced OCR</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Powered by Tesseract.js for accurate text recognition from images of any quality.\n            </p>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <FileOutput className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Export Options</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Copy extracted text to clipboard or download as a TXT file for easy sharing.\n            </p>\n          </Card>\n        </div>\n\n        {/* Use Cases */}\n        <Card className=\"p-6 mb-8\">\n          <h3 className=\"text-lg font-semibold mb-4\">Common Use Cases</h3>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Digitize Printed Documents</p>\n                <p className=\"text-sm text-muted-foreground\">Convert scanned documents and photos to editable text</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Extract Text from Screenshots</p>\n                <p className=\"text-sm text-muted-foreground\">Copy text from images, screenshots, and screen captures</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Translate Image Text</p>\n                <p className=\"text-sm text-muted-foreground\">Extract foreign language text for translation</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Archive Old Photos</p>\n                <p className=\"text-sm text-muted-foreground\">Extract and preserve text from historical documents</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Tips */}\n        <Alert className=\"border-primary/20 bg-primary/5\">\n          <Sparkles className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Pro Tips:</strong> For best results, use high-resolution images with clear text. \n            Ensure good contrast between text and background. Straight, well-lit images work best.\n          </AlertDescription>\n        </Alert>\n      </div>\n    </div>\n  );\n}","size_bytes":22831},"client/src/pages/file-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { \n  Calculator, ArrowLeft, HardDrive, Download, Clock, \n  Wifi, Database, Server, Sparkles, Info, TrendingUp,\n  FileText, Image, Music, Video, Archive, Code,\n  ArrowUpDown, Copy, RefreshCw, X\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\n\ntype SizeUnit = 'B' | 'KB' | 'MB' | 'GB' | 'TB' | 'PB';\ntype SpeedUnit = 'Kbps' | 'Mbps' | 'Gbps';\n\ninterface Conversion {\n  from: { value: number; unit: SizeUnit };\n  to: { [key in SizeUnit]?: number };\n}\n\ninterface DownloadEstimate {\n  speed: number;\n  speedUnit: SpeedUnit;\n  fileSize: number;\n  fileSizeUnit: SizeUnit;\n  time: {\n    seconds: number;\n    formatted: string;\n  };\n}\n\ninterface StorageEstimate {\n  totalSize: number;\n  unit: SizeUnit;\n  breakdown: {\n    type: string;\n    count: number;\n    avgSize: number;\n    totalSize: number;\n  }[];\n}\n\nconst SIZE_UNITS: SizeUnit[] = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\nconst SPEED_UNITS: SpeedUnit[] = ['Kbps', 'Mbps', 'Gbps'];\n\nconst UNIT_MULTIPLIERS: { [key in SizeUnit]: number } = {\n  'B': 1,\n  'KB': 1024,\n  'MB': 1024 * 1024,\n  'GB': 1024 * 1024 * 1024,\n  'TB': 1024 * 1024 * 1024 * 1024,\n  'PB': 1024 * 1024 * 1024 * 1024 * 1024\n};\n\nconst SPEED_MULTIPLIERS: { [key in SpeedUnit]: number } = {\n  'Kbps': 1024 / 8, // Convert to bytes per second\n  'Mbps': (1024 * 1024) / 8,\n  'Gbps': (1024 * 1024 * 1024) / 8\n};\n\nconst COMMON_SPEEDS = [\n  { label: '2G Mobile', speed: 0.1, unit: 'Mbps' as SpeedUnit },\n  { label: '3G Mobile', speed: 2, unit: 'Mbps' as SpeedUnit },\n  { label: '4G LTE', speed: 25, unit: 'Mbps' as SpeedUnit },\n  { label: '5G', speed: 100, unit: 'Mbps' as SpeedUnit },\n  { label: 'DSL', speed: 10, unit: 'Mbps' as SpeedUnit },\n  { label: 'Cable', speed: 50, unit: 'Mbps' as SpeedUnit },\n  { label: 'Fiber', speed: 500, unit: 'Mbps' as SpeedUnit },\n  { label: 'Gigabit', speed: 1, unit: 'Gbps' as SpeedUnit }\n];\n\nconst FILE_TYPES = [\n  { type: 'Documents', icon: FileText, avgSize: 100, unit: 'KB' as SizeUnit, examples: 'PDF, DOC, TXT' },\n  { type: 'Images', icon: Image, avgSize: 2, unit: 'MB' as SizeUnit, examples: 'JPG, PNG, GIF' },\n  { type: 'Music', icon: Music, avgSize: 8, unit: 'MB' as SizeUnit, examples: 'MP3, AAC, FLAC' },\n  { type: 'Videos', icon: Video, avgSize: 700, unit: 'MB' as SizeUnit, examples: 'MP4, AVI, MKV' },\n  { type: '4K Videos', icon: Video, avgSize: 4, unit: 'GB' as SizeUnit, examples: 'Ultra HD MP4' },\n  { type: 'Archives', icon: Archive, avgSize: 50, unit: 'MB' as SizeUnit, examples: 'ZIP, RAR, 7Z' },\n  { type: 'Code Projects', icon: Code, avgSize: 20, unit: 'MB' as SizeUnit, examples: 'Git repos' }\n];\n\nexport default function FileCalculator() {\n  const [activeTab, setActiveTab] = useState(\"converter\");\n  \n  // Converter state\n  const [convertValue, setConvertValue] = useState(\"1024\");\n  const [convertFromUnit, setConvertFromUnit] = useState<SizeUnit>(\"MB\");\n  const [conversion, setConversion] = useState<Conversion | null>(null);\n  \n  // Download calculator state\n  const [downloadSize, setDownloadSize] = useState(\"100\");\n  const [downloadSizeUnit, setDownloadSizeUnit] = useState<SizeUnit>(\"MB\");\n  const [downloadSpeed, setDownloadSpeed] = useState(\"25\");\n  const [downloadSpeedUnit, setDownloadSpeedUnit] = useState<SpeedUnit>(\"Mbps\");\n  const [downloadEstimate, setDownloadEstimate] = useState<DownloadEstimate | null>(null);\n  \n  // Storage calculator state\n  const [storageItems, setStorageItems] = useState([\n    { type: 'Documents', count: 100 },\n    { type: 'Images', count: 500 },\n    { type: 'Music', count: 200 }\n  ]);\n  const [storageEstimate, setStorageEstimate] = useState<StorageEstimate | null>(null);\n  \n  const { toast } = useToast();\n\n  // SEO structured data\n  const howToSchema = generateHowToSchema({\n    name: \"How to Calculate File Sizes and Download Times\",\n    description: \"Convert between file size units and estimate download times\",\n    totalTime: \"PT10S\",\n    steps: [\n      { name: \"Enter Value\", text: \"Input the file size or value to convert\" },\n      { name: \"Select Units\", text: \"Choose the unit to convert from and to\" },\n      { name: \"View Results\", text: \"See instant conversions and calculations\" },\n      { name: \"Copy Values\", text: \"Copy results for use in other applications\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"File Size Calculator - AltafToolsHub\",\n    description: \"File size converter, download time calculator, and storage estimator. Convert between KB, MB, GB and more.\",\n    applicationCategory: \"UtilitiesApplication\",\n    url: \"https://www.altaftoolshub.com/file-calculator\",\n    aggregateRating: { ratingValue: 4.7, ratingCount: 456, bestRating: 5 },\n    featureList: [\n      \"Convert between all file size units\",\n      \"Calculate download times\",\n      \"Estimate storage requirements\",\n      \"Common connection speed presets\",\n      \"File type size estimates\",\n      \"Real-time calculations\"\n    ]\n  });\n\n  useSEO({\n    title: \"File Size Calculator - Convert Units & Download Time | AltafToolsHub\",\n    description: \"Free file size calculator and converter. Convert between KB, MB, GB, TB. Calculate download times and storage requirements. No ads, instant results.\",\n    path: \"/file-calculator\",\n    keywords: \"file size calculator, kb to mb converter, mb to gb, download time calculator, storage calculator, file size converter, data unit converter\",\n    structuredData: [howToSchema, softwareSchema],\n    ogImage: \"https://www.altaftoolshub.com/og-file-calculator.png\"\n  });\n\n  // Convert file sizes\n  useEffect(() => {\n    const value = parseFloat(convertValue);\n    if (isNaN(value) || value < 0) {\n      setConversion(null);\n      return;\n    }\n\n    const bytesValue = value * UNIT_MULTIPLIERS[convertFromUnit];\n    const converted: { [key in SizeUnit]?: number } = {};\n    \n    SIZE_UNITS.forEach(unit => {\n      converted[unit] = bytesValue / UNIT_MULTIPLIERS[unit];\n    });\n\n    setConversion({\n      from: { value, unit: convertFromUnit },\n      to: converted\n    });\n  }, [convertValue, convertFromUnit]);\n\n  // Calculate download time\n  useEffect(() => {\n    const size = parseFloat(downloadSize);\n    const speed = parseFloat(downloadSpeed);\n    \n    if (isNaN(size) || isNaN(speed) || size <= 0 || speed <= 0) {\n      setDownloadEstimate(null);\n      return;\n    }\n\n    const bytesSize = size * UNIT_MULTIPLIERS[downloadSizeUnit];\n    const bytesPerSecond = speed * SPEED_MULTIPLIERS[downloadSpeedUnit];\n    const seconds = bytesSize / bytesPerSecond;\n    \n    setDownloadEstimate({\n      speed,\n      speedUnit: downloadSpeedUnit,\n      fileSize: size,\n      fileSizeUnit: downloadSizeUnit,\n      time: {\n        seconds,\n        formatted: formatTime(seconds)\n      }\n    });\n  }, [downloadSize, downloadSizeUnit, downloadSpeed, downloadSpeedUnit]);\n\n  // Calculate storage requirements\n  useEffect(() => {\n    let totalBytes = 0;\n    const breakdown = storageItems.map(item => {\n      const fileType = FILE_TYPES.find(t => t.type === item.type);\n      if (!fileType) return null;\n      \n      const avgSizeBytes = fileType.avgSize * UNIT_MULTIPLIERS[fileType.unit];\n      const totalSizeBytes = avgSizeBytes * item.count;\n      totalBytes += totalSizeBytes;\n      \n      return {\n        type: item.type,\n        count: item.count,\n        avgSize: fileType.avgSize,\n        totalSize: totalSizeBytes\n      };\n    }).filter(Boolean) as StorageEstimate['breakdown'];\n\n    // Determine best unit for total\n    let bestUnit: SizeUnit = 'B';\n    for (const unit of SIZE_UNITS.slice().reverse()) {\n      const inUnit = totalBytes / UNIT_MULTIPLIERS[unit];\n      if (inUnit >= 1) {\n        bestUnit = unit;\n        break;\n      }\n    }\n\n    setStorageEstimate({\n      totalSize: totalBytes / UNIT_MULTIPLIERS[bestUnit],\n      unit: bestUnit,\n      breakdown\n    });\n  }, [storageItems]);\n\n  const formatTime = (seconds: number): string => {\n    if (seconds < 1) return 'Less than 1 second';\n    if (seconds < 60) return `${Math.round(seconds)} seconds`;\n    \n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    \n    if (days > 0) {\n      const remainingHours = hours % 24;\n      return `${days} day${days > 1 ? 's' : ''} ${remainingHours} hour${remainingHours !== 1 ? 's' : ''}`;\n    }\n    if (hours > 0) {\n      const remainingMinutes = minutes % 60;\n      return `${hours} hour${hours > 1 ? 's' : ''} ${remainingMinutes} minute${remainingMinutes !== 1 ? 's' : ''}`;\n    }\n    return `${minutes} minute${minutes > 1 ? 's' : ''}`;\n  };\n\n  const formatNumber = (num: number): string => {\n    if (num < 0.001) return num.toExponential(2);\n    if (num < 1) return num.toFixed(6);\n    if (num < 10) return num.toFixed(3);\n    if (num < 100) return num.toFixed(2);\n    if (num < 1000) return num.toFixed(1);\n    return num.toLocaleString(undefined, { maximumFractionDigits: 0 });\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Value copied to clipboard.\",\n      });\n    } catch {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy to clipboard.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const addStorageItem = (type: string) => {\n    if (storageItems.find(item => item.type === type)) {\n      toast({\n        title: \"Already Added\",\n        description: `${type} is already in your storage calculation.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n    setStorageItems([...storageItems, { type, count: 100 }]);\n  };\n\n  const updateStorageItem = (index: number, count: number) => {\n    const updated = [...storageItems];\n    updated[index].count = count;\n    setStorageItems(updated);\n  };\n\n  const removeStorageItem = (index: number) => {\n    setStorageItems(storageItems.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"File Size Calculator\"\n        description=\"Convert file sizes and calculate download times\"\n        category=\"UtilitiesApplication\"\n      />\n      \n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <Breadcrumbs items={[{ name: \"File Calculator\", url: \"/file-calculator\" }]} />\n        \n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\"\n            onClick={() => {\n              const toolsSection = document.getElementById('tools-section');\n              if (toolsSection) {\n                window.history.pushState({}, '', '/');\n                setTimeout(() => {\n                  toolsSection.scrollIntoView({ behavior: 'smooth' });\n                }, 100);\n              }\n            }}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Tools\n          </Button>\n          \n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-3 rounded-2xl bg-gradient-to-br from-emerald-500 to-green-500\">\n              <Calculator className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-4xl font-bold\">File Size Calculator</h1>\n          </div>\n          \n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Convert between file size units, calculate download times, and estimate storage requirements. \n            All calculations happen instantly in your browser.\n          </p>\n        </div>\n\n        <PrivacyNotice />\n\n        {/* Main Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-8\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"converter\" data-testid=\"tab-converter\">\n              <ArrowUpDown className=\"w-4 h-4 mr-2\" />\n              Converter\n            </TabsTrigger>\n            <TabsTrigger value=\"download\" data-testid=\"tab-download\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download Time\n            </TabsTrigger>\n            <TabsTrigger value=\"storage\" data-testid=\"tab-storage\">\n              <Database className=\"w-4 h-4 mr-2\" />\n              Storage\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Unit Converter Tab */}\n          <TabsContent value=\"converter\" className=\"mt-6\">\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {/* Input */}\n              <Card className=\"p-6\">\n                <Label className=\"text-lg font-semibold mb-4 block\">Convert From</Label>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"convert-value\">Value</Label>\n                    <Input\n                      id=\"convert-value\"\n                      type=\"number\"\n                      value={convertValue}\n                      onChange={(e) => setConvertValue(e.target.value)}\n                      placeholder=\"Enter value\"\n                      className=\"text-lg\"\n                      data-testid=\"input-convert-value\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"convert-unit\">Unit</Label>\n                    <Select value={convertFromUnit} onValueChange={(v) => setConvertFromUnit(v as SizeUnit)}>\n                      <SelectTrigger id=\"convert-unit\" data-testid=\"select-convert-unit\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {SIZE_UNITS.map(unit => (\n                          <SelectItem key={unit} value={unit}>\n                            {unit} ({unit === 'B' ? 'Bytes' : `${unit.replace('B', '')}bytes`})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Alert className=\"border-primary/20 bg-primary/5\">\n                    <Info className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      Using binary (1024-based) calculations for accurate computer storage values\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              </Card>\n\n              {/* Results */}\n              <Card className=\"p-6\">\n                <Label className=\"text-lg font-semibold mb-4 block\">Converted Values</Label>\n                \n                {conversion ? (\n                  <div className=\"space-y-3\">\n                    {SIZE_UNITS.map(unit => {\n                      const value = conversion.to[unit];\n                      if (value === undefined) return null;\n                      \n                      const isOriginal = unit === convertFromUnit;\n                      \n                      return (\n                        <div \n                          key={unit}\n                          className={cn(\n                            \"flex items-center justify-between p-3 rounded-lg\",\n                            isOriginal ? \"bg-primary/10 border border-primary/20\" : \"bg-muted\"\n                          )}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <HardDrive className=\"w-4 h-4 text-muted-foreground\" />\n                            <span className=\"font-medium\">\n                              {unit === 'B' ? 'Bytes' : `${unit.replace('B', '')}bytes`}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className={cn(\n                              \"font-mono\",\n                              isOriginal && \"font-bold text-primary\"\n                            )} data-testid={`text-converted-${unit}`}>\n                              {formatNumber(value)} {unit}\n                            </span>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(value.toString())}\n                              data-testid={`button-copy-${unit}`}\n                            >\n                              <Copy className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <Calculator className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>Enter a value to see conversions</p>\n                  </div>\n                )}\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Download Time Tab */}\n          <TabsContent value=\"download\" className=\"mt-6\">\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {/* Input */}\n              <Card className=\"p-6\">\n                <Label className=\"text-lg font-semibold mb-4 block\">Download Parameters</Label>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>File Size</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"number\"\n                        value={downloadSize}\n                        onChange={(e) => setDownloadSize(e.target.value)}\n                        placeholder=\"Size\"\n                        className=\"flex-1\"\n                        data-testid=\"input-download-size\"\n                      />\n                      <Select value={downloadSizeUnit} onValueChange={(v) => setDownloadSizeUnit(v as SizeUnit)}>\n                        <SelectTrigger className=\"w-[100px]\" data-testid=\"select-download-unit\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {SIZE_UNITS.slice(1).map(unit => (\n                            <SelectItem key={unit} value={unit}>{unit}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label>Connection Speed</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"number\"\n                        value={downloadSpeed}\n                        onChange={(e) => setDownloadSpeed(e.target.value)}\n                        placeholder=\"Speed\"\n                        className=\"flex-1\"\n                        data-testid=\"input-download-speed\"\n                      />\n                      <Select value={downloadSpeedUnit} onValueChange={(v) => setDownloadSpeedUnit(v as SpeedUnit)}>\n                        <SelectTrigger className=\"w-[100px]\" data-testid=\"select-speed-unit\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {SPEED_UNITS.map(unit => (\n                            <SelectItem key={unit} value={unit}>{unit}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"mb-2 block\">Common Speeds</Label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {COMMON_SPEEDS.map(preset => (\n                        <Button\n                          key={preset.label}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setDownloadSpeed(preset.speed.toString());\n                            setDownloadSpeedUnit(preset.unit);\n                          }}\n                          className=\"justify-start\"\n                          data-testid={`button-speed-${preset.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          <Wifi className=\"w-3 h-3 mr-2\" />\n                          {preset.label}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Results */}\n              <Card className=\"p-6\">\n                <Label className=\"text-lg font-semibold mb-4 block\">Download Time</Label>\n                \n                {downloadEstimate ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center py-8\">\n                      <Clock className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n                      <div className=\"text-3xl font-bold mb-2\" data-testid=\"text-download-time\">\n                        {downloadEstimate.time.formatted}\n                      </div>\n                      <p className=\"text-muted-foreground\">\n                        To download {downloadEstimate.fileSize} {downloadEstimate.fileSizeUnit} \n                        at {downloadEstimate.speed} {downloadEstimate.speedUnit}\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"p-3 rounded-lg bg-muted\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-muted-foreground\">Total seconds</span>\n                          <span className=\"font-mono\" data-testid=\"text-total-seconds\">\n                            {downloadEstimate.time.seconds.toFixed(2)}s\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <Alert className=\"border-yellow-500/20 bg-yellow-500/5\">\n                        <Info className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          Actual download times may vary based on network conditions, server speed, and other factors\n                        </AlertDescription>\n                      </Alert>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <Download className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>Enter file size and connection speed to calculate download time</p>\n                  </div>\n                )}\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Storage Calculator Tab */}\n          <TabsContent value=\"storage\" className=\"mt-6\">\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {/* Input */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Label className=\"text-lg font-semibold\">Storage Items</Label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setStorageItems([])}\n                    disabled={storageItems.length === 0}\n                    data-testid=\"button-clear-storage\"\n                  >\n                    Clear All\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-3 mb-4\">\n                  {storageItems.map((item, index) => {\n                    const fileType = FILE_TYPES.find(t => t.type === item.type);\n                    if (!fileType) return null;\n                    const Icon = fileType.icon;\n                    \n                    return (\n                      <div key={index} className=\"flex items-center gap-3 p-3 rounded-lg bg-muted\">\n                        <Icon className=\"w-5 h-5 text-primary\" />\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{item.type}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            ~{fileType.avgSize} {fileType.unit} each\n                          </div>\n                        </div>\n                        <Input\n                          type=\"number\"\n                          value={item.count}\n                          onChange={(e) => updateStorageItem(index, parseInt(e.target.value) || 0)}\n                          className=\"w-24\"\n                          min=\"0\"\n                          data-testid={`input-storage-${item.type.toLowerCase()}`}\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeStorageItem(index)}\n                          data-testid={`button-remove-${item.type.toLowerCase()}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                <div>\n                  <Label className=\"mb-2 block\">Add File Type</Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {FILE_TYPES.filter(t => !storageItems.find(item => item.type === t.type)).map(fileType => {\n                      const Icon = fileType.icon;\n                      return (\n                        <Button\n                          key={fileType.type}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => addStorageItem(fileType.type)}\n                          className=\"justify-start\"\n                          data-testid={`button-add-${fileType.type.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          <Icon className=\"w-3 h-3 mr-2\" />\n                          {fileType.type}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n              </Card>\n\n              {/* Results */}\n              <Card className=\"p-6\">\n                <Label className=\"text-lg font-semibold mb-4 block\">Storage Requirements</Label>\n                \n                {storageEstimate && storageEstimate.breakdown.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center py-6 rounded-lg bg-primary/5 border border-primary/20\">\n                      <Server className=\"w-12 h-12 mx-auto mb-4 text-primary\" />\n                      <div className=\"text-3xl font-bold mb-2\" data-testid=\"text-total-storage\">\n                        {storageEstimate.totalSize.toFixed(2)} {storageEstimate.unit}\n                      </div>\n                      <p className=\"text-muted-foreground\">Total storage required</p>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-sm\">Breakdown</Label>\n                      {storageEstimate.breakdown.map((item, index) => {\n                        const fileType = FILE_TYPES.find(t => t.type === item.type);\n                        if (!fileType) return null;\n                        const Icon = fileType.icon;\n                        \n                        // Convert to best unit for display\n                        let displaySize = item.totalSize;\n                        let displayUnit: SizeUnit = 'B';\n                        for (const unit of SIZE_UNITS.slice().reverse()) {\n                          const inUnit = item.totalSize / UNIT_MULTIPLIERS[unit];\n                          if (inUnit >= 1) {\n                            displaySize = inUnit;\n                            displayUnit = unit;\n                            break;\n                          }\n                        }\n                        \n                        return (\n                          <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-muted\">\n                            <div className=\"flex items-center gap-3\">\n                              <Icon className=\"w-4 h-4 text-primary\" />\n                              <div>\n                                <span className=\"font-medium\">{item.type}</span>\n                                <span className=\"text-sm text-muted-foreground ml-2\">\n                                  ({item.count} files)\n                                </span>\n                              </div>\n                            </div>\n                            <Badge variant=\"secondary\">\n                              {displaySize.toFixed(2)} {displayUnit}\n                            </Badge>\n                          </div>\n                        );\n                      })}\n                    </div>\n\n                    <Alert className=\"border-blue-500/20 bg-blue-500/5\">\n                      <TrendingUp className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Consider adding 20-30% extra space for future growth and system overhead\n                      </AlertDescription>\n                    </Alert>\n                  </div>\n                ) : (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <Database className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>Add file types to calculate storage requirements</p>\n                  </div>\n                )}\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Features */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <ArrowUpDown className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Unit Conversion</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Convert between all standard file size units from Bytes to Petabytes.\n            </p>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <Clock className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Download Times</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Calculate how long files take to download at different connection speeds.\n            </p>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <Database className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Storage Planning</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Estimate storage needs for collections of different file types.\n            </p>\n          </Card>\n        </div>\n\n        {/* Tips */}\n        <Alert className=\"border-primary/20 bg-primary/5\">\n          <Sparkles className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Pro Tip:</strong> When planning storage, remember that operating systems often show sizes differently. \n            Windows uses binary (1024-based) while macOS uses decimal (1000-based) calculations.\n          </AlertDescription>\n        </Alert>\n      </div>\n    </div>\n  );\n}","size_bytes":32322},"client/src/pages/text-enhancer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSEO, generateHowToSchema, generateSoftwareApplicationSchema } from \"@/hooks/use-seo\";\nimport { \n  analyzeText, \n  enhanceText, \n  checkGrammar, \n  checkSpelling \n} from \"@/lib/text-enhancement\";\nimport {\n  FileText, Sparkles, Copy, Download, RefreshCw, Check, Info,\n  ArrowLeft, BookOpen, Target, Lightbulb, AlertCircle, TrendingUp\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport Breadcrumbs from \"@/components/seo/breadcrumbs\";\nimport ToolSEO from \"@/components/seo/tool-seo\";\nimport PrivacyNotice from \"@/components/privacy-notice\";\n\ninterface ToneOptions {\n  formal: boolean;\n  casual: boolean;\n  professional: boolean;\n  friendly: boolean;\n  concise: boolean;\n  detailed: boolean;\n}\n\nexport default function TextEnhancer() {\n  const [inputText, setInputText] = useState(\"\");\n  const [enhancedText, setEnhancedText] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"enhance\");\n  const [analysis, setAnalysis] = useState<any>(null);\n  const [grammarIssues, setGrammarIssues] = useState<string[]>([]);\n  const [spellingErrors, setSpellingErrors] = useState<string[]>([]);\n  \n  const [toneOptions, setToneOptions] = useState<ToneOptions>({\n    formal: false,\n    casual: false,\n    professional: false,\n    friendly: false,\n    concise: false,\n    detailed: false\n  });\n  \n  const { toast } = useToast();\n\n  // SEO structured data\n  const howToSchema = generateHowToSchema({\n    name: \"How to Enhance Text with AI\",\n    description: \"Improve your writing with grammar checking, readability analysis, and tone adjustment\",\n    totalTime: \"PT30S\",\n    steps: [\n      { name: \"Enter Text\", text: \"Paste or type your text in the input area\" },\n      { name: \"Choose Options\", text: \"Select tone and enhancement preferences\" },\n      { name: \"Analyze\", text: \"Click Analyze or Enhance to process your text\" },\n      { name: \"Apply Changes\", text: \"Review suggestions and copy the improved text\" }\n    ]\n  });\n\n  const softwareSchema = generateSoftwareApplicationSchema({\n    name: \"Text Enhancer - AltafToolsHub\",\n    description: \"AI-powered text improvement tool with grammar checking, readability analysis, and tone adjustment. 100% browser-based processing.\",\n    applicationCategory: \"UtilitiesApplication\",\n    url: \"https://www.altaftoolshub.com/text-enhancer\",\n    aggregateRating: { ratingValue: 4.9, ratingCount: 2156, bestRating: 5 },\n    featureList: [\n      \"Grammar and spelling check\",\n      \"Readability analysis with Flesch score\",\n      \"Tone adjustment (formal, casual, professional)\",\n      \"Passive voice detection\",\n      \"Word and sentence statistics\",\n      \"Writing improvement suggestions\",\n      \"100% client-side processing\"\n    ]\n  });\n\n  useSEO({\n    title: \"Text Enhancer - AI Writing Assistant | AltafToolsHub\",\n    description: \"Free AI-powered text enhancement tool. Check grammar, improve readability, adjust tone, and analyze writing quality. All processing happens in your browser for complete privacy.\",\n    path: \"/text-enhancer\",\n    keywords: \"text enhancer, ai writing assistant, grammar checker, readability analyzer, tone adjuster, writing improvement, text analysis, passive voice checker, writing tool\",\n    structuredData: [howToSchema, softwareSchema],\n    ogImage: \"https://www.altaftoolshub.com/og-text-enhancer.png\"\n  });\n\n  const handleAnalyze = async () => {\n    if (!inputText.trim()) {\n      toast({\n        title: \"No Text\",\n        description: \"Please enter some text to analyze.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      // Analyze text\n      const analysisResult = analyzeText(inputText);\n      setAnalysis(analysisResult);\n      \n      // Check grammar\n      const grammar = checkGrammar(inputText);\n      setGrammarIssues(grammar);\n      \n      // Check spelling\n      const spelling = await checkSpelling(inputText);\n      setSpellingErrors(spelling);\n      \n      setActiveTab(\"analysis\");\n      \n      toast({\n        title: \"Analysis Complete\",\n        description: \"Your text has been analyzed successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Analysis Failed\",\n        description: \"Failed to analyze text. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleEnhance = () => {\n    if (!inputText.trim()) {\n      toast({\n        title: \"No Text\",\n        description: \"Please enter some text to enhance.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Check if at least one tone option is selected\n    const hasSelectedTone = Object.values(toneOptions).some(v => v);\n    if (!hasSelectedTone) {\n      toast({\n        title: \"No Options Selected\",\n        description: \"Please select at least one enhancement option.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      const enhanced = enhanceText(inputText, toneOptions);\n      setEnhancedText(enhanced);\n      setActiveTab(\"enhanced\");\n      \n      toast({\n        title: \"Text Enhanced\",\n        description: \"Your text has been improved based on your preferences.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Enhancement Failed\",\n        description: \"Failed to enhance text. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Text copied to clipboard.\",\n      });\n    } catch {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy text. Please try selecting and copying manually.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const downloadText = (text: string, filename: string) => {\n    const blob = new Blob([text], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const getReadabilityColor = (score: number) => {\n    if (score >= 90) return \"text-green-500\";\n    if (score >= 70) return \"text-emerald-500\";\n    if (score >= 50) return \"text-yellow-500\";\n    if (score >= 30) return \"text-orange-500\";\n    return \"text-red-500\";\n  };\n\n  const resetAll = () => {\n    setInputText(\"\");\n    setEnhancedText(\"\");\n    setAnalysis(null);\n    setGrammarIssues([]);\n    setSpellingErrors([]);\n    setToneOptions({\n      formal: false,\n      casual: false,\n      professional: false,\n      friendly: false,\n      concise: false,\n      detailed: false\n    });\n    setActiveTab(\"enhance\");\n  };\n\n  // Example texts for quick testing\n  const loadExample = () => {\n    const exampleText = `The importance of effective communication cannot be understated in todays fast-paced world. Weather your writing emails, reports, or social media posts, the way you express yourself effects how others percieve you.\n\nGood writing isnt just about grammer and spelling. Its about clarity, tone, and making sure your message resonates with your audience. This tool can help you improve your writing by analyzing readability, checking for common mistakes, and suggesting improvements.\n\nRemember: clear writing leads to clear thinking. Take the time to refine your words and youll see the differance in how people respond to your ideas.`;\n    \n    setInputText(exampleText);\n    toast({\n      title: \"Example Loaded\",\n      description: \"Sample text with intentional errors loaded for testing.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen pattern-bg\">\n      <ToolSEO \n        toolName=\"Text Enhancer\"\n        description=\"AI-powered text improvement with grammar checking and tone adjustment\"\n        category=\"UtilitiesApplication\"\n      />\n      \n      <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <Breadcrumbs items={[{ name: \"Text Enhancer\", url: \"/text-enhancer\" }]} />\n        \n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            className=\"mb-4\"\n            onClick={() => {\n              const toolsSection = document.getElementById('tools-section');\n              if (toolsSection) {\n                window.history.pushState({}, '', '/');\n                setTimeout(() => {\n                  toolsSection.scrollIntoView({ behavior: 'smooth' });\n                }, 100);\n              }\n            }}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Tools\n          </Button>\n          \n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"p-3 rounded-2xl bg-gradient-to-br from-purple-500 to-blue-500\">\n              <FileText className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-4xl font-bold\">Text Enhancer</h1>\n          </div>\n          \n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Improve your writing with AI-powered analysis, grammar checking, and tone adjustments. \n            All processing happens in your browser for complete privacy.\n          </p>\n        </div>\n\n        <PrivacyNotice />\n\n        {/* Main Content */}\n        <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n          {/* Input Section */}\n          <Card className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <Label htmlFor=\"input-text\" className=\"text-lg font-semibold\">\n                Your Text\n              </Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={loadExample}\n                  data-testid=\"button-load-example\"\n                >\n                  <Lightbulb className=\"w-4 h-4 mr-1\" />\n                  Example\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={resetAll}\n                  disabled={!inputText && !enhancedText}\n                  data-testid=\"button-reset\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-1\" />\n                  Reset\n                </Button>\n              </div>\n            </div>\n            \n            <Textarea\n              id=\"input-text\"\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              placeholder=\"Paste or type your text here...\"\n              className=\"min-h-[300px] resize-none\"\n              data-testid=\"textarea-input\"\n            />\n            \n            <div className=\"mt-4 flex items-center justify-between text-sm text-muted-foreground\">\n              <span data-testid=\"text-word-count\">{inputText.split(/\\s+/).filter(w => w).length} words</span>\n              <span data-testid=\"text-char-count\">{inputText.length} characters</span>\n            </div>\n\n            {/* Enhancement Options */}\n            <div className=\"mt-6 space-y-4\">\n              <Label className=\"text-base font-semibold\">Enhancement Options</Label>\n              \n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                  <Label htmlFor=\"formal\" className=\"text-sm cursor-pointer\">\n                    Formal\n                  </Label>\n                  <Switch\n                    id=\"formal\"\n                    checked={toneOptions.formal}\n                    onCheckedChange={(checked) => {\n                      setToneOptions({\n                        ...toneOptions,\n                        formal: checked,\n                        casual: checked ? false : toneOptions.casual\n                      });\n                    }}\n                    data-testid=\"switch-formal\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                  <Label htmlFor=\"casual\" className=\"text-sm cursor-pointer\">\n                    Casual\n                  </Label>\n                  <Switch\n                    id=\"casual\"\n                    checked={toneOptions.casual}\n                    onCheckedChange={(checked) => {\n                      setToneOptions({\n                        ...toneOptions,\n                        casual: checked,\n                        formal: checked ? false : toneOptions.formal\n                      });\n                    }}\n                    data-testid=\"switch-casual\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                  <Label htmlFor=\"professional\" className=\"text-sm cursor-pointer\">\n                    Professional\n                  </Label>\n                  <Switch\n                    id=\"professional\"\n                    checked={toneOptions.professional}\n                    onCheckedChange={(checked) => {\n                      setToneOptions({\n                        ...toneOptions,\n                        professional: checked,\n                        friendly: checked ? false : toneOptions.friendly\n                      });\n                    }}\n                    data-testid=\"switch-professional\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                  <Label htmlFor=\"friendly\" className=\"text-sm cursor-pointer\">\n                    Friendly\n                  </Label>\n                  <Switch\n                    id=\"friendly\"\n                    checked={toneOptions.friendly}\n                    onCheckedChange={(checked) => {\n                      setToneOptions({\n                        ...toneOptions,\n                        friendly: checked,\n                        professional: checked ? false : toneOptions.professional\n                      });\n                    }}\n                    data-testid=\"switch-friendly\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                  <Label htmlFor=\"concise\" className=\"text-sm cursor-pointer\">\n                    Concise\n                  </Label>\n                  <Switch\n                    id=\"concise\"\n                    checked={toneOptions.concise}\n                    onCheckedChange={(checked) => {\n                      setToneOptions({\n                        ...toneOptions,\n                        concise: checked,\n                        detailed: checked ? false : toneOptions.detailed\n                      });\n                    }}\n                    data-testid=\"switch-concise\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                  <Label htmlFor=\"detailed\" className=\"text-sm cursor-pointer\">\n                    Detailed\n                  </Label>\n                  <Switch\n                    id=\"detailed\"\n                    checked={toneOptions.detailed}\n                    onCheckedChange={(checked) => {\n                      setToneOptions({\n                        ...toneOptions,\n                        detailed: checked,\n                        concise: checked ? false : toneOptions.concise\n                      });\n                    }}\n                    data-testid=\"switch-detailed\"\n                  />\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handleAnalyze}\n                  disabled={!inputText.trim() || isProcessing}\n                  className=\"flex-1\"\n                  variant=\"outline\"\n                  data-testid=\"button-analyze\"\n                >\n                  <Target className=\"w-4 h-4 mr-2\" />\n                  Analyze Text\n                </Button>\n                \n                <Button\n                  onClick={handleEnhance}\n                  disabled={!inputText.trim() || isProcessing || !Object.values(toneOptions).some(v => v)}\n                  className=\"flex-1 btn-gradient text-white\"\n                  data-testid=\"button-enhance\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Enhance Text\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Output Section */}\n          <Card className=\"p-6\">\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"enhance\" data-testid=\"tab-enhanced\">\n                  Enhanced\n                </TabsTrigger>\n                <TabsTrigger value=\"analysis\" data-testid=\"tab-analysis\">\n                  Analysis\n                </TabsTrigger>\n                <TabsTrigger value=\"issues\" data-testid=\"tab-issues\">\n                  Issues\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Enhanced Text Tab */}\n              <TabsContent value=\"enhance\" className=\"mt-4\">\n                {enhancedText ? (\n                  <div>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Label className=\"text-lg font-semibold\">Enhanced Text</Label>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(enhancedText)}\n                          data-testid=\"button-copy-enhanced\"\n                        >\n                          <Copy className=\"w-4 h-4 mr-1\" />\n                          Copy\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => downloadText(enhancedText, 'enhanced-text.txt')}\n                          data-testid=\"button-download-enhanced\"\n                        >\n                          <Download className=\"w-4 h-4 mr-1\" />\n                          Download\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <Textarea\n                      value={enhancedText}\n                      readOnly\n                      className=\"min-h-[300px] resize-none\"\n                      data-testid=\"textarea-enhanced\"\n                    />\n                    \n                    <div className=\"mt-4 flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Check className=\"w-4 h-4 text-green-500\" />\n                      <span>Text enhanced with selected options</span>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col items-center justify-center min-h-[300px] text-muted-foreground\">\n                    <Sparkles className=\"w-12 h-12 mb-4 opacity-50\" />\n                    <p className=\"text-center\">\n                      Select enhancement options and click \"Enhance Text\" to improve your writing\n                    </p>\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Analysis Tab */}\n              <TabsContent value=\"analysis\" className=\"mt-4\">\n                {analysis ? (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-lg font-semibold mb-4 block\">Text Analysis</Label>\n                      \n                      {/* Statistics */}\n                      <div className=\"grid grid-cols-2 gap-3 mb-6\">\n                        <div className=\"p-3 rounded-lg bg-muted\">\n                          <div className=\"text-2xl font-bold\" data-testid=\"stat-words\">\n                            {analysis.wordCount}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Words</div>\n                        </div>\n                        \n                        <div className=\"p-3 rounded-lg bg-muted\">\n                          <div className=\"text-2xl font-bold\" data-testid=\"stat-sentences\">\n                            {analysis.sentenceCount}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Sentences</div>\n                        </div>\n                        \n                        <div className=\"p-3 rounded-lg bg-muted\">\n                          <div className=\"text-2xl font-bold\" data-testid=\"stat-paragraphs\">\n                            {analysis.paragraphCount}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Paragraphs</div>\n                        </div>\n                        \n                        <div className=\"p-3 rounded-lg bg-muted\">\n                          <div className=\"text-2xl font-bold\" data-testid=\"stat-avg-sentence\">\n                            {analysis.averageSentenceLength.toFixed(1)}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Avg Words/Sentence</div>\n                        </div>\n                      </div>\n\n                      {/* Readability Score */}\n                      <div className=\"mb-6\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <Label>Readability Score</Label>\n                          <span className={cn(\"font-semibold\", getReadabilityColor(analysis.readabilityScore))}>\n                            {analysis.readabilityScore.toFixed(0)}/100\n                          </span>\n                        </div>\n                        <Progress value={analysis.readabilityScore} className=\"h-2\" />\n                        <p className=\"text-sm text-muted-foreground mt-2\">\n                          {analysis.readabilityLevel}\n                        </p>\n                      </div>\n\n                      {/* Suggestions */}\n                      {analysis.suggestions && analysis.suggestions.length > 0 && (\n                        <div>\n                          <Label className=\"mb-2 block\">Suggestions</Label>\n                          <div className=\"space-y-2\">\n                            {analysis.suggestions.map((suggestion: string, index: number) => (\n                              <div key={index} className=\"flex items-start gap-2 p-3 rounded-lg bg-muted\">\n                                <TrendingUp className=\"w-4 h-4 text-primary mt-0.5\" />\n                                <span className=\"text-sm\">{suggestion}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Complex Words */}\n                      {analysis.complexWords && analysis.complexWords.length > 0 && (\n                        <div>\n                          <Label className=\"mb-2 block\">Complex Words</Label>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {analysis.complexWords.map((word: string, index: number) => (\n                              <Badge key={index} variant=\"secondary\">\n                                {word}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col items-center justify-center min-h-[300px] text-muted-foreground\">\n                    <Target className=\"w-12 h-12 mb-4 opacity-50\" />\n                    <p className=\"text-center\">\n                      Click \"Analyze Text\" to get detailed insights about your writing\n                    </p>\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* Issues Tab */}\n              <TabsContent value=\"issues\" className=\"mt-4\">\n                {(grammarIssues.length > 0 || spellingErrors.length > 0 || (analysis && analysis.passiveVoices && analysis.passiveVoices.length > 0)) ? (\n                  <div className=\"space-y-4\">\n                    <Label className=\"text-lg font-semibold\">Issues Found</Label>\n                    \n                    {/* Grammar Issues */}\n                    {grammarIssues.length > 0 && (\n                      <div>\n                        <Label className=\"mb-2 block flex items-center gap-2\">\n                          <AlertCircle className=\"w-4 h-4 text-yellow-500\" />\n                          Grammar Issues\n                        </Label>\n                        <div className=\"space-y-2\">\n                          {grammarIssues.map((issue, index) => (\n                            <div key={index} className=\"p-3 rounded-lg bg-yellow-500/10 border border-yellow-500/20\">\n                              <span className=\"text-sm\">{issue}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Spelling Errors */}\n                    {spellingErrors.length > 0 && (\n                      <div>\n                        <Label className=\"mb-2 block flex items-center gap-2\">\n                          <AlertCircle className=\"w-4 h-4 text-red-500\" />\n                          Spelling Errors\n                        </Label>\n                        <div className=\"space-y-2\">\n                          {spellingErrors.map((error, index) => (\n                            <div key={index} className=\"p-3 rounded-lg bg-red-500/10 border border-red-500/20\">\n                              <span className=\"text-sm\">{error}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Passive Voice */}\n                    {analysis && analysis.passiveVoices && analysis.passiveVoices.length > 0 && (\n                      <div>\n                        <Label className=\"mb-2 block flex items-center gap-2\">\n                          <Info className=\"w-4 h-4 text-blue-500\" />\n                          Passive Voice Detected\n                        </Label>\n                        <div className=\"space-y-2\">\n                          {analysis.passiveVoices.map((sentence: string, index: number) => (\n                            <div key={index} className=\"p-3 rounded-lg bg-blue-500/10 border border-blue-500/20\">\n                              <span className=\"text-sm italic\">\"{sentence}\"</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col items-center justify-center min-h-[300px] text-muted-foreground\">\n                    <Check className=\"w-12 h-12 mb-4 text-green-500 opacity-50\" />\n                    <p className=\"text-center\">\n                      {analysis ? \"No issues found! Your text looks good.\" : \"Analyze your text to check for issues\"}\n                    </p>\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </Card>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <BookOpen className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Readability Analysis</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Get Flesch Reading Ease scores and grade-level assessments to ensure your content reaches your audience effectively.\n            </p>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <AlertCircle className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Grammar & Spelling</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Detect common grammar mistakes, spelling errors, and passive voice usage to improve writing quality.\n            </p>\n          </Card>\n          \n          <Card className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              <h3 className=\"font-semibold\">Tone Adjustment</h3>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Transform your text to be more formal, casual, professional, or friendly based on your needs.\n            </p>\n          </Card>\n        </div>\n\n        {/* Tips Section */}\n        <Card className=\"p-6 mb-8\">\n          <h3 className=\"text-lg font-semibold mb-4\">Writing Tips</h3>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Keep sentences under 20 words</p>\n                <p className=\"text-sm text-muted-foreground\">Shorter sentences are easier to read and understand</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Use active voice</p>\n                <p className=\"text-sm text-muted-foreground\">Active voice makes writing more direct and engaging</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Vary sentence length</p>\n                <p className=\"text-sm text-muted-foreground\">Mix short and long sentences for better rhythm</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-1 rounded bg-primary/10\">\n                <Check className=\"w-4 h-4 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-sm\">Use transition words</p>\n                <p className=\"text-sm text-muted-foreground\">Connect ideas smoothly with words like \"however\" and \"therefore\"</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":32023},"client/src/components/lazy-image.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LazyImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  src: string;\n  alt: string;\n  placeholderSrc?: string;\n  threshold?: number;\n}\n\nexport function LazyImage({\n  src,\n  alt,\n  placeholderSrc,\n  className,\n  threshold = 0.1,\n  ...props\n}: LazyImageProps) {\n  const [imageSrc, setImageSrc] = useState(placeholderSrc || \"\");\n  const [imageRef, setImageRef] = useState<HTMLImageElement | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    let observer: IntersectionObserver;\n\n    if (imageRef && imageSrc !== src) {\n      if (IntersectionObserver) {\n        observer = new IntersectionObserver(\n          (entries) => {\n            entries.forEach((entry) => {\n              if (entry.isIntersecting) {\n                setImageSrc(src);\n                observer.unobserve(imageRef);\n              }\n            });\n          },\n          {\n            threshold,\n          }\n        );\n        observer.observe(imageRef);\n      } else {\n        // Fallback for browsers that don't support IntersectionObserver\n        setImageSrc(src);\n      }\n    }\n\n    return () => {\n      if (observer && observer.unobserve && imageRef) {\n        observer.unobserve(imageRef);\n      }\n    };\n  }, [imageRef, imageSrc, src, threshold]);\n\n  return (\n    <img\n      ref={setImageRef}\n      src={imageSrc}\n      alt={alt}\n      className={cn(\n        \"transition-opacity duration-300\",\n        isLoaded ? \"opacity-100\" : \"opacity-0\",\n        className\n      )}\n      onLoad={() => setIsLoaded(true)}\n      loading=\"lazy\"\n      decoding=\"async\"\n      {...props}\n    />\n  );\n}","size_bytes":1706},"client/src/components/seo/comparison-table.tsx":{"content":"import { Check, X, Minus } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ComparisonFeature {\n  feature: string;\n  altafToolsHub: boolean | string;\n  competitor1: boolean | string;\n  competitor2: boolean | string;\n  competitor3: boolean | string;\n}\n\ninterface ComparisonTableProps {\n  title: string;\n  description?: string;\n  features: ComparisonFeature[];\n  competitor1Name?: string;\n  competitor2Name?: string;\n  competitor3Name?: string;\n}\n\nexport function ComparisonTable({\n  title,\n  description,\n  features,\n  competitor1Name = \"Adobe Acrobat\",\n  competitor2Name = \"ILovePDF\",\n  competitor3Name = \"SmallPDF\"\n}: ComparisonTableProps) {\n  const renderCell = (value: boolean | string) => {\n    if (typeof value === \"boolean\") {\n      return value ? (\n        <Check className=\"w-5 h-5 text-green-500 mx-auto\" aria-label=\"Yes\" />\n      ) : (\n        <X className=\"w-5 h-5 text-red-500 mx-auto\" aria-label=\"No\" />\n      );\n    }\n    if (value === \"-\") {\n      return <Minus className=\"w-5 h-5 text-gray-400 mx-auto\" aria-label=\"Not applicable\" />;\n    }\n    return <span className=\"text-sm text-center block\">{value}</span>;\n  };\n\n  return (\n    <section className=\"my-12\" itemScope itemType=\"https://schema.org/Table\">\n      <header className=\"mb-6 text-center\">\n        <h2 className=\"text-2xl font-bold mb-2\" itemProp=\"name\" data-testid=\"heading-comparison\">\n          {title}\n        </h2>\n        {description && (\n          <p className=\"text-muted-foreground\" itemProp=\"description\">\n            {description}\n          </p>\n        )}\n      </header>\n\n      <Card className=\"overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\" itemProp=\"mainEntity\">\n            <thead className=\"bg-muted/50\">\n              <tr>\n                <th className=\"text-left p-4 font-semibold\" scope=\"col\">\n                  Features\n                </th>\n                <th className=\"text-center p-4 font-semibold\" scope=\"col\">\n                  <div className=\"flex flex-col items-center gap-1\">\n                    <span>AltafToolsHub</span>\n                    <Badge className=\"bg-primary text-xs\">Our Tool</Badge>\n                  </div>\n                </th>\n                <th className=\"text-center p-4 font-semibold\" scope=\"col\">\n                  {competitor1Name}\n                </th>\n                <th className=\"text-center p-4 font-semibold\" scope=\"col\">\n                  {competitor2Name}\n                </th>\n                <th className=\"text-center p-4 font-semibold\" scope=\"col\">\n                  {competitor3Name}\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {features.map((row, index) => (\n                <tr\n                  key={index}\n                  className={index % 2 === 0 ? \"bg-background\" : \"bg-muted/20\"}\n                  itemScope\n                  itemType=\"https://schema.org/PropertyValue\"\n                >\n                  <td className=\"p-4 font-medium\" itemProp=\"name\">\n                    {row.feature}\n                  </td>\n                  <td className=\"p-4 text-center\" itemProp=\"value\">\n                    <div className=\"font-semibold text-primary\">\n                      {renderCell(row.altafToolsHub)}\n                    </div>\n                  </td>\n                  <td className=\"p-4 text-center\">\n                    {renderCell(row.competitor1)}\n                  </td>\n                  <td className=\"p-4 text-center\">\n                    {renderCell(row.competitor2)}\n                  </td>\n                  <td className=\"p-4 text-center\">\n                    {renderCell(row.competitor3)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      <div className=\"mt-6 p-4 bg-primary/5 rounded-lg border border-primary/20\">\n        <p className=\"text-sm text-center\">\n          <strong className=\"text-primary\">Why AltafToolsHub?</strong> We're the only service that \n          processes everything in your browser for true privacy, requires no registration, \n          and is completely free forever.\n        </p>\n      </div>\n    </section>\n  );\n}\n\n// Pre-defined comparison data for PDF tools\nexport const pdfToolsComparison: ComparisonFeature[] = [\n  {\n    feature: \"100% Browser Processing\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: false,\n    competitor3: false\n  },\n  {\n    feature: \"No File Upload Required\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: false,\n    competitor3: false\n  },\n  {\n    feature: \"No Registration Needed\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: \"Limited\",\n    competitor3: \"Limited\"\n  },\n  {\n    feature: \"Completely Free\",\n    altafToolsHub: true,\n    competitor1: \"Trial\",\n    competitor2: \"Limited\",\n    competitor3: \"Limited\"\n  },\n  {\n    feature: \"No Watermarks\",\n    altafToolsHub: true,\n    competitor1: true,\n    competitor2: \"Paid only\",\n    competitor3: \"Paid only\"\n  },\n  {\n    feature: \"Unlimited Usage\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: false,\n    competitor3: false\n  },\n  {\n    feature: \"Works Offline\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: false,\n    competitor3: false\n  },\n  {\n    feature: \"Specific Size Targets\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: false,\n    competitor3: false\n  },\n  {\n    feature: \"Data Privacy\",\n    altafToolsHub: \"100%\",\n    competitor1: \"Cloud\",\n    competitor2: \"Cloud\",\n    competitor3: \"Cloud\"\n  },\n  {\n    feature: \"Processing Speed\",\n    altafToolsHub: \"Instant\",\n    competitor1: \"Fast\",\n    competitor2: \"Fast\",\n    competitor3: \"Fast\"\n  }\n];\n\n// Pre-defined comparison for general tools\nexport const generalToolsComparison: ComparisonFeature[] = [\n  {\n    feature: \"Password Generator\",\n    altafToolsHub: true,\n    competitor1: true,\n    competitor2: true,\n    competitor3: true\n  },\n  {\n    feature: \"QR Code Generator\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: true,\n    competitor3: false\n  },\n  {\n    feature: \"Word Counter\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: false,\n    competitor3: false\n  },\n  {\n    feature: \"Text OCR\",\n    altafToolsHub: true,\n    competitor1: true,\n    competitor2: true,\n    competitor3: true\n  },\n  {\n    feature: \"Client-Side Only\",\n    altafToolsHub: true,\n    competitor1: false,\n    competitor2: false,\n    competitor3: false\n  },\n  {\n    feature: \"Mobile Support\",\n    altafToolsHub: true,\n    competitor1: true,\n    competitor2: true,\n    competitor3: true\n  },\n  {\n    feature: \"API Access\",\n    altafToolsHub: false,\n    competitor1: true,\n    competitor2: true,\n    competitor3: true\n  },\n  {\n    feature: \"Batch Processing\",\n    altafToolsHub: \"Coming\",\n    competitor1: true,\n    competitor2: true,\n    competitor3: true\n  },\n  {\n    feature: \"Price\",\n    altafToolsHub: \"Free\",\n    competitor1: \"$15/mo\",\n    competitor2: \"$9/mo\",\n    competitor3: \"$12/mo\"\n  },\n  {\n    feature: \"Daily Limits\",\n    altafToolsHub: \"None\",\n    competitor1: \"Varies\",\n    competitor2: \"2-3 files\",\n    competitor3: \"2 files\"\n  }\n];","size_bytes":7290}},"version":1}